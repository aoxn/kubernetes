/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_v1.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSlicev1_OwnerReference(([]pkg2_v1.OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSlicev1_OwnerReference(([]pkg2_v1.OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_v1.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_v1.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSlicev1_OwnerReference((*[]pkg2_v1.OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_v1.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_v1.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSlicev1_OwnerReference((*[]pkg2_v1.OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [25]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq101[24] = x.VolumeSource.OSS != nil && x.OSS != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(25)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.OSS == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.OSS == nil {
							r.EncodeNil()
						} else {
							x.OSS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("oss"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.OSS == nil {
							r.EncodeNil()
						} else {
							x.OSS.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "oss":
			if x.VolumeSource.OSS == nil {
				x.VolumeSource.OSS = new(OSSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.OSS != nil {
					x.OSS = nil
				}
			} else {
				if x.OSS == nil {
					x.OSS = new(OSSVolumeSource)
				}
				x.OSS.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.OSS == nil {
		x.VolumeSource.OSS = new(OSSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSS != nil {
			x.OSS = nil
		}
	} else {
		if x.OSS == nil {
			x.OSS = new(OSSVolumeSource)
		}
		x.OSS.CodecDecodeSelf(d)
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym183 := z.EncBinary()
		_ = yym183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep184 := !z.EncBinary()
			yy2arr184 := z.EncBasicHandle().StructToArray
			var yyq184 [24]bool
			_, _, _ = yysep184, yyq184, yy2arr184
			const yyr184 bool = false
			yyq184[0] = x.HostPath != nil
			yyq184[1] = x.EmptyDir != nil
			yyq184[2] = x.GCEPersistentDisk != nil
			yyq184[3] = x.AWSElasticBlockStore != nil
			yyq184[4] = x.GitRepo != nil
			yyq184[5] = x.Secret != nil
			yyq184[6] = x.NFS != nil
			yyq184[7] = x.ISCSI != nil
			yyq184[8] = x.Glusterfs != nil
			yyq184[9] = x.PersistentVolumeClaim != nil
			yyq184[10] = x.RBD != nil
			yyq184[11] = x.FlexVolume != nil
			yyq184[12] = x.Cinder != nil
			yyq184[13] = x.CephFS != nil
			yyq184[14] = x.Flocker != nil
			yyq184[15] = x.DownwardAPI != nil
			yyq184[16] = x.FC != nil
			yyq184[17] = x.AzureFile != nil
			yyq184[18] = x.ConfigMap != nil
			yyq184[19] = x.VsphereVolume != nil
			yyq184[20] = x.Quobyte != nil
			yyq184[21] = x.AzureDisk != nil
			yyq184[22] = x.PhotonPersistentDisk != nil
			yyq184[23] = x.OSS != nil
			var yynn184 int
			if yyr184 || yy2arr184 {
				r.EncodeArrayStart(24)
			} else {
				yynn184 = 0
				for _, b := range yyq184 {
					if b {
						yynn184++
					}
				}
				r.EncodeMapStart(yynn184)
				yynn184 = 0
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[23] {
					if x.OSS == nil {
						r.EncodeNil()
					} else {
						x.OSS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("oss"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSS == nil {
						r.EncodeNil()
					} else {
						x.OSS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym209 := z.DecBinary()
	_ = yym209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct210 := r.ContainerType()
		if yyct210 == codecSelferValueTypeMap1234 {
			yyl210 := r.ReadMapStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl210, d)
			}
		} else if yyct210 == codecSelferValueTypeArray1234 {
			yyl210 := r.ReadArrayStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys211Slc
	var yyhl211 bool = l >= 0
	for yyj211 := 0; ; yyj211++ {
		if yyhl211 {
			if yyj211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys211Slc = r.DecodeBytes(yys211Slc, true, true)
		yys211 := string(yys211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys211 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "oss":
			if r.TryDecodeAsNil() {
				if x.OSS != nil {
					x.OSS = nil
				}
			} else {
				if x.OSS == nil {
					x.OSS = new(OSSVolumeSource)
				}
				x.OSS.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys211)
		} // end switch yys211
	} // end for yyj211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj236 int
	var yyb236 bool
	var yyhl236 bool = l >= 0
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSS != nil {
			x.OSS = nil
		}
	} else {
		if x.OSS == nil {
			x.OSS = new(OSSVolumeSource)
		}
		x.OSS.CodecDecodeSelf(d)
	}
	for {
		yyj236++
		if yyhl236 {
			yyb236 = yyj236 > l
		} else {
			yyb236 = r.CheckBreak()
		}
		if yyb236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym261 := z.EncBinary()
		_ = yym261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep262 := !z.EncBinary()
			yy2arr262 := z.EncBasicHandle().StructToArray
			var yyq262 [2]bool
			_, _, _ = yysep262, yyq262, yy2arr262
			const yyr262 bool = false
			yyq262[1] = x.ReadOnly != false
			var yynn262 int
			if yyr262 || yy2arr262 {
				r.EncodeArrayStart(2)
			} else {
				yynn262 = 1
				for _, b := range yyq262 {
					if b {
						yynn262++
					}
				}
				r.EncodeMapStart(yynn262)
				yynn262 = 0
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym264 := z.EncBinary()
				_ = yym264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym265 := z.EncBinary()
				_ = yym265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[1] {
					yym267 := z.EncBinary()
					_ = yym267
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym269 := z.DecBinary()
	_ = yym269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct270 := r.ContainerType()
		if yyct270 == codecSelferValueTypeMap1234 {
			yyl270 := r.ReadMapStart()
			if yyl270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl270, d)
			}
		} else if yyct270 == codecSelferValueTypeArray1234 {
			yyl270 := r.ReadArrayStart()
			if yyl270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys271Slc
	var yyhl271 bool = l >= 0
	for yyj271 := 0; ; yyj271++ {
		if yyhl271 {
			if yyj271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys271Slc = r.DecodeBytes(yys271Slc, true, true)
		yys271 := string(yys271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys271 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys271)
		} // end switch yys271
	} // end for yyj271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym277 := z.EncBinary()
		_ = yym277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep278 := !z.EncBinary()
			yy2arr278 := z.EncBasicHandle().StructToArray
			var yyq278 [18]bool
			_, _, _ = yysep278, yyq278, yy2arr278
			const yyr278 bool = false
			yyq278[0] = x.GCEPersistentDisk != nil
			yyq278[1] = x.AWSElasticBlockStore != nil
			yyq278[2] = x.HostPath != nil
			yyq278[3] = x.Glusterfs != nil
			yyq278[4] = x.NFS != nil
			yyq278[5] = x.RBD != nil
			yyq278[6] = x.ISCSI != nil
			yyq278[7] = x.Cinder != nil
			yyq278[8] = x.CephFS != nil
			yyq278[9] = x.FC != nil
			yyq278[10] = x.Flocker != nil
			yyq278[11] = x.FlexVolume != nil
			yyq278[12] = x.AzureFile != nil
			yyq278[13] = x.VsphereVolume != nil
			yyq278[14] = x.Quobyte != nil
			yyq278[15] = x.AzureDisk != nil
			yyq278[16] = x.PhotonPersistentDisk != nil
			yyq278[17] = x.OSS != nil
			var yynn278 int
			if yyr278 || yy2arr278 {
				r.EncodeArrayStart(18)
			} else {
				yynn278 = 0
				for _, b := range yyq278 {
					if b {
						yynn278++
					}
				}
				r.EncodeMapStart(yynn278)
				yynn278 = 0
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[17] {
					if x.OSS == nil {
						r.EncodeNil()
					} else {
						x.OSS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("oss"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSS == nil {
						r.EncodeNil()
					} else {
						x.OSS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym297 := z.DecBinary()
	_ = yym297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct298 := r.ContainerType()
		if yyct298 == codecSelferValueTypeMap1234 {
			yyl298 := r.ReadMapStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl298, d)
			}
		} else if yyct298 == codecSelferValueTypeArray1234 {
			yyl298 := r.ReadArrayStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys299Slc
	var yyhl299 bool = l >= 0
	for yyj299 := 0; ; yyj299++ {
		if yyhl299 {
			if yyj299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys299Slc = r.DecodeBytes(yys299Slc, true, true)
		yys299 := string(yys299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys299 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "oss":
			if r.TryDecodeAsNil() {
				if x.OSS != nil {
					x.OSS = nil
				}
			} else {
				if x.OSS == nil {
					x.OSS = new(OSSVolumeSource)
				}
				x.OSS.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys299)
		} // end switch yys299
	} // end for yyj299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSS != nil {
			x.OSS = nil
		}
	} else {
		if x.OSS == nil {
			x.OSS = new(OSSVolumeSource)
		}
		x.OSS.CodecDecodeSelf(d)
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [5]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Kind != ""
			yyq338[1] = x.APIVersion != ""
			yyq338[2] = true
			yyq338[3] = true
			yyq338[4] = true
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(5)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yy346 := &x.ObjectMeta
					yy346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy347 := &x.ObjectMeta
					yy347.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[3] {
					yy349 := &x.Spec
					yy349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.Spec
					yy350.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[4] {
					yy352 := &x.Status
					yy352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy353 := &x.Status
					yy353.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct355 := r.ContainerType()
		if yyct355 == codecSelferValueTypeMap1234 {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if yyct355 == codecSelferValueTypeArray1234 {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv359 := &x.ObjectMeta
				yyv359.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv360 := &x.Spec
				yyv360.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv361 := &x.Status
				yyv361.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj362 int
	var yyb362 bool
	var yyhl362 bool = l >= 0
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv365 := &x.ObjectMeta
		yyv365.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv366 := &x.Spec
		yyv366.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv367 := &x.Status
		yyv367.CodecDecodeSelf(d)
	}
	for {
		yyj362++
		if yyhl362 {
			yyb362 = yyj362 > l
		} else {
			yyb362 = r.CheckBreak()
		}
		if yyb362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [22]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = len(x.Capacity) != 0
			yyq369[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq369[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq369[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq369[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq369[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq369[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq369[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq369[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq369[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq369[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq369[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq369[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq369[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq369[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq369[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq369[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq369[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq369[18] = x.PersistentVolumeSource.OSS != nil && x.OSS != nil
			yyq369[19] = len(x.AccessModes) != 0
			yyq369[20] = x.ClaimRef != nil
			yyq369[21] = x.PersistentVolumeReclaimPolicy != ""
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(22)
			} else {
				yynn369 = 0
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr369 || yy2arr369 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr369 || yy2arr369 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr369 || yy2arr369 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr369 || yy2arr369 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr369 || yy2arr369 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr369 || yy2arr369 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr369 || yy2arr369 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr369 || yy2arr369 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn379 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn379 = true
				goto LABEL379
			}
		LABEL379:
			if yyr369 || yy2arr369 {
				if yyn379 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn379 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr369 || yy2arr369 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr369 || yy2arr369 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr369 || yy2arr369 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr369 || yy2arr369 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr369 || yy2arr369 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn385 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn385 = true
				goto LABEL385
			}
		LABEL385:
			if yyr369 || yy2arr369 {
				if yyn385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn385 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn386 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn386 = true
				goto LABEL386
			}
		LABEL386:
			if yyr369 || yy2arr369 {
				if yyn386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn386 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn387 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn387 = true
				goto LABEL387
			}
		LABEL387:
			if yyr369 || yy2arr369 {
				if yyn387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn387 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn388 bool
			if x.PersistentVolumeSource.OSS == nil {
				yyn388 = true
				goto LABEL388
			}
		LABEL388:
			if yyr369 || yy2arr369 {
				if yyn388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[18] {
						if x.OSS == nil {
							r.EncodeNil()
						} else {
							x.OSS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("oss"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn388 {
						r.EncodeNil()
					} else {
						if x.OSS == nil {
							r.EncodeNil()
						} else {
							x.OSS.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[19] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym390 := z.EncBinary()
						_ = yym390
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym391 := z.EncBinary()
						_ = yym391
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[20] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[21] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym394 := z.DecBinary()
	_ = yym394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct395 := r.ContainerType()
		if yyct395 == codecSelferValueTypeMap1234 {
			yyl395 := r.ReadMapStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl395, d)
			}
		} else if yyct395 == codecSelferValueTypeArray1234 {
			yyl395 := r.ReadArrayStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys396Slc
	var yyhl396 bool = l >= 0
	for yyj396 := 0; ; yyj396++ {
		if yyhl396 {
			if yyj396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys396Slc = r.DecodeBytes(yys396Slc, true, true)
		yys396 := string(yys396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys396 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv397 := &x.Capacity
				yyv397.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "oss":
			if x.PersistentVolumeSource.OSS == nil {
				x.PersistentVolumeSource.OSS = new(OSSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.OSS != nil {
					x.OSS = nil
				}
			} else {
				if x.OSS == nil {
					x.OSS = new(OSSVolumeSource)
				}
				x.OSS.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv416 := &x.AccessModes
				yym417 := z.DecBinary()
				_ = yym417
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys396)
		} // end switch yys396
	} // end for yyj396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj420 int
	var yyb420 bool
	var yyhl420 bool = l >= 0
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv421 := &x.Capacity
		yyv421.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.OSS == nil {
		x.PersistentVolumeSource.OSS = new(OSSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSS != nil {
			x.OSS = nil
		}
	} else {
		if x.OSS == nil {
			x.OSS = new(OSSVolumeSource)
		}
		x.OSS.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv440 := &x.AccessModes
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv440), d)
		}
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj420++
		if yyhl420 {
			yyb420 = yyj420 > l
		} else {
			yyb420 = r.CheckBreak()
		}
		if yyb420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym444 := z.EncBinary()
	_ = yym444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym446 := z.EncBinary()
		_ = yym446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep447 := !z.EncBinary()
			yy2arr447 := z.EncBasicHandle().StructToArray
			var yyq447 [3]bool
			_, _, _ = yysep447, yyq447, yy2arr447
			const yyr447 bool = false
			yyq447[0] = x.Phase != ""
			yyq447[1] = x.Message != ""
			yyq447[2] = x.Reason != ""
			var yynn447 int
			if yyr447 || yy2arr447 {
				r.EncodeArrayStart(3)
			} else {
				yynn447 = 0
				for _, b := range yyq447 {
					if b {
						yynn447++
					}
				}
				r.EncodeMapStart(yynn447)
				yynn447 = 0
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[2] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym455 := z.DecBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct456 := r.ContainerType()
		if yyct456 == codecSelferValueTypeMap1234 {
			yyl456 := r.ReadMapStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl456, d)
			}
		} else if yyct456 == codecSelferValueTypeArray1234 {
			yyl456 := r.ReadArrayStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys457Slc
	var yyhl457 bool = l >= 0
	for yyj457 := 0; ; yyj457++ {
		if yyhl457 {
			if yyj457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys457Slc = r.DecodeBytes(yys457Slc, true, true)
		yys457 := string(yys457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys457 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys457)
		} // end switch yys457
	} // end for yyj457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj461 int
	var yyb461 bool
	var yyhl461 bool = l >= 0
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj461++
		if yyhl461 {
			yyb461 = yyj461 > l
		} else {
			yyb461 = r.CheckBreak()
		}
		if yyb461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [4]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			yyq466[0] = x.Kind != ""
			yyq466[1] = x.APIVersion != ""
			yyq466[2] = true
			var yynn466 int
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(4)
			} else {
				yynn466 = 1
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
				yynn466 = 0
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[0] {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[1] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[2] {
					yy474 := &x.ListMeta
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else if z.HasExtensions() && z.EncExt(yy474) {
					} else {
						z.EncFallback(yy474)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy476 := &x.ListMeta
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy476) {
					} else {
						z.EncFallback(yy476)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv486 := &x.ListMeta
				yym487 := z.DecBinary()
				_ = yym487
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv486) {
				} else {
					z.DecFallback(yyv486, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv488 := &x.Items
				yym489 := z.DecBinary()
				_ = yym489
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj490 int
	var yyb490 bool
	var yyhl490 bool = l >= 0
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv493 := &x.ListMeta
		yym494 := z.DecBinary()
		_ = yym494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv493) {
		} else {
			z.DecFallback(yyv493, false)
		}
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv495 := &x.Items
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv495), d)
		}
	}
	for {
		yyj490++
		if yyhl490 {
			yyb490 = yyj490 > l
		} else {
			yyb490 = r.CheckBreak()
		}
		if yyb490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym497 := z.EncBinary()
		_ = yym497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep498 := !z.EncBinary()
			yy2arr498 := z.EncBasicHandle().StructToArray
			var yyq498 [5]bool
			_, _, _ = yysep498, yyq498, yy2arr498
			const yyr498 bool = false
			yyq498[0] = x.Kind != ""
			yyq498[1] = x.APIVersion != ""
			yyq498[2] = true
			yyq498[3] = true
			yyq498[4] = true
			var yynn498 int
			if yyr498 || yy2arr498 {
				r.EncodeArrayStart(5)
			} else {
				yynn498 = 0
				for _, b := range yyq498 {
					if b {
						yynn498++
					}
				}
				r.EncodeMapStart(yynn498)
				yynn498 = 0
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[0] {
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[1] {
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[2] {
					yy506 := &x.ObjectMeta
					yy506.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy507 := &x.ObjectMeta
					yy507.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[3] {
					yy509 := &x.Spec
					yy509.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy510 := &x.Spec
					yy510.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[4] {
					yy512 := &x.Status
					yy512.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy513 := &x.Status
					yy513.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym514 := z.DecBinary()
	_ = yym514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct515 := r.ContainerType()
		if yyct515 == codecSelferValueTypeMap1234 {
			yyl515 := r.ReadMapStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl515, d)
			}
		} else if yyct515 == codecSelferValueTypeArray1234 {
			yyl515 := r.ReadArrayStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys516Slc
	var yyhl516 bool = l >= 0
	for yyj516 := 0; ; yyj516++ {
		if yyhl516 {
			if yyj516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys516Slc = r.DecodeBytes(yys516Slc, true, true)
		yys516 := string(yys516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys516 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv519 := &x.ObjectMeta
				yyv519.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv520 := &x.Spec
				yyv520.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv521 := &x.Status
				yyv521.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys516)
		} // end switch yys516
	} // end for yyj516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj522 int
	var yyb522 bool
	var yyhl522 bool = l >= 0
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv525 := &x.ObjectMeta
		yyv525.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv526 := &x.Spec
		yyv526.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv527 := &x.Status
		yyv527.CodecDecodeSelf(d)
	}
	for {
		yyj522++
		if yyhl522 {
			yyb522 = yyj522 > l
		} else {
			yyb522 = r.CheckBreak()
		}
		if yyb522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym528 := z.EncBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep529 := !z.EncBinary()
			yy2arr529 := z.EncBasicHandle().StructToArray
			var yyq529 [4]bool
			_, _, _ = yysep529, yyq529, yy2arr529
			const yyr529 bool = false
			yyq529[0] = x.Kind != ""
			yyq529[1] = x.APIVersion != ""
			yyq529[2] = true
			var yynn529 int
			if yyr529 || yy2arr529 {
				r.EncodeArrayStart(4)
			} else {
				yynn529 = 1
				for _, b := range yyq529 {
					if b {
						yynn529++
					}
				}
				r.EncodeMapStart(yynn529)
				yynn529 = 0
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[0] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[1] {
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[2] {
					yy537 := &x.ListMeta
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else if z.HasExtensions() && z.EncExt(yy537) {
					} else {
						z.EncFallback(yy537)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy539 := &x.ListMeta
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else if z.HasExtensions() && z.EncExt(yy539) {
					} else {
						z.EncFallback(yy539)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv549 := &x.ListMeta
				yym550 := z.DecBinary()
				_ = yym550
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv549) {
				} else {
					z.DecFallback(yyv549, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv551 := &x.Items
				yym552 := z.DecBinary()
				_ = yym552
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv551), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj553 int
	var yyb553 bool
	var yyhl553 bool = l >= 0
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv556 := &x.ListMeta
		yym557 := z.DecBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv556) {
		} else {
			z.DecFallback(yyv556, false)
		}
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv558 := &x.Items
		yym559 := z.DecBinary()
		_ = yym559
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv558), d)
		}
	}
	for {
		yyj553++
		if yyhl553 {
			yyb553 = yyj553 > l
		} else {
			yyb553 = r.CheckBreak()
		}
		if yyb553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym560 := z.EncBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep561 := !z.EncBinary()
			yy2arr561 := z.EncBasicHandle().StructToArray
			var yyq561 [4]bool
			_, _, _ = yysep561, yyq561, yy2arr561
			const yyr561 bool = false
			yyq561[0] = len(x.AccessModes) != 0
			yyq561[1] = x.Selector != nil
			yyq561[2] = true
			yyq561[3] = x.VolumeName != ""
			var yynn561 int
			if yyr561 || yy2arr561 {
				r.EncodeArrayStart(4)
			} else {
				yynn561 = 0
				for _, b := range yyq561 {
					if b {
						yynn561++
					}
				}
				r.EncodeMapStart(yynn561)
				yynn561 = 0
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym563 := z.EncBinary()
						_ = yym563
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym564 := z.EncBinary()
						_ = yym564
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym567 := z.EncBinary()
						_ = yym567
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[2] {
					yy569 := &x.Resources
					yy569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy570 := &x.Resources
					yy570.CodecEncodeSelf(e)
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[3] {
					yym572 := z.EncBinary()
					_ = yym572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_v1.LabelSelector)
				}
				yym580 := z.DecBinary()
				_ = yym580
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv581 := &x.Resources
				yyv581.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv584 := &x.AccessModes
		yym585 := z.DecBinary()
		_ = yym585
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv584), d)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_v1.LabelSelector)
		}
		yym587 := z.DecBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv588 := &x.Resources
		yyv588.CodecDecodeSelf(d)
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [3]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Phase != ""
			yyq591[1] = len(x.AccessModes) != 0
			yyq591[2] = len(x.Capacity) != 0
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(3)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym594 := z.EncBinary()
						_ = yym594
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym595 := z.EncBinary()
						_ = yym595
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct598 := r.ContainerType()
		if yyct598 == codecSelferValueTypeMap1234 {
			yyl598 := r.ReadMapStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl598, d)
			}
		} else if yyct598 == codecSelferValueTypeArray1234 {
			yyl598 := r.ReadArrayStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys599Slc
	var yyhl599 bool = l >= 0
	for yyj599 := 0; ; yyj599++ {
		if yyhl599 {
			if yyj599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys599Slc = r.DecodeBytes(yys599Slc, true, true)
		yys599 := string(yys599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys599 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv601 := &x.AccessModes
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv601), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv603 := &x.Capacity
				yyv603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys599)
		} // end switch yys599
	} // end for yyj599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv606 := &x.AccessModes
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv606), d)
		}
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv608 := &x.Capacity
		yyv608.CodecDecodeSelf(d)
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym609 := z.EncBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym611 := z.EncBinary()
	_ = yym611
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym613 := z.EncBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [1]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(1)
			} else {
				yynn616 = 1
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym620 := z.DecBinary()
	_ = yym620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct621 := r.ContainerType()
		if yyct621 == codecSelferValueTypeMap1234 {
			yyl621 := r.ReadMapStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl621, d)
			}
		} else if yyct621 == codecSelferValueTypeArray1234 {
			yyl621 := r.ReadArrayStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys622Slc
	var yyhl622 bool = l >= 0
	for yyj622 := 0; ; yyj622++ {
		if yyhl622 {
			if yyj622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys622Slc = r.DecodeBytes(yys622Slc, true, true)
		yys622 := string(yys622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys622 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys622)
		} // end switch yys622
	} // end for yyj622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym626 := z.EncBinary()
		_ = yym626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep627 := !z.EncBinary()
			yy2arr627 := z.EncBasicHandle().StructToArray
			var yyq627 [1]bool
			_, _, _ = yysep627, yyq627, yy2arr627
			const yyr627 bool = false
			yyq627[0] = x.Medium != ""
			var yynn627 int
			if yyr627 || yy2arr627 {
				r.EncodeArrayStart(1)
			} else {
				yynn627 = 0
				for _, b := range yyq627 {
					if b {
						yynn627++
					}
				}
				r.EncodeMapStart(yynn627)
				yynn627 = 0
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym635 := z.EncBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep636 := !z.EncBinary()
			yy2arr636 := z.EncBasicHandle().StructToArray
			var yyq636 [3]bool
			_, _, _ = yysep636, yyq636, yy2arr636
			const yyr636 bool = false
			yyq636[2] = x.ReadOnly != false
			var yynn636 int
			if yyr636 || yy2arr636 {
				r.EncodeArrayStart(3)
			} else {
				yynn636 = 2
				for _, b := range yyq636 {
					if b {
						yynn636++
					}
				}
				r.EncodeMapStart(yynn636)
				yynn636 = 0
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym638 := z.EncBinary()
				_ = yym638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym639 := z.EncBinary()
				_ = yym639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[2] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq636[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct647 := r.ContainerType()
		if yyct647 == codecSelferValueTypeMap1234 {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if yyct647 == codecSelferValueTypeArray1234 {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys648 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj652 int
	var yyb652 bool
	var yyhl652 bool = l >= 0
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj652++
		if yyhl652 {
			yyb652 = yyj652 > l
		} else {
			yyb652 = r.CheckBreak()
		}
		if yyb652 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj652-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym656 := z.EncBinary()
		_ = yym656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep657 := !z.EncBinary()
			yy2arr657 := z.EncBasicHandle().StructToArray
			var yyq657 [8]bool
			_, _, _ = yysep657, yyq657, yy2arr657
			const yyr657 bool = false
			yyq657[2] = x.FSType != ""
			yyq657[3] = x.RBDPool != ""
			yyq657[4] = x.RadosUser != ""
			yyq657[5] = x.Keyring != ""
			yyq657[6] = x.SecretRef != nil
			yyq657[7] = x.ReadOnly != false
			var yynn657 int
			if yyr657 || yy2arr657 {
				r.EncodeArrayStart(8)
			} else {
				yynn657 = 2
				for _, b := range yyq657 {
					if b {
						yynn657++
					}
				}
				r.EncodeMapStart(yynn657)
				yynn657 = 0
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[2] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[3] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[4] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[5] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq657[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq657[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq657[7] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq657[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr657 || yy2arr657 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym680 := z.DecBinary()
	_ = yym680
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct681 := r.ContainerType()
		if yyct681 == codecSelferValueTypeMap1234 {
			yyl681 := r.ReadMapStart()
			if yyl681 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl681, d)
			}
		} else if yyct681 == codecSelferValueTypeArray1234 {
			yyl681 := r.ReadArrayStart()
			if yyl681 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl681, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys682Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys682Slc
	var yyhl682 bool = l >= 0
	for yyj682 := 0; ; yyj682++ {
		if yyhl682 {
			if yyj682 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys682Slc = r.DecodeBytes(yys682Slc, true, true)
		yys682 := string(yys682Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys682 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv683 := &x.CephMonitors
				yym684 := z.DecBinary()
				_ = yym684
				if false {
				} else {
					z.F.DecSliceStringX(yyv683, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys682)
		} // end switch yys682
	} // end for yyj682
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj692 int
	var yyb692 bool
	var yyhl692 bool = l >= 0
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv693 := &x.CephMonitors
		yym694 := z.DecBinary()
		_ = yym694
		if false {
		} else {
			z.F.DecSliceStringX(yyv693, false, d)
		}
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj692++
		if yyhl692 {
			yyb692 = yyj692 > l
		} else {
			yyb692 = r.CheckBreak()
		}
		if yyb692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym702 := z.EncBinary()
		_ = yym702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep703 := !z.EncBinary()
			yy2arr703 := z.EncBasicHandle().StructToArray
			var yyq703 [3]bool
			_, _, _ = yysep703, yyq703, yy2arr703
			const yyr703 bool = false
			yyq703[1] = x.FSType != ""
			yyq703[2] = x.ReadOnly != false
			var yynn703 int
			if yyr703 || yy2arr703 {
				r.EncodeArrayStart(3)
			} else {
				yynn703 = 1
				for _, b := range yyq703 {
					if b {
						yynn703++
					}
				}
				r.EncodeMapStart(yynn703)
				yynn703 = 0
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym705 := z.EncBinary()
				_ = yym705
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym706 := z.EncBinary()
				_ = yym706
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq703[1] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq703[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq703[2] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq703[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr703 || yy2arr703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct714 := r.ContainerType()
		if yyct714 == codecSelferValueTypeMap1234 {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if yyct714 == codecSelferValueTypeArray1234 {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys715 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj719 int
	var yyb719 bool
	var yyhl719 bool = l >= 0
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj719++
		if yyhl719 {
			yyb719 = yyj719 > l
		} else {
			yyb719 = r.CheckBreak()
		}
		if yyb719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym723 := z.EncBinary()
		_ = yym723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep724 := !z.EncBinary()
			yy2arr724 := z.EncBasicHandle().StructToArray
			var yyq724 [6]bool
			_, _, _ = yysep724, yyq724, yy2arr724
			const yyr724 bool = false
			yyq724[1] = x.Path != ""
			yyq724[2] = x.User != ""
			yyq724[3] = x.SecretFile != ""
			yyq724[4] = x.SecretRef != nil
			yyq724[5] = x.ReadOnly != false
			var yynn724 int
			if yyr724 || yy2arr724 {
				r.EncodeArrayStart(6)
			} else {
				yynn724 = 1
				for _, b := range yyq724 {
					if b {
						yynn724++
					}
				}
				r.EncodeMapStart(yynn724)
				yynn724 = 0
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[1] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[2] {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[3] {
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq724[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[5] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq724[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv744 := &x.Monitors
				yym745 := z.DecBinary()
				_ = yym745
				if false {
				} else {
					z.F.DecSliceStringX(yyv744, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj751 int
	var yyb751 bool
	var yyhl751 bool = l >= 0
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv752 := &x.Monitors
		yym753 := z.DecBinary()
		_ = yym753
		if false {
		} else {
			z.F.DecSliceStringX(yyv752, false, d)
		}
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj751++
		if yyhl751 {
			yyb751 = yyj751 > l
		} else {
			yyb751 = r.CheckBreak()
		}
		if yyb751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym759 := z.EncBinary()
		_ = yym759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep760 := !z.EncBinary()
			yy2arr760 := z.EncBasicHandle().StructToArray
			var yyq760 [2]bool
			_, _, _ = yysep760, yyq760, yy2arr760
			const yyr760 bool = false
			yyq760[0] = x.DatasetName != ""
			yyq760[1] = x.DatasetUUID != ""
			var yynn760 int
			if yyr760 || yy2arr760 {
				r.EncodeArrayStart(2)
			} else {
				yynn760 = 0
				for _, b := range yyq760 {
					if b {
						yynn760++
					}
				}
				r.EncodeMapStart(yynn760)
				yynn760 = 0
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq760[0] {
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq760[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq760[1] {
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq760[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym767 := z.DecBinary()
	_ = yym767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct768 := r.ContainerType()
		if yyct768 == codecSelferValueTypeMap1234 {
			yyl768 := r.ReadMapStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl768, d)
			}
		} else if yyct768 == codecSelferValueTypeArray1234 {
			yyl768 := r.ReadArrayStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys769Slc
	var yyhl769 bool = l >= 0
	for yyj769 := 0; ; yyj769++ {
		if yyhl769 {
			if yyj769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys769Slc = r.DecodeBytes(yys769Slc, true, true)
		yys769 := string(yys769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys769 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys769)
		} // end switch yys769
	} // end for yyj769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj772 int
	var yyb772 bool
	var yyhl772 bool = l >= 0
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj772++
		if yyhl772 {
			yyb772 = yyj772 > l
		} else {
			yyb772 = r.CheckBreak()
		}
		if yyb772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym775 := z.EncBinary()
	_ = yym775
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym776 := z.DecBinary()
	_ = yym776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym777 := z.EncBinary()
	_ = yym777
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym778 := z.DecBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [4]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			yyq780[1] = x.FSType != ""
			yyq780[2] = x.Partition != 0
			yyq780[3] = x.ReadOnly != false
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(4)
			} else {
				yynn780 = 1
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[1] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[2] {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[3] {
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq780[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym793 := z.DecBinary()
	_ = yym793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct794 := r.ContainerType()
		if yyct794 == codecSelferValueTypeMap1234 {
			yyl794 := r.ReadMapStart()
			if yyl794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl794, d)
			}
		} else if yyct794 == codecSelferValueTypeArray1234 {
			yyl794 := r.ReadArrayStart()
			if yyl794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys795Slc
	var yyhl795 bool = l >= 0
	for yyj795 := 0; ; yyj795++ {
		if yyhl795 {
			if yyj795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys795Slc = r.DecodeBytes(yys795Slc, true, true)
		yys795 := string(yys795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys795 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys795)
		} // end switch yys795
	} // end for yyj795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj800 int
	var yyb800 bool
	var yyhl800 bool = l >= 0
	yyj800++
	if yyhl800 {
		yyb800 = yyj800 > l
	} else {
		yyb800 = r.CheckBreak()
	}
	if yyb800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj800++
	if yyhl800 {
		yyb800 = yyj800 > l
	} else {
		yyb800 = r.CheckBreak()
	}
	if yyb800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj800++
	if yyhl800 {
		yyb800 = yyj800 > l
	} else {
		yyb800 = r.CheckBreak()
	}
	if yyb800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj800++
	if yyhl800 {
		yyb800 = yyj800 > l
	} else {
		yyb800 = r.CheckBreak()
	}
	if yyb800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj800++
		if yyhl800 {
			yyb800 = yyj800 > l
		} else {
			yyb800 = r.CheckBreak()
		}
		if yyb800 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj800-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym805 := z.EncBinary()
		_ = yym805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep806 := !z.EncBinary()
			yy2arr806 := z.EncBasicHandle().StructToArray
			var yyq806 [5]bool
			_, _, _ = yysep806, yyq806, yy2arr806
			const yyr806 bool = false
			yyq806[2] = x.ReadOnly != false
			yyq806[3] = x.User != ""
			yyq806[4] = x.Group != ""
			var yynn806 int
			if yyr806 || yy2arr806 {
				r.EncodeArrayStart(5)
			} else {
				yynn806 = 2
				for _, b := range yyq806 {
					if b {
						yynn806++
					}
				}
				r.EncodeMapStart(yynn806)
				yynn806 = 0
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym811 := z.EncBinary()
				_ = yym811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym812 := z.EncBinary()
				_ = yym812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[2] {
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq806[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[3] {
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq806[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[4] {
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq806[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym822 := z.DecBinary()
	_ = yym822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct823 := r.ContainerType()
		if yyct823 == codecSelferValueTypeMap1234 {
			yyl823 := r.ReadMapStart()
			if yyl823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl823, d)
			}
		} else if yyct823 == codecSelferValueTypeArray1234 {
			yyl823 := r.ReadArrayStart()
			if yyl823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys824Slc
	var yyhl824 bool = l >= 0
	for yyj824 := 0; ; yyj824++ {
		if yyhl824 {
			if yyj824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys824Slc = r.DecodeBytes(yys824Slc, true, true)
		yys824 := string(yys824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys824 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys824)
		} // end switch yys824
	} // end for yyj824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj830 int
	var yyb830 bool
	var yyhl830 bool = l >= 0
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj830++
		if yyhl830 {
			yyb830 = yyj830 > l
		} else {
			yyb830 = r.CheckBreak()
		}
		if yyb830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym836 := z.EncBinary()
		_ = yym836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep837 := !z.EncBinary()
			yy2arr837 := z.EncBasicHandle().StructToArray
			var yyq837 [5]bool
			_, _, _ = yysep837, yyq837, yy2arr837
			const yyr837 bool = false
			yyq837[1] = x.FSType != ""
			yyq837[2] = x.SecretRef != nil
			yyq837[3] = x.ReadOnly != false
			yyq837[4] = len(x.Options) != 0
			var yynn837 int
			if yyr837 || yy2arr837 {
				r.EncodeArrayStart(5)
			} else {
				yynn837 = 1
				for _, b := range yyq837 {
					if b {
						yynn837++
					}
				}
				r.EncodeMapStart(yynn837)
				yynn837 = 0
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym839 := z.EncBinary()
				_ = yym839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym840 := z.EncBinary()
				_ = yym840
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[1] {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq837[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq837[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[3] {
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq837[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym849 := z.EncBinary()
						_ = yym849
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq837[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym850 := z.EncBinary()
						_ = yym850
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym851 := z.DecBinary()
	_ = yym851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct852 := r.ContainerType()
		if yyct852 == codecSelferValueTypeMap1234 {
			yyl852 := r.ReadMapStart()
			if yyl852 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl852, d)
			}
		} else if yyct852 == codecSelferValueTypeArray1234 {
			yyl852 := r.ReadArrayStart()
			if yyl852 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl852, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys853Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys853Slc
	var yyhl853 bool = l >= 0
	for yyj853 := 0; ; yyj853++ {
		if yyhl853 {
			if yyj853 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys853Slc = r.DecodeBytes(yys853Slc, true, true)
		yys853 := string(yys853Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys853 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv858 := &x.Options
				yym859 := z.DecBinary()
				_ = yym859
				if false {
				} else {
					z.F.DecMapStringStringX(yyv858, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys853)
		} // end switch yys853
	} // end for yyj853
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj860 int
	var yyb860 bool
	var yyhl860 bool = l >= 0
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv865 := &x.Options
		yym866 := z.DecBinary()
		_ = yym866
		if false {
		} else {
			z.F.DecMapStringStringX(yyv865, false, d)
		}
	}
	for {
		yyj860++
		if yyhl860 {
			yyb860 = yyj860 > l
		} else {
			yyb860 = r.CheckBreak()
		}
		if yyb860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym867 := z.EncBinary()
		_ = yym867
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep868 := !z.EncBinary()
			yy2arr868 := z.EncBasicHandle().StructToArray
			var yyq868 [4]bool
			_, _, _ = yysep868, yyq868, yy2arr868
			const yyr868 bool = false
			yyq868[1] = x.FSType != ""
			yyq868[2] = x.Partition != 0
			yyq868[3] = x.ReadOnly != false
			var yynn868 int
			if yyr868 || yy2arr868 {
				r.EncodeArrayStart(4)
			} else {
				yynn868 = 1
				for _, b := range yyq868 {
					if b {
						yynn868++
					}
				}
				r.EncodeMapStart(yynn868)
				yynn868 = 0
			}
			if yyr868 || yy2arr868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym871 := z.EncBinary()
				_ = yym871
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr868 || yy2arr868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq868[1] {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq868[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr868 || yy2arr868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq868[2] {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq868[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr868 || yy2arr868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq868[3] {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq868[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr868 || yy2arr868 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym881 := z.DecBinary()
	_ = yym881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct882 := r.ContainerType()
		if yyct882 == codecSelferValueTypeMap1234 {
			yyl882 := r.ReadMapStart()
			if yyl882 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl882, d)
			}
		} else if yyct882 == codecSelferValueTypeArray1234 {
			yyl882 := r.ReadArrayStart()
			if yyl882 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys883Slc
	var yyhl883 bool = l >= 0
	for yyj883 := 0; ; yyj883++ {
		if yyhl883 {
			if yyj883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys883Slc = r.DecodeBytes(yys883Slc, true, true)
		yys883 := string(yys883Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys883 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys883)
		} // end switch yys883
	} // end for yyj883
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj888 int
	var yyb888 bool
	var yyhl888 bool = l >= 0
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj888++
	if yyhl888 {
		yyb888 = yyj888 > l
	} else {
		yyb888 = r.CheckBreak()
	}
	if yyb888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj888++
		if yyhl888 {
			yyb888 = yyj888 > l
		} else {
			yyb888 = r.CheckBreak()
		}
		if yyb888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym893 := z.EncBinary()
		_ = yym893
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep894 := !z.EncBinary()
			yy2arr894 := z.EncBasicHandle().StructToArray
			var yyq894 [3]bool
			_, _, _ = yysep894, yyq894, yy2arr894
			const yyr894 bool = false
			yyq894[1] = x.Revision != ""
			yyq894[2] = x.Directory != ""
			var yynn894 int
			if yyr894 || yy2arr894 {
				r.EncodeArrayStart(3)
			} else {
				yynn894 = 1
				for _, b := range yyq894 {
					if b {
						yynn894++
					}
				}
				r.EncodeMapStart(yynn894)
				yynn894 = 0
			}
			if yyr894 || yy2arr894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym896 := z.EncBinary()
				_ = yym896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym897 := z.EncBinary()
				_ = yym897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr894 || yy2arr894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq894[1] {
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq894[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr894 || yy2arr894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq894[2] {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq894[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr894 || yy2arr894 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct905 := r.ContainerType()
		if yyct905 == codecSelferValueTypeMap1234 {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if yyct905 == codecSelferValueTypeArray1234 {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys906 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj910 int
	var yyb910 bool
	var yyhl910 bool = l >= 0
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj910++
		if yyhl910 {
			yyb910 = yyj910 > l
		} else {
			yyb910 = r.CheckBreak()
		}
		if yyb910 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj910-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [3]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			yyq915[0] = x.SecretName != ""
			yyq915[1] = len(x.Items) != 0
			yyq915[2] = x.DefaultMode != nil
			var yynn915 int
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(3)
			} else {
				yynn915 = 0
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
				yynn915 = 0
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[0] {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq915[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym920 := z.EncBinary()
						_ = yym920
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq915[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym921 := z.EncBinary()
						_ = yym921
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq915[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy923 := *x.DefaultMode
						yym924 := z.EncBinary()
						_ = yym924
						if false {
						} else {
							r.EncodeInt(int64(yy923))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy925 := *x.DefaultMode
						yym926 := z.EncBinary()
						_ = yym926
						if false {
						} else {
							r.EncodeInt(int64(yy925))
						}
					}
				}
			}
			if yyr915 || yy2arr915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym927 := z.DecBinary()
	_ = yym927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct928 := r.ContainerType()
		if yyct928 == codecSelferValueTypeMap1234 {
			yyl928 := r.ReadMapStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl928, d)
			}
		} else if yyct928 == codecSelferValueTypeArray1234 {
			yyl928 := r.ReadArrayStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys929Slc
	var yyhl929 bool = l >= 0
	for yyj929 := 0; ; yyj929++ {
		if yyhl929 {
			if yyj929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys929Slc = r.DecodeBytes(yys929Slc, true, true)
		yys929 := string(yys929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys929 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv931 := &x.Items
				yym932 := z.DecBinary()
				_ = yym932
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv931), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym934 := z.DecBinary()
				_ = yym934
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys929)
		} // end switch yys929
	} // end for yyj929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj935 int
	var yyb935 bool
	var yyhl935 bool = l >= 0
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv937 := &x.Items
		yym938 := z.DecBinary()
		_ = yym938
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv937), d)
		}
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym940 := z.DecBinary()
		_ = yym940
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj935++
		if yyhl935 {
			yyb935 = yyj935 > l
		} else {
			yyb935 = r.CheckBreak()
		}
		if yyb935 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj935-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym941 := z.EncBinary()
		_ = yym941
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep942 := !z.EncBinary()
			yy2arr942 := z.EncBasicHandle().StructToArray
			var yyq942 [3]bool
			_, _, _ = yysep942, yyq942, yy2arr942
			const yyr942 bool = false
			yyq942[2] = x.ReadOnly != false
			var yynn942 int
			if yyr942 || yy2arr942 {
				r.EncodeArrayStart(3)
			} else {
				yynn942 = 2
				for _, b := range yyq942 {
					if b {
						yynn942++
					}
				}
				r.EncodeMapStart(yynn942)
				yynn942 = 0
			}
			if yyr942 || yy2arr942 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr942 || yy2arr942 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym947 := z.EncBinary()
				_ = yym947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr942 || yy2arr942 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq942[2] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq942[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr942 || yy2arr942 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym952 := z.DecBinary()
	_ = yym952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct953 := r.ContainerType()
		if yyct953 == codecSelferValueTypeMap1234 {
			yyl953 := r.ReadMapStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl953, d)
			}
		} else if yyct953 == codecSelferValueTypeArray1234 {
			yyl953 := r.ReadArrayStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys954Slc
	var yyhl954 bool = l >= 0
	for yyj954 := 0; ; yyj954++ {
		if yyhl954 {
			if yyj954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys954Slc = r.DecodeBytes(yys954Slc, true, true)
		yys954 := string(yys954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys954 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys954)
		} // end switch yys954
	} // end for yyj954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj958 int
	var yyb958 bool
	var yyhl958 bool = l >= 0
	yyj958++
	if yyhl958 {
		yyb958 = yyj958 > l
	} else {
		yyb958 = r.CheckBreak()
	}
	if yyb958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj958++
	if yyhl958 {
		yyb958 = yyj958 > l
	} else {
		yyb958 = r.CheckBreak()
	}
	if yyb958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj958++
	if yyhl958 {
		yyb958 = yyj958 > l
	} else {
		yyb958 = r.CheckBreak()
	}
	if yyb958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj958++
		if yyhl958 {
			yyb958 = yyj958 > l
		} else {
			yyb958 = r.CheckBreak()
		}
		if yyb958 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj958-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OSSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym962 := z.EncBinary()
		_ = yym962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep963 := !z.EncBinary()
			yy2arr963 := z.EncBasicHandle().StructToArray
			var yyq963 [3]bool
			_, _, _ = yysep963, yyq963, yy2arr963
			const yyr963 bool = false
			yyq963[2] = x.Options != false
			var yynn963 int
			if yyr963 || yy2arr963 {
				r.EncodeArrayStart(3)
			} else {
				yynn963 = 2
				for _, b := range yyq963 {
					if b {
						yynn963++
					}
				}
				r.EncodeMapStart(yynn963)
				yynn963 = 0
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym965 := z.EncBinary()
				_ = yym965
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Bucket))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bucket"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym966 := z.EncBinary()
				_ = yym966
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Bucket))
				}
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym968 := z.EncBinary()
				_ = yym968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Endpoint))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoint"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Endpoint))
				}
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq963[2] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeBool(bool(x.Options))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeBool(bool(x.Options))
					}
				}
			}
			if yyr963 || yy2arr963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OSSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct974 := r.ContainerType()
		if yyct974 == codecSelferValueTypeMap1234 {
			yyl974 := r.ReadMapStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl974, d)
			}
		} else if yyct974 == codecSelferValueTypeArray1234 {
			yyl974 := r.ReadArrayStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OSSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys975Slc
	var yyhl975 bool = l >= 0
	for yyj975 := 0; ; yyj975++ {
		if yyhl975 {
			if yyj975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys975Slc = r.DecodeBytes(yys975Slc, true, true)
		yys975 := string(yys975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys975 {
		case "bucket":
			if r.TryDecodeAsNil() {
				x.Bucket = ""
			} else {
				x.Bucket = string(r.DecodeString())
			}
		case "endpoint":
			if r.TryDecodeAsNil() {
				x.Endpoint = ""
			} else {
				x.Endpoint = string(r.DecodeString())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = false
			} else {
				x.Options = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys975)
		} // end switch yys975
	} // end for yyj975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OSSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bucket = ""
	} else {
		x.Bucket = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Endpoint = ""
	} else {
		x.Endpoint = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = false
	} else {
		x.Options = bool(r.DecodeBool())
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyq984 [6]bool
			_, _, _ = yysep984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[3] = x.ISCSIInterface != ""
			yyq984[4] = x.FSType != ""
			yyq984[5] = x.ReadOnly != false
			var yynn984 int
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(6)
			} else {
				yynn984 = 3
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
				yynn984 = 0
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym986 := z.EncBinary()
				_ = yym986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym992 := z.EncBinary()
				_ = yym992
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym993 := z.EncBinary()
				_ = yym993
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[3] {
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq984[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[4] {
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq984[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[5] {
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1003 := z.DecBinary()
	_ = yym1003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1004 := r.ContainerType()
		if yyct1004 == codecSelferValueTypeMap1234 {
			yyl1004 := r.ReadMapStart()
			if yyl1004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1004, d)
			}
		} else if yyct1004 == codecSelferValueTypeArray1234 {
			yyl1004 := r.ReadArrayStart()
			if yyl1004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1005Slc
	var yyhl1005 bool = l >= 0
	for yyj1005 := 0; ; yyj1005++ {
		if yyhl1005 {
			if yyj1005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1005Slc = r.DecodeBytes(yys1005Slc, true, true)
		yys1005 := string(yys1005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1005 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1005)
		} // end switch yys1005
	} // end for yyj1005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1019 := z.EncBinary()
		_ = yym1019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1020 := !z.EncBinary()
			yy2arr1020 := z.EncBasicHandle().StructToArray
			var yyq1020 [4]bool
			_, _, _ = yysep1020, yyq1020, yy2arr1020
			const yyr1020 bool = false
			yyq1020[2] = x.FSType != ""
			yyq1020[3] = x.ReadOnly != false
			var yynn1020 int
			if yyr1020 || yy2arr1020 {
				r.EncodeArrayStart(4)
			} else {
				yynn1020 = 2
				for _, b := range yyq1020 {
					if b {
						yynn1020++
					}
				}
				r.EncodeMapStart(yynn1020)
				yynn1020 = 0
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1025 := *x.Lun
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeInt(int64(yy1025))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1027 := *x.Lun
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeInt(int64(yy1027))
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[2] {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1020[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[3] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1020[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1035 := z.DecBinary()
	_ = yym1035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1036 := r.ContainerType()
		if yyct1036 == codecSelferValueTypeMap1234 {
			yyl1036 := r.ReadMapStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1036, d)
			}
		} else if yyct1036 == codecSelferValueTypeArray1234 {
			yyl1036 := r.ReadArrayStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1037Slc
	var yyhl1037 bool = l >= 0
	for yyj1037 := 0; ; yyj1037++ {
		if yyhl1037 {
			if yyj1037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1037Slc = r.DecodeBytes(yys1037Slc, true, true)
		yys1037 := string(yys1037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1037 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1038 := &x.TargetWWNs
				yym1039 := z.DecBinary()
				_ = yym1039
				if false {
				} else {
					z.F.DecSliceStringX(yyv1038, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1041 := z.DecBinary()
				_ = yym1041
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1037)
		} // end switch yys1037
	} // end for yyj1037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1044 int
	var yyb1044 bool
	var yyhl1044 bool = l >= 0
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1045 := &x.TargetWWNs
		yym1046 := z.DecBinary()
		_ = yym1046
		if false {
		} else {
			z.F.DecSliceStringX(yyv1045, false, d)
		}
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1048 := z.DecBinary()
		_ = yym1048
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1044++
		if yyhl1044 {
			yyb1044 = yyj1044 > l
		} else {
			yyb1044 = r.CheckBreak()
		}
		if yyb1044 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1044-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [3]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			yyq1052[2] = x.ReadOnly != false
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(3)
			} else {
				yynn1052 = 2
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1054 := z.EncBinary()
				_ = yym1054
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1057 := z.EncBinary()
				_ = yym1057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[2] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1052[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1062 := z.DecBinary()
	_ = yym1062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1063 := r.ContainerType()
		if yyct1063 == codecSelferValueTypeMap1234 {
			yyl1063 := r.ReadMapStart()
			if yyl1063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1063, d)
			}
		} else if yyct1063 == codecSelferValueTypeArray1234 {
			yyl1063 := r.ReadArrayStart()
			if yyl1063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1064Slc
	var yyhl1064 bool = l >= 0
	for yyj1064 := 0; ; yyj1064++ {
		if yyhl1064 {
			if yyj1064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1064Slc = r.DecodeBytes(yys1064Slc, true, true)
		yys1064 := string(yys1064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1064 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1064)
		} // end switch yys1064
	} // end for yyj1064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1068 int
	var yyb1068 bool
	var yyhl1068 bool = l >= 0
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1068++
		if yyhl1068 {
			yyb1068 = yyj1068 > l
		} else {
			yyb1068 = r.CheckBreak()
		}
		if yyb1068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1072 := z.EncBinary()
		_ = yym1072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1073 := !z.EncBinary()
			yy2arr1073 := z.EncBasicHandle().StructToArray
			var yyq1073 [2]bool
			_, _, _ = yysep1073, yyq1073, yy2arr1073
			const yyr1073 bool = false
			yyq1073[1] = x.FSType != ""
			var yynn1073 int
			if yyr1073 || yy2arr1073 {
				r.EncodeArrayStart(2)
			} else {
				yynn1073 = 1
				for _, b := range yyq1073 {
					if b {
						yynn1073++
					}
				}
				r.EncodeMapStart(yynn1073)
				yynn1073 = 0
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1075 := z.EncBinary()
				_ = yym1075
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1073[1] {
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1081 := r.ContainerType()
		if yyct1081 == codecSelferValueTypeMap1234 {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if yyct1081 == codecSelferValueTypeArray1234 {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1082 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [2]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[1] = x.FSType != ""
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(2)
			} else {
				yynn1089 = 1
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1091 := z.EncBinary()
				_ = yym1091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1092 := z.EncBinary()
				_ = yym1092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[1] {
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1096 := z.DecBinary()
	_ = yym1096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1097 := r.ContainerType()
		if yyct1097 == codecSelferValueTypeMap1234 {
			yyl1097 := r.ReadMapStart()
			if yyl1097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1097, d)
			}
		} else if yyct1097 == codecSelferValueTypeArray1234 {
			yyl1097 := r.ReadArrayStart()
			if yyl1097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1098Slc
	var yyhl1098 bool = l >= 0
	for yyj1098 := 0; ; yyj1098++ {
		if yyhl1098 {
			if yyj1098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1098Slc = r.DecodeBytes(yys1098Slc, true, true)
		yys1098 := string(yys1098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1098 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1098)
		} // end switch yys1098
	} // end for yyj1098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1104 := z.EncBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1105 := z.DecBinary()
	_ = yym1105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1106 := z.EncBinary()
		_ = yym1106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1107 := !z.EncBinary()
			yy2arr1107 := z.EncBasicHandle().StructToArray
			var yyq1107 [5]bool
			_, _, _ = yysep1107, yyq1107, yy2arr1107
			const yyr1107 bool = false
			yyq1107[2] = x.CachingMode != nil
			yyq1107[3] = x.FSType != nil
			yyq1107[4] = x.ReadOnly != nil
			var yynn1107 int
			if yyr1107 || yy2arr1107 {
				r.EncodeArrayStart(5)
			} else {
				yynn1107 = 2
				for _, b := range yyq1107 {
					if b {
						yynn1107++
					}
				}
				r.EncodeMapStart(yynn1107)
				yynn1107 = 0
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1109 := z.EncBinary()
				_ = yym1109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1110 := z.EncBinary()
				_ = yym1110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1112 := z.EncBinary()
				_ = yym1112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1113 := z.EncBinary()
				_ = yym1113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1107[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1115 := *x.CachingMode
						yy1115.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1116 := *x.CachingMode
						yy1116.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1107[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1118 := *x.FSType
						yym1119 := z.EncBinary()
						_ = yym1119
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1118))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1120 := *x.FSType
						yym1121 := z.EncBinary()
						_ = yym1121
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1120))
						}
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1107[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1123 := *x.ReadOnly
						yym1124 := z.EncBinary()
						_ = yym1124
						if false {
						} else {
							r.EncodeBool(bool(yy1123))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1125 := *x.ReadOnly
						yym1126 := z.EncBinary()
						_ = yym1126
						if false {
						} else {
							r.EncodeBool(bool(yy1125))
						}
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1127 := z.DecBinary()
	_ = yym1127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1128 := r.ContainerType()
		if yyct1128 == codecSelferValueTypeMap1234 {
			yyl1128 := r.ReadMapStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1128, d)
			}
		} else if yyct1128 == codecSelferValueTypeArray1234 {
			yyl1128 := r.ReadArrayStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1129Slc
	var yyhl1129 bool = l >= 0
	for yyj1129 := 0; ; yyj1129++ {
		if yyhl1129 {
			if yyj1129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1129Slc = r.DecodeBytes(yys1129Slc, true, true)
		yys1129 := string(yys1129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1129 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1134 := z.DecBinary()
				_ = yym1134
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1136 := z.DecBinary()
				_ = yym1136
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1129)
		} // end switch yys1129
	} // end for yyj1129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1137 int
	var yyb1137 bool
	var yyhl1137 bool = l >= 0
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1142 := z.DecBinary()
		_ = yym1142
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1144 := z.DecBinary()
		_ = yym1144
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1137++
		if yyhl1137 {
			yyb1137 = yyj1137 > l
		} else {
			yyb1137 = r.CheckBreak()
		}
		if yyb1137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1145 := z.EncBinary()
		_ = yym1145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1146 := !z.EncBinary()
			yy2arr1146 := z.EncBasicHandle().StructToArray
			var yyq1146 [3]bool
			_, _, _ = yysep1146, yyq1146, yy2arr1146
			const yyr1146 bool = false
			yyq1146[0] = x.Name != ""
			yyq1146[1] = len(x.Items) != 0
			yyq1146[2] = x.DefaultMode != nil
			var yynn1146 int
			if yyr1146 || yy2arr1146 {
				r.EncodeArrayStart(3)
			} else {
				yynn1146 = 0
				for _, b := range yyq1146 {
					if b {
						yynn1146++
					}
				}
				r.EncodeMapStart(yynn1146)
				yynn1146 = 0
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1146[0] {
					yym1148 := z.EncBinary()
					_ = yym1148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1146[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1151 := z.EncBinary()
						_ = yym1151
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1146[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1152 := z.EncBinary()
						_ = yym1152
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1146[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1154 := *x.DefaultMode
						yym1155 := z.EncBinary()
						_ = yym1155
						if false {
						} else {
							r.EncodeInt(int64(yy1154))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1146[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1156 := *x.DefaultMode
						yym1157 := z.EncBinary()
						_ = yym1157
						if false {
						} else {
							r.EncodeInt(int64(yy1156))
						}
					}
				}
			}
			if yyr1146 || yy2arr1146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1158 := z.DecBinary()
	_ = yym1158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1159 := r.ContainerType()
		if yyct1159 == codecSelferValueTypeMap1234 {
			yyl1159 := r.ReadMapStart()
			if yyl1159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1159, d)
			}
		} else if yyct1159 == codecSelferValueTypeArray1234 {
			yyl1159 := r.ReadArrayStart()
			if yyl1159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1160Slc
	var yyhl1160 bool = l >= 0
	for yyj1160 := 0; ; yyj1160++ {
		if yyhl1160 {
			if yyj1160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1160Slc = r.DecodeBytes(yys1160Slc, true, true)
		yys1160 := string(yys1160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1160 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1162 := &x.Items
				yym1163 := z.DecBinary()
				_ = yym1163
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1162), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1165 := z.DecBinary()
				_ = yym1165
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1160)
		} // end switch yys1160
	} // end for yyj1160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1166 int
	var yyb1166 bool
	var yyhl1166 bool = l >= 0
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1168 := &x.Items
		yym1169 := z.DecBinary()
		_ = yym1169
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1168), d)
		}
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1171 := z.DecBinary()
		_ = yym1171
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1166++
		if yyhl1166 {
			yyb1166 = yyj1166 > l
		} else {
			yyb1166 = r.CheckBreak()
		}
		if yyb1166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1172 := z.EncBinary()
		_ = yym1172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1173 := !z.EncBinary()
			yy2arr1173 := z.EncBasicHandle().StructToArray
			var yyq1173 [3]bool
			_, _, _ = yysep1173, yyq1173, yy2arr1173
			const yyr1173 bool = false
			yyq1173[2] = x.Mode != nil
			var yynn1173 int
			if yyr1173 || yy2arr1173 {
				r.EncodeArrayStart(3)
			} else {
				yynn1173 = 2
				for _, b := range yyq1173 {
					if b {
						yynn1173++
					}
				}
				r.EncodeMapStart(yynn1173)
				yynn1173 = 0
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1175 := z.EncBinary()
				_ = yym1175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1176 := z.EncBinary()
				_ = yym1176
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1178 := z.EncBinary()
				_ = yym1178
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1179 := z.EncBinary()
				_ = yym1179
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1181 := *x.Mode
						yym1182 := z.EncBinary()
						_ = yym1182
						if false {
						} else {
							r.EncodeInt(int64(yy1181))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1183 := *x.Mode
						yym1184 := z.EncBinary()
						_ = yym1184
						if false {
						} else {
							r.EncodeInt(int64(yy1183))
						}
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1185 := z.DecBinary()
	_ = yym1185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1186 := r.ContainerType()
		if yyct1186 == codecSelferValueTypeMap1234 {
			yyl1186 := r.ReadMapStart()
			if yyl1186 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1186, d)
			}
		} else if yyct1186 == codecSelferValueTypeArray1234 {
			yyl1186 := r.ReadArrayStart()
			if yyl1186 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1187Slc
	var yyhl1187 bool = l >= 0
	for yyj1187 := 0; ; yyj1187++ {
		if yyhl1187 {
			if yyj1187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1187Slc = r.DecodeBytes(yys1187Slc, true, true)
		yys1187 := string(yys1187Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1187 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1191 := z.DecBinary()
				_ = yym1191
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1187)
		} // end switch yys1187
	} // end for yyj1187
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1192 int
	var yyb1192 bool
	var yyhl1192 bool = l >= 0
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1196 := z.DecBinary()
		_ = yym1196
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1192++
		if yyhl1192 {
			yyb1192 = yyj1192 > l
		} else {
			yyb1192 = r.CheckBreak()
		}
		if yyb1192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1197 := z.EncBinary()
		_ = yym1197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1198 := !z.EncBinary()
			yy2arr1198 := z.EncBasicHandle().StructToArray
			var yyq1198 [5]bool
			_, _, _ = yysep1198, yyq1198, yy2arr1198
			const yyr1198 bool = false
			yyq1198[0] = x.Name != ""
			yyq1198[1] = x.HostPort != 0
			yyq1198[3] = x.Protocol != ""
			yyq1198[4] = x.HostIP != ""
			var yynn1198 int
			if yyr1198 || yy2arr1198 {
				r.EncodeArrayStart(5)
			} else {
				yynn1198 = 1
				for _, b := range yyq1198 {
					if b {
						yynn1198++
					}
				}
				r.EncodeMapStart(yynn1198)
				yynn1198 = 0
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1198[0] {
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1198[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1198[1] {
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1198[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1204 := z.EncBinary()
					_ = yym1204
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1206 := z.EncBinary()
				_ = yym1206
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1198[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1198[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1198[4] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1198[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1213 := r.ContainerType()
		if yyct1213 == codecSelferValueTypeMap1234 {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if yyct1213 == codecSelferValueTypeArray1234 {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1214 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1220 int
	var yyb1220 bool
	var yyhl1220 bool = l >= 0
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1220++
		if yyhl1220 {
			yyb1220 = yyj1220 > l
		} else {
			yyb1220 = r.CheckBreak()
		}
		if yyb1220 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1220-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1226 := z.EncBinary()
		_ = yym1226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1227 := !z.EncBinary()
			yy2arr1227 := z.EncBasicHandle().StructToArray
			var yyq1227 [4]bool
			_, _, _ = yysep1227, yyq1227, yy2arr1227
			const yyr1227 bool = false
			yyq1227[1] = x.ReadOnly != false
			yyq1227[3] = x.SubPath != ""
			var yynn1227 int
			if yyr1227 || yy2arr1227 {
				r.EncodeArrayStart(4)
			} else {
				yynn1227 = 2
				for _, b := range yyq1227 {
					if b {
						yynn1227++
					}
				}
				r.EncodeMapStart(yynn1227)
				yynn1227 = 0
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1229 := z.EncBinary()
				_ = yym1229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1230 := z.EncBinary()
				_ = yym1230
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1227[1] {
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1235 := z.EncBinary()
				_ = yym1235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1236 := z.EncBinary()
				_ = yym1236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1227[3] {
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1227[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1240 := z.DecBinary()
	_ = yym1240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1241 := r.ContainerType()
		if yyct1241 == codecSelferValueTypeMap1234 {
			yyl1241 := r.ReadMapStart()
			if yyl1241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1241, d)
			}
		} else if yyct1241 == codecSelferValueTypeArray1234 {
			yyl1241 := r.ReadArrayStart()
			if yyl1241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1242Slc
	var yyhl1242 bool = l >= 0
	for yyj1242 := 0; ; yyj1242++ {
		if yyhl1242 {
			if yyj1242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1242Slc = r.DecodeBytes(yys1242Slc, true, true)
		yys1242 := string(yys1242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1242 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1242)
		} // end switch yys1242
	} // end for yyj1242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1247 int
	var yyb1247 bool
	var yyhl1247 bool = l >= 0
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1247++
		if yyhl1247 {
			yyb1247 = yyj1247 > l
		} else {
			yyb1247 = r.CheckBreak()
		}
		if yyb1247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1252 := z.EncBinary()
		_ = yym1252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1253 := !z.EncBinary()
			yy2arr1253 := z.EncBasicHandle().StructToArray
			var yyq1253 [3]bool
			_, _, _ = yysep1253, yyq1253, yy2arr1253
			const yyr1253 bool = false
			yyq1253[1] = x.Value != ""
			yyq1253[2] = x.ValueFrom != nil
			var yynn1253 int
			if yyr1253 || yy2arr1253 {
				r.EncodeArrayStart(3)
			} else {
				yynn1253 = 1
				for _, b := range yyq1253 {
					if b {
						yynn1253++
					}
				}
				r.EncodeMapStart(yynn1253)
				yynn1253 = 0
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1255 := z.EncBinary()
				_ = yym1255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1256 := z.EncBinary()
				_ = yym1256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1253[1] {
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1253[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1253[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1253[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1261 := z.DecBinary()
	_ = yym1261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1262 := r.ContainerType()
		if yyct1262 == codecSelferValueTypeMap1234 {
			yyl1262 := r.ReadMapStart()
			if yyl1262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1262, d)
			}
		} else if yyct1262 == codecSelferValueTypeArray1234 {
			yyl1262 := r.ReadArrayStart()
			if yyl1262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1263Slc
	var yyhl1263 bool = l >= 0
	for yyj1263 := 0; ; yyj1263++ {
		if yyhl1263 {
			if yyj1263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1263Slc = r.DecodeBytes(yys1263Slc, true, true)
		yys1263 := string(yys1263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1263 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1263)
		} // end switch yys1263
	} // end for yyj1263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1267 int
	var yyb1267 bool
	var yyhl1267 bool = l >= 0
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1267++
		if yyhl1267 {
			yyb1267 = yyj1267 > l
		} else {
			yyb1267 = r.CheckBreak()
		}
		if yyb1267 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1267-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1271 := z.EncBinary()
		_ = yym1271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1272 := !z.EncBinary()
			yy2arr1272 := z.EncBasicHandle().StructToArray
			var yyq1272 [4]bool
			_, _, _ = yysep1272, yyq1272, yy2arr1272
			const yyr1272 bool = false
			yyq1272[0] = x.FieldRef != nil
			yyq1272[1] = x.ResourceFieldRef != nil
			yyq1272[2] = x.ConfigMapKeyRef != nil
			yyq1272[3] = x.SecretKeyRef != nil
			var yynn1272 int
			if yyr1272 || yy2arr1272 {
				r.EncodeArrayStart(4)
			} else {
				yynn1272 = 0
				for _, b := range yyq1272 {
					if b {
						yynn1272++
					}
				}
				r.EncodeMapStart(yynn1272)
				yynn1272 = 0
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1278 := r.ContainerType()
		if yyct1278 == codecSelferValueTypeMap1234 {
			yyl1278 := r.ReadMapStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1278, d)
			}
		} else if yyct1278 == codecSelferValueTypeArray1234 {
			yyl1278 := r.ReadArrayStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1279Slc
	var yyhl1279 bool = l >= 0
	for yyj1279 := 0; ; yyj1279++ {
		if yyhl1279 {
			if yyj1279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1279Slc = r.DecodeBytes(yys1279Slc, true, true)
		yys1279 := string(yys1279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1279 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1279)
		} // end switch yys1279
	} // end for yyj1279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1289 := z.EncBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1290 := !z.EncBinary()
			yy2arr1290 := z.EncBasicHandle().StructToArray
			var yyq1290 [2]bool
			_, _, _ = yysep1290, yyq1290, yy2arr1290
			const yyr1290 bool = false
			yyq1290[0] = x.APIVersion != ""
			var yynn1290 int
			if yyr1290 || yy2arr1290 {
				r.EncodeArrayStart(2)
			} else {
				yynn1290 = 1
				for _, b := range yyq1290 {
					if b {
						yynn1290++
					}
				}
				r.EncodeMapStart(yynn1290)
				yynn1290 = 0
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[0] {
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1297 := z.DecBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1298 := r.ContainerType()
		if yyct1298 == codecSelferValueTypeMap1234 {
			yyl1298 := r.ReadMapStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1298, d)
			}
		} else if yyct1298 == codecSelferValueTypeArray1234 {
			yyl1298 := r.ReadArrayStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1299Slc
	var yyhl1299 bool = l >= 0
	for yyj1299 := 0; ; yyj1299++ {
		if yyhl1299 {
			if yyj1299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1299Slc = r.DecodeBytes(yys1299Slc, true, true)
		yys1299 := string(yys1299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1299 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1299)
		} // end switch yys1299
	} // end for yyj1299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1302 int
	var yyb1302 bool
	var yyhl1302 bool = l >= 0
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1302++
		if yyhl1302 {
			yyb1302 = yyj1302 > l
		} else {
			yyb1302 = r.CheckBreak()
		}
		if yyb1302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1305 := z.EncBinary()
		_ = yym1305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1306 := !z.EncBinary()
			yy2arr1306 := z.EncBasicHandle().StructToArray
			var yyq1306 [3]bool
			_, _, _ = yysep1306, yyq1306, yy2arr1306
			const yyr1306 bool = false
			yyq1306[0] = x.ContainerName != ""
			yyq1306[2] = true
			var yynn1306 int
			if yyr1306 || yy2arr1306 {
				r.EncodeArrayStart(3)
			} else {
				yynn1306 = 1
				for _, b := range yyq1306 {
					if b {
						yynn1306++
					}
				}
				r.EncodeMapStart(yynn1306)
				yynn1306 = 0
			}
			if yyr1306 || yy2arr1306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1306[0] {
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1306 || yy2arr1306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1311 := z.EncBinary()
				_ = yym1311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1312 := z.EncBinary()
				_ = yym1312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1306 || yy2arr1306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1306[2] {
					yy1314 := &x.Divisor
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1314) {
					} else if !yym1315 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1314)
					} else {
						z.EncFallback(yy1314)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1306[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1316 := &x.Divisor
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1316) {
					} else if !yym1317 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1316)
					} else {
						z.EncFallback(yy1316)
					}
				}
			}
			if yyr1306 || yy2arr1306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1318 := z.DecBinary()
	_ = yym1318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1319 := r.ContainerType()
		if yyct1319 == codecSelferValueTypeMap1234 {
			yyl1319 := r.ReadMapStart()
			if yyl1319 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1319, d)
			}
		} else if yyct1319 == codecSelferValueTypeArray1234 {
			yyl1319 := r.ReadArrayStart()
			if yyl1319 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1319, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1320Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1320Slc
	var yyhl1320 bool = l >= 0
	for yyj1320 := 0; ; yyj1320++ {
		if yyhl1320 {
			if yyj1320 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1320Slc = r.DecodeBytes(yys1320Slc, true, true)
		yys1320 := string(yys1320Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1320 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1323 := &x.Divisor
				yym1324 := z.DecBinary()
				_ = yym1324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1323) {
				} else if !yym1324 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1323)
				} else {
					z.DecFallback(yyv1323, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1320)
		} // end switch yys1320
	} // end for yyj1320
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1325 int
	var yyb1325 bool
	var yyhl1325 bool = l >= 0
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1328 := &x.Divisor
		yym1329 := z.DecBinary()
		_ = yym1329
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1328) {
		} else if !yym1329 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1328)
		} else {
			z.DecFallback(yyv1328, false)
		}
	}
	for {
		yyj1325++
		if yyhl1325 {
			yyb1325 = yyj1325 > l
		} else {
			yyb1325 = r.CheckBreak()
		}
		if yyb1325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1330 := z.EncBinary()
		_ = yym1330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1331 := !z.EncBinary()
			yy2arr1331 := z.EncBasicHandle().StructToArray
			var yyq1331 [2]bool
			_, _, _ = yysep1331, yyq1331, yy2arr1331
			const yyr1331 bool = false
			yyq1331[0] = x.Name != ""
			var yynn1331 int
			if yyr1331 || yy2arr1331 {
				r.EncodeArrayStart(2)
			} else {
				yynn1331 = 1
				for _, b := range yyq1331 {
					if b {
						yynn1331++
					}
				}
				r.EncodeMapStart(yynn1331)
				yynn1331 = 0
			}
			if yyr1331 || yy2arr1331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1331[0] {
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1331[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1331 || yy2arr1331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1336 := z.EncBinary()
				_ = yym1336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1337 := z.EncBinary()
				_ = yym1337
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1331 || yy2arr1331 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1338 := z.DecBinary()
	_ = yym1338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1339 := r.ContainerType()
		if yyct1339 == codecSelferValueTypeMap1234 {
			yyl1339 := r.ReadMapStart()
			if yyl1339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1339, d)
			}
		} else if yyct1339 == codecSelferValueTypeArray1234 {
			yyl1339 := r.ReadArrayStart()
			if yyl1339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1340Slc
	var yyhl1340 bool = l >= 0
	for yyj1340 := 0; ; yyj1340++ {
		if yyhl1340 {
			if yyj1340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1340Slc = r.DecodeBytes(yys1340Slc, true, true)
		yys1340 := string(yys1340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1340 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1340)
		} // end switch yys1340
	} // end for yyj1340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1343 int
	var yyb1343 bool
	var yyhl1343 bool = l >= 0
	yyj1343++
	if yyhl1343 {
		yyb1343 = yyj1343 > l
	} else {
		yyb1343 = r.CheckBreak()
	}
	if yyb1343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1343++
	if yyhl1343 {
		yyb1343 = yyj1343 > l
	} else {
		yyb1343 = r.CheckBreak()
	}
	if yyb1343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1343++
		if yyhl1343 {
			yyb1343 = yyj1343 > l
		} else {
			yyb1343 = r.CheckBreak()
		}
		if yyb1343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1346 := z.EncBinary()
		_ = yym1346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1347 := !z.EncBinary()
			yy2arr1347 := z.EncBasicHandle().StructToArray
			var yyq1347 [2]bool
			_, _, _ = yysep1347, yyq1347, yy2arr1347
			const yyr1347 bool = false
			yyq1347[0] = x.Name != ""
			var yynn1347 int
			if yyr1347 || yy2arr1347 {
				r.EncodeArrayStart(2)
			} else {
				yynn1347 = 1
				for _, b := range yyq1347 {
					if b {
						yynn1347++
					}
				}
				r.EncodeMapStart(yynn1347)
				yynn1347 = 0
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1347[0] {
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1347[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1352 := z.EncBinary()
				_ = yym1352
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1353 := z.EncBinary()
				_ = yym1353
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1354 := z.DecBinary()
	_ = yym1354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1355 := r.ContainerType()
		if yyct1355 == codecSelferValueTypeMap1234 {
			yyl1355 := r.ReadMapStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1355, d)
			}
		} else if yyct1355 == codecSelferValueTypeArray1234 {
			yyl1355 := r.ReadArrayStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1356Slc
	var yyhl1356 bool = l >= 0
	for yyj1356 := 0; ; yyj1356++ {
		if yyhl1356 {
			if yyj1356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1356Slc = r.DecodeBytes(yys1356Slc, true, true)
		yys1356 := string(yys1356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1356 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1356)
		} // end switch yys1356
	} // end for yyj1356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1362 := z.EncBinary()
		_ = yym1362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1363 := !z.EncBinary()
			yy2arr1363 := z.EncBasicHandle().StructToArray
			var yyq1363 [2]bool
			_, _, _ = yysep1363, yyq1363, yy2arr1363
			const yyr1363 bool = false
			var yynn1363 int
			if yyr1363 || yy2arr1363 {
				r.EncodeArrayStart(2)
			} else {
				yynn1363 = 2
				for _, b := range yyq1363 {
					if b {
						yynn1363++
					}
				}
				r.EncodeMapStart(yynn1363)
				yynn1363 = 0
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1365 := z.EncBinary()
				_ = yym1365
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1366 := z.EncBinary()
				_ = yym1366
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1368 := z.EncBinary()
				_ = yym1368
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1370 := z.DecBinary()
	_ = yym1370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1371 := r.ContainerType()
		if yyct1371 == codecSelferValueTypeMap1234 {
			yyl1371 := r.ReadMapStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1371, d)
			}
		} else if yyct1371 == codecSelferValueTypeArray1234 {
			yyl1371 := r.ReadArrayStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1372Slc
	var yyhl1372 bool = l >= 0
	for yyj1372 := 0; ; yyj1372++ {
		if yyhl1372 {
			if yyj1372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1372Slc = r.DecodeBytes(yys1372Slc, true, true)
		yys1372 := string(yys1372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1372 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1372)
		} // end switch yys1372
	} // end for yyj1372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1375 int
	var yyb1375 bool
	var yyhl1375 bool = l >= 0
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1375++
		if yyhl1375 {
			yyb1375 = yyj1375 > l
		} else {
			yyb1375 = r.CheckBreak()
		}
		if yyb1375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1378 := z.EncBinary()
		_ = yym1378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1379 := !z.EncBinary()
			yy2arr1379 := z.EncBasicHandle().StructToArray
			var yyq1379 [5]bool
			_, _, _ = yysep1379, yyq1379, yy2arr1379
			const yyr1379 bool = false
			yyq1379[0] = x.Path != ""
			yyq1379[2] = x.Host != ""
			yyq1379[3] = x.Scheme != ""
			yyq1379[4] = len(x.HTTPHeaders) != 0
			var yynn1379 int
			if yyr1379 || yy2arr1379 {
				r.EncodeArrayStart(5)
			} else {
				yynn1379 = 1
				for _, b := range yyq1379 {
					if b {
						yynn1379++
					}
				}
				r.EncodeMapStart(yynn1379)
				yynn1379 = 0
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[0] {
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1384 := &x.Port
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1384) {
				} else if !yym1385 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1384)
				} else {
					z.EncFallback(yy1384)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1386 := &x.Port
				yym1387 := z.EncBinary()
				_ = yym1387
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1386) {
				} else if !yym1387 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1386)
				} else {
					z.EncFallback(yy1386)
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[2] {
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1393 := z.EncBinary()
						_ = yym1393
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1394 := z.EncBinary()
						_ = yym1394
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1395 := z.DecBinary()
	_ = yym1395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1396 := r.ContainerType()
		if yyct1396 == codecSelferValueTypeMap1234 {
			yyl1396 := r.ReadMapStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1396, d)
			}
		} else if yyct1396 == codecSelferValueTypeArray1234 {
			yyl1396 := r.ReadArrayStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1397Slc
	var yyhl1397 bool = l >= 0
	for yyj1397 := 0; ; yyj1397++ {
		if yyhl1397 {
			if yyj1397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1397Slc = r.DecodeBytes(yys1397Slc, true, true)
		yys1397 := string(yys1397Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1397 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1399 := &x.Port
				yym1400 := z.DecBinary()
				_ = yym1400
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1399) {
				} else if !yym1400 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1399)
				} else {
					z.DecFallback(yyv1399, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1403 := &x.HTTPHeaders
				yym1404 := z.DecBinary()
				_ = yym1404
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1403), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1397)
		} // end switch yys1397
	} // end for yyj1397
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1405 int
	var yyb1405 bool
	var yyhl1405 bool = l >= 0
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1407 := &x.Port
		yym1408 := z.DecBinary()
		_ = yym1408
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1407) {
		} else if !yym1408 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1407)
		} else {
			z.DecFallback(yyv1407, false)
		}
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1411 := &x.HTTPHeaders
		yym1412 := z.DecBinary()
		_ = yym1412
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1411), d)
		}
	}
	for {
		yyj1405++
		if yyhl1405 {
			yyb1405 = yyj1405 > l
		} else {
			yyb1405 = r.CheckBreak()
		}
		if yyb1405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1413 := z.EncBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1414 := z.DecBinary()
	_ = yym1414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1415 := z.EncBinary()
		_ = yym1415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1416 := !z.EncBinary()
			yy2arr1416 := z.EncBasicHandle().StructToArray
			var yyq1416 [1]bool
			_, _, _ = yysep1416, yyq1416, yy2arr1416
			const yyr1416 bool = false
			var yynn1416 int
			if yyr1416 || yy2arr1416 {
				r.EncodeArrayStart(1)
			} else {
				yynn1416 = 1
				for _, b := range yyq1416 {
					if b {
						yynn1416++
					}
				}
				r.EncodeMapStart(yynn1416)
				yynn1416 = 0
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1418 := &x.Port
				yym1419 := z.EncBinary()
				_ = yym1419
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1418) {
				} else if !yym1419 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1418)
				} else {
					z.EncFallback(yy1418)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1420 := &x.Port
				yym1421 := z.EncBinary()
				_ = yym1421
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1420) {
				} else if !yym1421 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1420)
				} else {
					z.EncFallback(yy1420)
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1422 := z.DecBinary()
	_ = yym1422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1423 := r.ContainerType()
		if yyct1423 == codecSelferValueTypeMap1234 {
			yyl1423 := r.ReadMapStart()
			if yyl1423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1423, d)
			}
		} else if yyct1423 == codecSelferValueTypeArray1234 {
			yyl1423 := r.ReadArrayStart()
			if yyl1423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1424Slc
	var yyhl1424 bool = l >= 0
	for yyj1424 := 0; ; yyj1424++ {
		if yyhl1424 {
			if yyj1424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1424Slc = r.DecodeBytes(yys1424Slc, true, true)
		yys1424 := string(yys1424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1424 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1425 := &x.Port
				yym1426 := z.DecBinary()
				_ = yym1426
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1425) {
				} else if !yym1426 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1425)
				} else {
					z.DecFallback(yyv1425, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1424)
		} // end switch yys1424
	} // end for yyj1424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1427 int
	var yyb1427 bool
	var yyhl1427 bool = l >= 0
	yyj1427++
	if yyhl1427 {
		yyb1427 = yyj1427 > l
	} else {
		yyb1427 = r.CheckBreak()
	}
	if yyb1427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1428 := &x.Port
		yym1429 := z.DecBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1428) {
		} else if !yym1429 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1428)
		} else {
			z.DecFallback(yyv1428, false)
		}
	}
	for {
		yyj1427++
		if yyhl1427 {
			yyb1427 = yyj1427 > l
		} else {
			yyb1427 = r.CheckBreak()
		}
		if yyb1427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1430 := z.EncBinary()
		_ = yym1430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1431 := !z.EncBinary()
			yy2arr1431 := z.EncBasicHandle().StructToArray
			var yyq1431 [1]bool
			_, _, _ = yysep1431, yyq1431, yy2arr1431
			const yyr1431 bool = false
			yyq1431[0] = len(x.Command) != 0
			var yynn1431 int
			if yyr1431 || yy2arr1431 {
				r.EncodeArrayStart(1)
			} else {
				yynn1431 = 0
				for _, b := range yyq1431 {
					if b {
						yynn1431++
					}
				}
				r.EncodeMapStart(yynn1431)
				yynn1431 = 0
			}
			if yyr1431 || yy2arr1431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1431[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1433 := z.EncBinary()
						_ = yym1433
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1431[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1434 := z.EncBinary()
						_ = yym1434
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1431 || yy2arr1431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1435 := z.DecBinary()
	_ = yym1435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1436 := r.ContainerType()
		if yyct1436 == codecSelferValueTypeMap1234 {
			yyl1436 := r.ReadMapStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1436, d)
			}
		} else if yyct1436 == codecSelferValueTypeArray1234 {
			yyl1436 := r.ReadArrayStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1437Slc
	var yyhl1437 bool = l >= 0
	for yyj1437 := 0; ; yyj1437++ {
		if yyhl1437 {
			if yyj1437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1437Slc = r.DecodeBytes(yys1437Slc, true, true)
		yys1437 := string(yys1437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1437 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1438 := &x.Command
				yym1439 := z.DecBinary()
				_ = yym1439
				if false {
				} else {
					z.F.DecSliceStringX(yyv1438, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1437)
		} // end switch yys1437
	} // end for yyj1437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1440 int
	var yyb1440 bool
	var yyhl1440 bool = l >= 0
	yyj1440++
	if yyhl1440 {
		yyb1440 = yyj1440 > l
	} else {
		yyb1440 = r.CheckBreak()
	}
	if yyb1440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1441 := &x.Command
		yym1442 := z.DecBinary()
		_ = yym1442
		if false {
		} else {
			z.F.DecSliceStringX(yyv1441, false, d)
		}
	}
	for {
		yyj1440++
		if yyhl1440 {
			yyb1440 = yyj1440 > l
		} else {
			yyb1440 = r.CheckBreak()
		}
		if yyb1440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1443 := z.EncBinary()
		_ = yym1443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1444 := !z.EncBinary()
			yy2arr1444 := z.EncBasicHandle().StructToArray
			var yyq1444 [8]bool
			_, _, _ = yysep1444, yyq1444, yy2arr1444
			const yyr1444 bool = false
			yyq1444[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1444[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1444[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1444[3] = x.InitialDelaySeconds != 0
			yyq1444[4] = x.TimeoutSeconds != 0
			yyq1444[5] = x.PeriodSeconds != 0
			yyq1444[6] = x.SuccessThreshold != 0
			yyq1444[7] = x.FailureThreshold != 0
			var yynn1444 int
			if yyr1444 || yy2arr1444 {
				r.EncodeArrayStart(8)
			} else {
				yynn1444 = 0
				for _, b := range yyq1444 {
					if b {
						yynn1444++
					}
				}
				r.EncodeMapStart(yynn1444)
				yynn1444 = 0
			}
			var yyn1445 bool
			if x.Handler.Exec == nil {
				yyn1445 = true
				goto LABEL1445
			}
		LABEL1445:
			if yyr1444 || yy2arr1444 {
				if yyn1445 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1444[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1445 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1446 bool
			if x.Handler.HTTPGet == nil {
				yyn1446 = true
				goto LABEL1446
			}
		LABEL1446:
			if yyr1444 || yy2arr1444 {
				if yyn1446 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1444[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1446 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1447 bool
			if x.Handler.TCPSocket == nil {
				yyn1447 = true
				goto LABEL1447
			}
		LABEL1447:
			if yyr1444 || yy2arr1444 {
				if yyn1447 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1444[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1447 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[3] {
					yym1449 := z.EncBinary()
					_ = yym1449
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1444[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[4] {
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1444[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[5] {
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1444[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[6] {
					yym1458 := z.EncBinary()
					_ = yym1458
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1444[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[7] {
					yym1461 := z.EncBinary()
					_ = yym1461
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1444[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1462 := z.EncBinary()
					_ = yym1462
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1463 := z.DecBinary()
	_ = yym1463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1464 := r.ContainerType()
		if yyct1464 == codecSelferValueTypeMap1234 {
			yyl1464 := r.ReadMapStart()
			if yyl1464 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1464, d)
			}
		} else if yyct1464 == codecSelferValueTypeArray1234 {
			yyl1464 := r.ReadArrayStart()
			if yyl1464 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1465Slc
	var yyhl1465 bool = l >= 0
	for yyj1465 := 0; ; yyj1465++ {
		if yyhl1465 {
			if yyj1465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1465Slc = r.DecodeBytes(yys1465Slc, true, true)
		yys1465 := string(yys1465Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1465 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1465)
		} // end switch yys1465
	} // end for yyj1465
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1474 int
	var yyb1474 bool
	var yyhl1474 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1474++
		if yyhl1474 {
			yyb1474 = yyj1474 > l
		} else {
			yyb1474 = r.CheckBreak()
		}
		if yyb1474 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1474-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1483 := z.EncBinary()
	_ = yym1483
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1484 := z.DecBinary()
	_ = yym1484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1485 := z.EncBinary()
	_ = yym1485
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1486 := z.DecBinary()
	_ = yym1486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1487 := z.EncBinary()
		_ = yym1487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1488 := !z.EncBinary()
			yy2arr1488 := z.EncBasicHandle().StructToArray
			var yyq1488 [2]bool
			_, _, _ = yysep1488, yyq1488, yy2arr1488
			const yyr1488 bool = false
			yyq1488[0] = len(x.Add) != 0
			yyq1488[1] = len(x.Drop) != 0
			var yynn1488 int
			if yyr1488 || yy2arr1488 {
				r.EncodeArrayStart(2)
			} else {
				yynn1488 = 0
				for _, b := range yyq1488 {
					if b {
						yynn1488++
					}
				}
				r.EncodeMapStart(yynn1488)
				yynn1488 = 0
			}
			if yyr1488 || yy2arr1488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1488[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1490 := z.EncBinary()
						_ = yym1490
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1491 := z.EncBinary()
						_ = yym1491
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1488 || yy2arr1488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1488[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1493 := z.EncBinary()
						_ = yym1493
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1494 := z.EncBinary()
						_ = yym1494
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1488 || yy2arr1488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1495 := z.DecBinary()
	_ = yym1495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1496 := r.ContainerType()
		if yyct1496 == codecSelferValueTypeMap1234 {
			yyl1496 := r.ReadMapStart()
			if yyl1496 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1496, d)
			}
		} else if yyct1496 == codecSelferValueTypeArray1234 {
			yyl1496 := r.ReadArrayStart()
			if yyl1496 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1496, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1497Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1497Slc
	var yyhl1497 bool = l >= 0
	for yyj1497 := 0; ; yyj1497++ {
		if yyhl1497 {
			if yyj1497 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1497Slc = r.DecodeBytes(yys1497Slc, true, true)
		yys1497 := string(yys1497Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1497 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1498 := &x.Add
				yym1499 := z.DecBinary()
				_ = yym1499
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1498), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1500 := &x.Drop
				yym1501 := z.DecBinary()
				_ = yym1501
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1497)
		} // end switch yys1497
	} // end for yyj1497
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1502 int
	var yyb1502 bool
	var yyhl1502 bool = l >= 0
	yyj1502++
	if yyhl1502 {
		yyb1502 = yyj1502 > l
	} else {
		yyb1502 = r.CheckBreak()
	}
	if yyb1502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1503 := &x.Add
		yym1504 := z.DecBinary()
		_ = yym1504
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1503), d)
		}
	}
	yyj1502++
	if yyhl1502 {
		yyb1502 = yyj1502 > l
	} else {
		yyb1502 = r.CheckBreak()
	}
	if yyb1502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1505 := &x.Drop
		yym1506 := z.DecBinary()
		_ = yym1506
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1505), d)
		}
	}
	for {
		yyj1502++
		if yyhl1502 {
			yyb1502 = yyj1502 > l
		} else {
			yyb1502 = r.CheckBreak()
		}
		if yyb1502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1507 := z.EncBinary()
		_ = yym1507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1508 := !z.EncBinary()
			yy2arr1508 := z.EncBasicHandle().StructToArray
			var yyq1508 [2]bool
			_, _, _ = yysep1508, yyq1508, yy2arr1508
			const yyr1508 bool = false
			yyq1508[0] = len(x.Limits) != 0
			yyq1508[1] = len(x.Requests) != 0
			var yynn1508 int
			if yyr1508 || yy2arr1508 {
				r.EncodeArrayStart(2)
			} else {
				yynn1508 = 0
				for _, b := range yyq1508 {
					if b {
						yynn1508++
					}
				}
				r.EncodeMapStart(yynn1508)
				yynn1508 = 0
			}
			if yyr1508 || yy2arr1508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1508[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1508 || yy2arr1508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1508[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1508 || yy2arr1508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1511 := z.DecBinary()
	_ = yym1511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1512 := r.ContainerType()
		if yyct1512 == codecSelferValueTypeMap1234 {
			yyl1512 := r.ReadMapStart()
			if yyl1512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1512, d)
			}
		} else if yyct1512 == codecSelferValueTypeArray1234 {
			yyl1512 := r.ReadArrayStart()
			if yyl1512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1513Slc
	var yyhl1513 bool = l >= 0
	for yyj1513 := 0; ; yyj1513++ {
		if yyhl1513 {
			if yyj1513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1513Slc = r.DecodeBytes(yys1513Slc, true, true)
		yys1513 := string(yys1513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1513 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1514 := &x.Limits
				yyv1514.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1515 := &x.Requests
				yyv1515.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1513)
		} // end switch yys1513
	} // end for yyj1513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1516 int
	var yyb1516 bool
	var yyhl1516 bool = l >= 0
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1517 := &x.Limits
		yyv1517.CodecDecodeSelf(d)
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1518 := &x.Requests
		yyv1518.CodecDecodeSelf(d)
	}
	for {
		yyj1516++
		if yyhl1516 {
			yyb1516 = yyj1516 > l
		} else {
			yyb1516 = r.CheckBreak()
		}
		if yyb1516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1519 := z.EncBinary()
		_ = yym1519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1520 := !z.EncBinary()
			yy2arr1520 := z.EncBasicHandle().StructToArray
			var yyq1520 [18]bool
			_, _, _ = yysep1520, yyq1520, yy2arr1520
			const yyr1520 bool = false
			yyq1520[1] = x.Image != ""
			yyq1520[2] = len(x.Command) != 0
			yyq1520[3] = len(x.Args) != 0
			yyq1520[4] = x.WorkingDir != ""
			yyq1520[5] = len(x.Ports) != 0
			yyq1520[6] = len(x.Env) != 0
			yyq1520[7] = true
			yyq1520[8] = len(x.VolumeMounts) != 0
			yyq1520[9] = x.LivenessProbe != nil
			yyq1520[10] = x.ReadinessProbe != nil
			yyq1520[11] = x.Lifecycle != nil
			yyq1520[12] = x.TerminationMessagePath != ""
			yyq1520[13] = x.ImagePullPolicy != ""
			yyq1520[14] = x.SecurityContext != nil
			yyq1520[15] = x.Stdin != false
			yyq1520[16] = x.StdinOnce != false
			yyq1520[17] = x.TTY != false
			var yynn1520 int
			if yyr1520 || yy2arr1520 {
				r.EncodeArrayStart(18)
			} else {
				yynn1520 = 1
				for _, b := range yyq1520 {
					if b {
						yynn1520++
					}
				}
				r.EncodeMapStart(yynn1520)
				yynn1520 = 0
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1522 := z.EncBinary()
				_ = yym1522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1523 := z.EncBinary()
				_ = yym1523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[1] {
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1528 := z.EncBinary()
						_ = yym1528
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1531 := z.EncBinary()
						_ = yym1531
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1532 := z.EncBinary()
						_ = yym1532
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[4] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1520[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1537 := z.EncBinary()
						_ = yym1537
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1540 := z.EncBinary()
						_ = yym1540
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1541 := z.EncBinary()
						_ = yym1541
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[7] {
					yy1543 := &x.Resources
					yy1543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1544 := &x.Resources
					yy1544.CodecEncodeSelf(e)
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1546 := z.EncBinary()
						_ = yym1546
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1547 := z.EncBinary()
						_ = yym1547
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[12] {
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1520[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1520[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[15] {
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1520[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[16] {
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1520[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1561 := z.EncBinary()
					_ = yym1561
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[17] {
					yym1563 := z.EncBinary()
					_ = yym1563
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1520[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1564 := z.EncBinary()
					_ = yym1564
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1565 := z.DecBinary()
	_ = yym1565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1566 := r.ContainerType()
		if yyct1566 == codecSelferValueTypeMap1234 {
			yyl1566 := r.ReadMapStart()
			if yyl1566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1566, d)
			}
		} else if yyct1566 == codecSelferValueTypeArray1234 {
			yyl1566 := r.ReadArrayStart()
			if yyl1566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1567Slc
	var yyhl1567 bool = l >= 0
	for yyj1567 := 0; ; yyj1567++ {
		if yyhl1567 {
			if yyj1567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1567Slc = r.DecodeBytes(yys1567Slc, true, true)
		yys1567 := string(yys1567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1567 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1570 := &x.Command
				yym1571 := z.DecBinary()
				_ = yym1571
				if false {
				} else {
					z.F.DecSliceStringX(yyv1570, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1572 := &x.Args
				yym1573 := z.DecBinary()
				_ = yym1573
				if false {
				} else {
					z.F.DecSliceStringX(yyv1572, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1575 := &x.Ports
				yym1576 := z.DecBinary()
				_ = yym1576
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1575), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1577 := &x.Env
				yym1578 := z.DecBinary()
				_ = yym1578
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1577), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1579 := &x.Resources
				yyv1579.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1580 := &x.VolumeMounts
				yym1581 := z.DecBinary()
				_ = yym1581
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1580), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1567)
		} // end switch yys1567
	} // end for yyj1567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1591 int
	var yyb1591 bool
	var yyhl1591 bool = l >= 0
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1594 := &x.Command
		yym1595 := z.DecBinary()
		_ = yym1595
		if false {
		} else {
			z.F.DecSliceStringX(yyv1594, false, d)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1596 := &x.Args
		yym1597 := z.DecBinary()
		_ = yym1597
		if false {
		} else {
			z.F.DecSliceStringX(yyv1596, false, d)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1599 := &x.Ports
		yym1600 := z.DecBinary()
		_ = yym1600
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1599), d)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1601 := &x.Env
		yym1602 := z.DecBinary()
		_ = yym1602
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1601), d)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1603 := &x.Resources
		yyv1603.CodecDecodeSelf(d)
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1604 := &x.VolumeMounts
		yym1605 := z.DecBinary()
		_ = yym1605
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1604), d)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1591++
		if yyhl1591 {
			yyb1591 = yyj1591 > l
		} else {
			yyb1591 = r.CheckBreak()
		}
		if yyb1591 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1591-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1615 := z.EncBinary()
		_ = yym1615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1616 := !z.EncBinary()
			yy2arr1616 := z.EncBasicHandle().StructToArray
			var yyq1616 [3]bool
			_, _, _ = yysep1616, yyq1616, yy2arr1616
			const yyr1616 bool = false
			yyq1616[0] = x.Exec != nil
			yyq1616[1] = x.HTTPGet != nil
			yyq1616[2] = x.TCPSocket != nil
			var yynn1616 int
			if yyr1616 || yy2arr1616 {
				r.EncodeArrayStart(3)
			} else {
				yynn1616 = 0
				for _, b := range yyq1616 {
					if b {
						yynn1616++
					}
				}
				r.EncodeMapStart(yynn1616)
				yynn1616 = 0
			}
			if yyr1616 || yy2arr1616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1616[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1616[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1616 || yy2arr1616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1616[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1616 || yy2arr1616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1616[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1616 || yy2arr1616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1620 := z.DecBinary()
	_ = yym1620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1621 := r.ContainerType()
		if yyct1621 == codecSelferValueTypeMap1234 {
			yyl1621 := r.ReadMapStart()
			if yyl1621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1621, d)
			}
		} else if yyct1621 == codecSelferValueTypeArray1234 {
			yyl1621 := r.ReadArrayStart()
			if yyl1621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1622Slc
	var yyhl1622 bool = l >= 0
	for yyj1622 := 0; ; yyj1622++ {
		if yyhl1622 {
			if yyj1622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1622Slc = r.DecodeBytes(yys1622Slc, true, true)
		yys1622 := string(yys1622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1622 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1622)
		} // end switch yys1622
	} // end for yyj1622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1626 int
	var yyb1626 bool
	var yyhl1626 bool = l >= 0
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1626++
		if yyhl1626 {
			yyb1626 = yyj1626 > l
		} else {
			yyb1626 = r.CheckBreak()
		}
		if yyb1626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1630 := z.EncBinary()
		_ = yym1630
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1631 := !z.EncBinary()
			yy2arr1631 := z.EncBasicHandle().StructToArray
			var yyq1631 [2]bool
			_, _, _ = yysep1631, yyq1631, yy2arr1631
			const yyr1631 bool = false
			yyq1631[0] = x.PostStart != nil
			yyq1631[1] = x.PreStop != nil
			var yynn1631 int
			if yyr1631 || yy2arr1631 {
				r.EncodeArrayStart(2)
			} else {
				yynn1631 = 0
				for _, b := range yyq1631 {
					if b {
						yynn1631++
					}
				}
				r.EncodeMapStart(yynn1631)
				yynn1631 = 0
			}
			if yyr1631 || yy2arr1631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1631[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1631[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1631 || yy2arr1631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1631[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1631[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1631 || yy2arr1631 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1634 := z.DecBinary()
	_ = yym1634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1635 := r.ContainerType()
		if yyct1635 == codecSelferValueTypeMap1234 {
			yyl1635 := r.ReadMapStart()
			if yyl1635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1635, d)
			}
		} else if yyct1635 == codecSelferValueTypeArray1234 {
			yyl1635 := r.ReadArrayStart()
			if yyl1635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1636Slc
	var yyhl1636 bool = l >= 0
	for yyj1636 := 0; ; yyj1636++ {
		if yyhl1636 {
			if yyj1636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1636Slc = r.DecodeBytes(yys1636Slc, true, true)
		yys1636 := string(yys1636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1636 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1636)
		} // end switch yys1636
	} // end for yyj1636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1639 int
	var yyb1639 bool
	var yyhl1639 bool = l >= 0
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1639++
		if yyhl1639 {
			yyb1639 = yyj1639 > l
		} else {
			yyb1639 = r.CheckBreak()
		}
		if yyb1639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1642 := z.EncBinary()
	_ = yym1642
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1643 := z.DecBinary()
	_ = yym1643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1644 := z.EncBinary()
		_ = yym1644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1645 := !z.EncBinary()
			yy2arr1645 := z.EncBasicHandle().StructToArray
			var yyq1645 [2]bool
			_, _, _ = yysep1645, yyq1645, yy2arr1645
			const yyr1645 bool = false
			yyq1645[0] = x.Reason != ""
			yyq1645[1] = x.Message != ""
			var yynn1645 int
			if yyr1645 || yy2arr1645 {
				r.EncodeArrayStart(2)
			} else {
				yynn1645 = 0
				for _, b := range yyq1645 {
					if b {
						yynn1645++
					}
				}
				r.EncodeMapStart(yynn1645)
				yynn1645 = 0
			}
			if yyr1645 || yy2arr1645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1645[0] {
					yym1647 := z.EncBinary()
					_ = yym1647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1645[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1648 := z.EncBinary()
					_ = yym1648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1645 || yy2arr1645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1645[1] {
					yym1650 := z.EncBinary()
					_ = yym1650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1645[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1651 := z.EncBinary()
					_ = yym1651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1645 || yy2arr1645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1652 := z.DecBinary()
	_ = yym1652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1653 := r.ContainerType()
		if yyct1653 == codecSelferValueTypeMap1234 {
			yyl1653 := r.ReadMapStart()
			if yyl1653 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1653, d)
			}
		} else if yyct1653 == codecSelferValueTypeArray1234 {
			yyl1653 := r.ReadArrayStart()
			if yyl1653 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1653, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1654Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1654Slc
	var yyhl1654 bool = l >= 0
	for yyj1654 := 0; ; yyj1654++ {
		if yyhl1654 {
			if yyj1654 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1654Slc = r.DecodeBytes(yys1654Slc, true, true)
		yys1654 := string(yys1654Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1654 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1654)
		} // end switch yys1654
	} // end for yyj1654
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1657 int
	var yyb1657 bool
	var yyhl1657 bool = l >= 0
	yyj1657++
	if yyhl1657 {
		yyb1657 = yyj1657 > l
	} else {
		yyb1657 = r.CheckBreak()
	}
	if yyb1657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1657++
	if yyhl1657 {
		yyb1657 = yyj1657 > l
	} else {
		yyb1657 = r.CheckBreak()
	}
	if yyb1657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1657++
		if yyhl1657 {
			yyb1657 = yyj1657 > l
		} else {
			yyb1657 = r.CheckBreak()
		}
		if yyb1657 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1657-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1660 := z.EncBinary()
		_ = yym1660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1661 := !z.EncBinary()
			yy2arr1661 := z.EncBasicHandle().StructToArray
			var yyq1661 [1]bool
			_, _, _ = yysep1661, yyq1661, yy2arr1661
			const yyr1661 bool = false
			yyq1661[0] = true
			var yynn1661 int
			if yyr1661 || yy2arr1661 {
				r.EncodeArrayStart(1)
			} else {
				yynn1661 = 0
				for _, b := range yyq1661 {
					if b {
						yynn1661++
					}
				}
				r.EncodeMapStart(yynn1661)
				yynn1661 = 0
			}
			if yyr1661 || yy2arr1661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1661[0] {
					yy1663 := &x.StartedAt
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1663) {
					} else if yym1664 {
						z.EncBinaryMarshal(yy1663)
					} else if !yym1664 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1663)
					} else {
						z.EncFallback(yy1663)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1661[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1665 := &x.StartedAt
					yym1666 := z.EncBinary()
					_ = yym1666
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1665) {
					} else if yym1666 {
						z.EncBinaryMarshal(yy1665)
					} else if !yym1666 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1665)
					} else {
						z.EncFallback(yy1665)
					}
				}
			}
			if yyr1661 || yy2arr1661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1667 := z.DecBinary()
	_ = yym1667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1668 := r.ContainerType()
		if yyct1668 == codecSelferValueTypeMap1234 {
			yyl1668 := r.ReadMapStart()
			if yyl1668 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1668, d)
			}
		} else if yyct1668 == codecSelferValueTypeArray1234 {
			yyl1668 := r.ReadArrayStart()
			if yyl1668 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1669Slc
	var yyhl1669 bool = l >= 0
	for yyj1669 := 0; ; yyj1669++ {
		if yyhl1669 {
			if yyj1669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1669Slc = r.DecodeBytes(yys1669Slc, true, true)
		yys1669 := string(yys1669Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1669 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_v1.Time{}
			} else {
				yyv1670 := &x.StartedAt
				yym1671 := z.DecBinary()
				_ = yym1671
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1670) {
				} else if yym1671 {
					z.DecBinaryUnmarshal(yyv1670)
				} else if !yym1671 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1670)
				} else {
					z.DecFallback(yyv1670, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1669)
		} // end switch yys1669
	} // end for yyj1669
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1672 int
	var yyb1672 bool
	var yyhl1672 bool = l >= 0
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_v1.Time{}
	} else {
		yyv1673 := &x.StartedAt
		yym1674 := z.DecBinary()
		_ = yym1674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1673) {
		} else if yym1674 {
			z.DecBinaryUnmarshal(yyv1673)
		} else if !yym1674 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1673)
		} else {
			z.DecFallback(yyv1673, false)
		}
	}
	for {
		yyj1672++
		if yyhl1672 {
			yyb1672 = yyj1672 > l
		} else {
			yyb1672 = r.CheckBreak()
		}
		if yyb1672 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1672-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1675 := z.EncBinary()
		_ = yym1675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1676 := !z.EncBinary()
			yy2arr1676 := z.EncBasicHandle().StructToArray
			var yyq1676 [7]bool
			_, _, _ = yysep1676, yyq1676, yy2arr1676
			const yyr1676 bool = false
			yyq1676[1] = x.Signal != 0
			yyq1676[2] = x.Reason != ""
			yyq1676[3] = x.Message != ""
			yyq1676[4] = true
			yyq1676[5] = true
			yyq1676[6] = x.ContainerID != ""
			var yynn1676 int
			if yyr1676 || yy2arr1676 {
				r.EncodeArrayStart(7)
			} else {
				yynn1676 = 1
				for _, b := range yyq1676 {
					if b {
						yynn1676++
					}
				}
				r.EncodeMapStart(yynn1676)
				yynn1676 = 0
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1678 := z.EncBinary()
				_ = yym1678
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1679 := z.EncBinary()
				_ = yym1679
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1676[1] {
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1676[2] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1676[3] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1676[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1676[4] {
					yy1690 := &x.StartedAt
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1690) {
					} else if yym1691 {
						z.EncBinaryMarshal(yy1690)
					} else if !yym1691 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1690)
					} else {
						z.EncFallback(yy1690)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1692 := &x.StartedAt
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1692) {
					} else if yym1693 {
						z.EncBinaryMarshal(yy1692)
					} else if !yym1693 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1692)
					} else {
						z.EncFallback(yy1692)
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1676[5] {
					yy1695 := &x.FinishedAt
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1695) {
					} else if yym1696 {
						z.EncBinaryMarshal(yy1695)
					} else if !yym1696 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1695)
					} else {
						z.EncFallback(yy1695)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1697 := &x.FinishedAt
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1697) {
					} else if yym1698 {
						z.EncBinaryMarshal(yy1697)
					} else if !yym1698 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1697)
					} else {
						z.EncFallback(yy1697)
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1676[6] {
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1676[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1702 := z.DecBinary()
	_ = yym1702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1703 := r.ContainerType()
		if yyct1703 == codecSelferValueTypeMap1234 {
			yyl1703 := r.ReadMapStart()
			if yyl1703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1703, d)
			}
		} else if yyct1703 == codecSelferValueTypeArray1234 {
			yyl1703 := r.ReadArrayStart()
			if yyl1703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1704Slc
	var yyhl1704 bool = l >= 0
	for yyj1704 := 0; ; yyj1704++ {
		if yyhl1704 {
			if yyj1704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1704Slc = r.DecodeBytes(yys1704Slc, true, true)
		yys1704 := string(yys1704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1704 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_v1.Time{}
			} else {
				yyv1709 := &x.StartedAt
				yym1710 := z.DecBinary()
				_ = yym1710
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1709) {
				} else if yym1710 {
					z.DecBinaryUnmarshal(yyv1709)
				} else if !yym1710 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1709)
				} else {
					z.DecFallback(yyv1709, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_v1.Time{}
			} else {
				yyv1711 := &x.FinishedAt
				yym1712 := z.DecBinary()
				_ = yym1712
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1711) {
				} else if yym1712 {
					z.DecBinaryUnmarshal(yyv1711)
				} else if !yym1712 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1711)
				} else {
					z.DecFallback(yyv1711, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1704)
		} // end switch yys1704
	} // end for yyj1704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1714 int
	var yyb1714 bool
	var yyhl1714 bool = l >= 0
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_v1.Time{}
	} else {
		yyv1719 := &x.StartedAt
		yym1720 := z.DecBinary()
		_ = yym1720
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1719) {
		} else if yym1720 {
			z.DecBinaryUnmarshal(yyv1719)
		} else if !yym1720 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1719)
		} else {
			z.DecFallback(yyv1719, false)
		}
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_v1.Time{}
	} else {
		yyv1721 := &x.FinishedAt
		yym1722 := z.DecBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1721) {
		} else if yym1722 {
			z.DecBinaryUnmarshal(yyv1721)
		} else if !yym1722 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1721)
		} else {
			z.DecFallback(yyv1721, false)
		}
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1714++
		if yyhl1714 {
			yyb1714 = yyj1714 > l
		} else {
			yyb1714 = r.CheckBreak()
		}
		if yyb1714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1724 := z.EncBinary()
		_ = yym1724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1725 := !z.EncBinary()
			yy2arr1725 := z.EncBasicHandle().StructToArray
			var yyq1725 [3]bool
			_, _, _ = yysep1725, yyq1725, yy2arr1725
			const yyr1725 bool = false
			yyq1725[0] = x.Waiting != nil
			yyq1725[1] = x.Running != nil
			yyq1725[2] = x.Terminated != nil
			var yynn1725 int
			if yyr1725 || yy2arr1725 {
				r.EncodeArrayStart(3)
			} else {
				yynn1725 = 0
				for _, b := range yyq1725 {
					if b {
						yynn1725++
					}
				}
				r.EncodeMapStart(yynn1725)
				yynn1725 = 0
			}
			if yyr1725 || yy2arr1725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1725[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1725 || yy2arr1725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1725[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1725[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1725 || yy2arr1725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1725[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1725[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1725 || yy2arr1725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1729 := z.DecBinary()
	_ = yym1729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1730 := r.ContainerType()
		if yyct1730 == codecSelferValueTypeMap1234 {
			yyl1730 := r.ReadMapStart()
			if yyl1730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1730, d)
			}
		} else if yyct1730 == codecSelferValueTypeArray1234 {
			yyl1730 := r.ReadArrayStart()
			if yyl1730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1731Slc
	var yyhl1731 bool = l >= 0
	for yyj1731 := 0; ; yyj1731++ {
		if yyhl1731 {
			if yyj1731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1731Slc = r.DecodeBytes(yys1731Slc, true, true)
		yys1731 := string(yys1731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1731 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1731)
		} // end switch yys1731
	} // end for yyj1731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1735 int
	var yyb1735 bool
	var yyhl1735 bool = l >= 0
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1735++
		if yyhl1735 {
			yyb1735 = yyj1735 > l
		} else {
			yyb1735 = r.CheckBreak()
		}
		if yyb1735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1739 := z.EncBinary()
		_ = yym1739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1740 := !z.EncBinary()
			yy2arr1740 := z.EncBasicHandle().StructToArray
			var yyq1740 [8]bool
			_, _, _ = yysep1740, yyq1740, yy2arr1740
			const yyr1740 bool = false
			yyq1740[1] = true
			yyq1740[2] = true
			yyq1740[7] = x.ContainerID != ""
			var yynn1740 int
			if yyr1740 || yy2arr1740 {
				r.EncodeArrayStart(8)
			} else {
				yynn1740 = 5
				for _, b := range yyq1740 {
					if b {
						yynn1740++
					}
				}
				r.EncodeMapStart(yynn1740)
				yynn1740 = 0
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1742 := z.EncBinary()
				_ = yym1742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1740[1] {
					yy1745 := &x.State
					yy1745.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1740[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1746 := &x.State
					yy1746.CodecEncodeSelf(e)
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1740[2] {
					yy1748 := &x.LastTerminationState
					yy1748.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1749 := &x.LastTerminationState
					yy1749.CodecEncodeSelf(e)
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1751 := z.EncBinary()
				_ = yym1751
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1752 := z.EncBinary()
				_ = yym1752
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1754 := z.EncBinary()
				_ = yym1754
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1755 := z.EncBinary()
				_ = yym1755
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1757 := z.EncBinary()
				_ = yym1757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1758 := z.EncBinary()
				_ = yym1758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1760 := z.EncBinary()
				_ = yym1760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1761 := z.EncBinary()
				_ = yym1761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1740[7] {
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1740[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1765 := z.DecBinary()
	_ = yym1765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1766 := r.ContainerType()
		if yyct1766 == codecSelferValueTypeMap1234 {
			yyl1766 := r.ReadMapStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1766, d)
			}
		} else if yyct1766 == codecSelferValueTypeArray1234 {
			yyl1766 := r.ReadArrayStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1767Slc
	var yyhl1767 bool = l >= 0
	for yyj1767 := 0; ; yyj1767++ {
		if yyhl1767 {
			if yyj1767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1767Slc = r.DecodeBytes(yys1767Slc, true, true)
		yys1767 := string(yys1767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1767 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1769 := &x.State
				yyv1769.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1770 := &x.LastTerminationState
				yyv1770.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1767)
		} // end switch yys1767
	} // end for yyj1767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1776 int
	var yyb1776 bool
	var yyhl1776 bool = l >= 0
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1778 := &x.State
		yyv1778.CodecDecodeSelf(d)
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1779 := &x.LastTerminationState
		yyv1779.CodecDecodeSelf(d)
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1776++
		if yyhl1776 {
			yyb1776 = yyj1776 > l
		} else {
			yyb1776 = r.CheckBreak()
		}
		if yyb1776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1785 := z.EncBinary()
	_ = yym1785
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1786 := z.DecBinary()
	_ = yym1786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1787 := z.EncBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1788 := z.DecBinary()
	_ = yym1788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1789 := z.EncBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1790 := !z.EncBinary()
			yy2arr1790 := z.EncBasicHandle().StructToArray
			var yyq1790 [6]bool
			_, _, _ = yysep1790, yyq1790, yy2arr1790
			const yyr1790 bool = false
			yyq1790[2] = true
			yyq1790[3] = true
			yyq1790[4] = x.Reason != ""
			yyq1790[5] = x.Message != ""
			var yynn1790 int
			if yyr1790 || yy2arr1790 {
				r.EncodeArrayStart(6)
			} else {
				yynn1790 = 2
				for _, b := range yyq1790 {
					if b {
						yynn1790++
					}
				}
				r.EncodeMapStart(yynn1790)
				yynn1790 = 0
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[2] {
					yy1794 := &x.LastProbeTime
					yym1795 := z.EncBinary()
					_ = yym1795
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1794) {
					} else if yym1795 {
						z.EncBinaryMarshal(yy1794)
					} else if !yym1795 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1794)
					} else {
						z.EncFallback(yy1794)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1796 := &x.LastProbeTime
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1796) {
					} else if yym1797 {
						z.EncBinaryMarshal(yy1796)
					} else if !yym1797 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1796)
					} else {
						z.EncFallback(yy1796)
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[3] {
					yy1799 := &x.LastTransitionTime
					yym1800 := z.EncBinary()
					_ = yym1800
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1799) {
					} else if yym1800 {
						z.EncBinaryMarshal(yy1799)
					} else if !yym1800 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1799)
					} else {
						z.EncFallback(yy1799)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1801 := &x.LastTransitionTime
					yym1802 := z.EncBinary()
					_ = yym1802
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1801) {
					} else if yym1802 {
						z.EncBinaryMarshal(yy1801)
					} else if !yym1802 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1801)
					} else {
						z.EncFallback(yy1801)
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[4] {
					yym1804 := z.EncBinary()
					_ = yym1804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1790[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[5] {
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1790[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1809 := z.DecBinary()
	_ = yym1809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1810 := r.ContainerType()
		if yyct1810 == codecSelferValueTypeMap1234 {
			yyl1810 := r.ReadMapStart()
			if yyl1810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1810, d)
			}
		} else if yyct1810 == codecSelferValueTypeArray1234 {
			yyl1810 := r.ReadArrayStart()
			if yyl1810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1811Slc
	var yyhl1811 bool = l >= 0
	for yyj1811 := 0; ; yyj1811++ {
		if yyhl1811 {
			if yyj1811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1811Slc = r.DecodeBytes(yys1811Slc, true, true)
		yys1811 := string(yys1811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1811 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_v1.Time{}
			} else {
				yyv1814 := &x.LastProbeTime
				yym1815 := z.DecBinary()
				_ = yym1815
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1814) {
				} else if yym1815 {
					z.DecBinaryUnmarshal(yyv1814)
				} else if !yym1815 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1814)
				} else {
					z.DecFallback(yyv1814, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv1816 := &x.LastTransitionTime
				yym1817 := z.DecBinary()
				_ = yym1817
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1816) {
				} else if yym1817 {
					z.DecBinaryUnmarshal(yyv1816)
				} else if !yym1817 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1816)
				} else {
					z.DecFallback(yyv1816, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1811)
		} // end switch yys1811
	} // end for yyj1811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1820 int
	var yyb1820 bool
	var yyhl1820 bool = l >= 0
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_v1.Time{}
	} else {
		yyv1823 := &x.LastProbeTime
		yym1824 := z.DecBinary()
		_ = yym1824
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1823) {
		} else if yym1824 {
			z.DecBinaryUnmarshal(yyv1823)
		} else if !yym1824 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1823)
		} else {
			z.DecFallback(yyv1823, false)
		}
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv1825 := &x.LastTransitionTime
		yym1826 := z.DecBinary()
		_ = yym1826
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1825) {
		} else if yym1826 {
			z.DecBinaryUnmarshal(yyv1825)
		} else if !yym1826 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1825)
		} else {
			z.DecFallback(yyv1825, false)
		}
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1820++
		if yyhl1820 {
			yyb1820 = yyj1820 > l
		} else {
			yyb1820 = r.CheckBreak()
		}
		if yyb1820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1829 := z.EncBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1830 := z.DecBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1831 := z.EncBinary()
	_ = yym1831
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1832 := z.DecBinary()
	_ = yym1832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1833 := z.EncBinary()
		_ = yym1833
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1834 := !z.EncBinary()
			yy2arr1834 := z.EncBasicHandle().StructToArray
			var yyq1834 [1]bool
			_, _, _ = yysep1834, yyq1834, yy2arr1834
			const yyr1834 bool = false
			var yynn1834 int
			if yyr1834 || yy2arr1834 {
				r.EncodeArrayStart(1)
			} else {
				yynn1834 = 1
				for _, b := range yyq1834 {
					if b {
						yynn1834++
					}
				}
				r.EncodeMapStart(yynn1834)
				yynn1834 = 0
			}
			if yyr1834 || yy2arr1834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1837 := z.EncBinary()
					_ = yym1837
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1834 || yy2arr1834 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1838 := z.DecBinary()
	_ = yym1838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1839 := r.ContainerType()
		if yyct1839 == codecSelferValueTypeMap1234 {
			yyl1839 := r.ReadMapStart()
			if yyl1839 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1839, d)
			}
		} else if yyct1839 == codecSelferValueTypeArray1234 {
			yyl1839 := r.ReadArrayStart()
			if yyl1839 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1840Slc
	var yyhl1840 bool = l >= 0
	for yyj1840 := 0; ; yyj1840++ {
		if yyhl1840 {
			if yyj1840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1840Slc = r.DecodeBytes(yys1840Slc, true, true)
		yys1840 := string(yys1840Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1840 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1841 := &x.NodeSelectorTerms
				yym1842 := z.DecBinary()
				_ = yym1842
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1841), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1840)
		} // end switch yys1840
	} // end for yyj1840
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1843 int
	var yyb1843 bool
	var yyhl1843 bool = l >= 0
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1844 := &x.NodeSelectorTerms
		yym1845 := z.DecBinary()
		_ = yym1845
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1844), d)
		}
	}
	for {
		yyj1843++
		if yyhl1843 {
			yyb1843 = yyj1843 > l
		} else {
			yyb1843 = r.CheckBreak()
		}
		if yyb1843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1846 := z.EncBinary()
		_ = yym1846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1847 := !z.EncBinary()
			yy2arr1847 := z.EncBasicHandle().StructToArray
			var yyq1847 [1]bool
			_, _, _ = yysep1847, yyq1847, yy2arr1847
			const yyr1847 bool = false
			var yynn1847 int
			if yyr1847 || yy2arr1847 {
				r.EncodeArrayStart(1)
			} else {
				yynn1847 = 1
				for _, b := range yyq1847 {
					if b {
						yynn1847++
					}
				}
				r.EncodeMapStart(yynn1847)
				yynn1847 = 0
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1851 := z.DecBinary()
	_ = yym1851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1852 := r.ContainerType()
		if yyct1852 == codecSelferValueTypeMap1234 {
			yyl1852 := r.ReadMapStart()
			if yyl1852 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1852, d)
			}
		} else if yyct1852 == codecSelferValueTypeArray1234 {
			yyl1852 := r.ReadArrayStart()
			if yyl1852 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1852, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1853Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1853Slc
	var yyhl1853 bool = l >= 0
	for yyj1853 := 0; ; yyj1853++ {
		if yyhl1853 {
			if yyj1853 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1853Slc = r.DecodeBytes(yys1853Slc, true, true)
		yys1853 := string(yys1853Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1853 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1854 := &x.MatchExpressions
				yym1855 := z.DecBinary()
				_ = yym1855
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1854), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1853)
		} // end switch yys1853
	} // end for yyj1853
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1856 int
	var yyb1856 bool
	var yyhl1856 bool = l >= 0
	yyj1856++
	if yyhl1856 {
		yyb1856 = yyj1856 > l
	} else {
		yyb1856 = r.CheckBreak()
	}
	if yyb1856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1857 := &x.MatchExpressions
		yym1858 := z.DecBinary()
		_ = yym1858
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1857), d)
		}
	}
	for {
		yyj1856++
		if yyhl1856 {
			yyb1856 = yyj1856 > l
		} else {
			yyb1856 = r.CheckBreak()
		}
		if yyb1856 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1856-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1859 := z.EncBinary()
		_ = yym1859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1860 := !z.EncBinary()
			yy2arr1860 := z.EncBasicHandle().StructToArray
			var yyq1860 [3]bool
			_, _, _ = yysep1860, yyq1860, yy2arr1860
			const yyr1860 bool = false
			yyq1860[2] = len(x.Values) != 0
			var yynn1860 int
			if yyr1860 || yy2arr1860 {
				r.EncodeArrayStart(3)
			} else {
				yynn1860 = 2
				for _, b := range yyq1860 {
					if b {
						yynn1860++
					}
				}
				r.EncodeMapStart(yynn1860)
				yynn1860 = 0
			}
			if yyr1860 || yy2arr1860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1862 := z.EncBinary()
				_ = yym1862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1863 := z.EncBinary()
				_ = yym1863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1860 || yy2arr1860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1860 || yy2arr1860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1860[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1866 := z.EncBinary()
						_ = yym1866
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1860[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1867 := z.EncBinary()
						_ = yym1867
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1860 || yy2arr1860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1868 := z.DecBinary()
	_ = yym1868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1869 := r.ContainerType()
		if yyct1869 == codecSelferValueTypeMap1234 {
			yyl1869 := r.ReadMapStart()
			if yyl1869 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1869, d)
			}
		} else if yyct1869 == codecSelferValueTypeArray1234 {
			yyl1869 := r.ReadArrayStart()
			if yyl1869 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1869, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1870Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1870Slc
	var yyhl1870 bool = l >= 0
	for yyj1870 := 0; ; yyj1870++ {
		if yyhl1870 {
			if yyj1870 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1870Slc = r.DecodeBytes(yys1870Slc, true, true)
		yys1870 := string(yys1870Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1870 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1873 := &x.Values
				yym1874 := z.DecBinary()
				_ = yym1874
				if false {
				} else {
					z.F.DecSliceStringX(yyv1873, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1870)
		} // end switch yys1870
	} // end for yyj1870
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1875 int
	var yyb1875 bool
	var yyhl1875 bool = l >= 0
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1875++
	if yyhl1875 {
		yyb1875 = yyj1875 > l
	} else {
		yyb1875 = r.CheckBreak()
	}
	if yyb1875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1878 := &x.Values
		yym1879 := z.DecBinary()
		_ = yym1879
		if false {
		} else {
			z.F.DecSliceStringX(yyv1878, false, d)
		}
	}
	for {
		yyj1875++
		if yyhl1875 {
			yyb1875 = yyj1875 > l
		} else {
			yyb1875 = r.CheckBreak()
		}
		if yyb1875 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1875-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1880 := z.EncBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1881 := z.DecBinary()
	_ = yym1881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1882 := z.EncBinary()
		_ = yym1882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1883 := !z.EncBinary()
			yy2arr1883 := z.EncBasicHandle().StructToArray
			var yyq1883 [3]bool
			_, _, _ = yysep1883, yyq1883, yy2arr1883
			const yyr1883 bool = false
			yyq1883[0] = x.NodeAffinity != nil
			yyq1883[1] = x.PodAffinity != nil
			yyq1883[2] = x.PodAntiAffinity != nil
			var yynn1883 int
			if yyr1883 || yy2arr1883 {
				r.EncodeArrayStart(3)
			} else {
				yynn1883 = 0
				for _, b := range yyq1883 {
					if b {
						yynn1883++
					}
				}
				r.EncodeMapStart(yynn1883)
				yynn1883 = 0
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1883[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1883[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1883[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1883[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1883[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1883[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1887 := z.DecBinary()
	_ = yym1887
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1888 := r.ContainerType()
		if yyct1888 == codecSelferValueTypeMap1234 {
			yyl1888 := r.ReadMapStart()
			if yyl1888 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1888, d)
			}
		} else if yyct1888 == codecSelferValueTypeArray1234 {
			yyl1888 := r.ReadArrayStart()
			if yyl1888 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1888, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1889Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1889Slc
	var yyhl1889 bool = l >= 0
	for yyj1889 := 0; ; yyj1889++ {
		if yyhl1889 {
			if yyj1889 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1889Slc = r.DecodeBytes(yys1889Slc, true, true)
		yys1889 := string(yys1889Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1889 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1889)
		} // end switch yys1889
	} // end for yyj1889
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1893 int
	var yyb1893 bool
	var yyhl1893 bool = l >= 0
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1893++
		if yyhl1893 {
			yyb1893 = yyj1893 > l
		} else {
			yyb1893 = r.CheckBreak()
		}
		if yyb1893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1897 := z.EncBinary()
		_ = yym1897
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1898 := !z.EncBinary()
			yy2arr1898 := z.EncBasicHandle().StructToArray
			var yyq1898 [2]bool
			_, _, _ = yysep1898, yyq1898, yy2arr1898
			const yyr1898 bool = false
			yyq1898[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1898[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1898 int
			if yyr1898 || yy2arr1898 {
				r.EncodeArrayStart(2)
			} else {
				yynn1898 = 0
				for _, b := range yyq1898 {
					if b {
						yynn1898++
					}
				}
				r.EncodeMapStart(yynn1898)
				yynn1898 = 0
			}
			if yyr1898 || yy2arr1898 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1898[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1900 := z.EncBinary()
						_ = yym1900
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1898[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1901 := z.EncBinary()
						_ = yym1901
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1898[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1903 := z.EncBinary()
						_ = yym1903
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1898[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1904 := z.EncBinary()
						_ = yym1904
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1905 := z.DecBinary()
	_ = yym1905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1906 := r.ContainerType()
		if yyct1906 == codecSelferValueTypeMap1234 {
			yyl1906 := r.ReadMapStart()
			if yyl1906 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1906, d)
			}
		} else if yyct1906 == codecSelferValueTypeArray1234 {
			yyl1906 := r.ReadArrayStart()
			if yyl1906 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1907Slc
	var yyhl1907 bool = l >= 0
	for yyj1907 := 0; ; yyj1907++ {
		if yyhl1907 {
			if yyj1907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1907Slc = r.DecodeBytes(yys1907Slc, true, true)
		yys1907 := string(yys1907Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1907 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1908 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1909 := z.DecBinary()
				_ = yym1909
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1908), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1910 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1911 := z.DecBinary()
				_ = yym1911
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1910), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1907)
		} // end switch yys1907
	} // end for yyj1907
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1912 int
	var yyb1912 bool
	var yyhl1912 bool = l >= 0
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1913 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1914 := z.DecBinary()
		_ = yym1914
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1913), d)
		}
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1915 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1916 := z.DecBinary()
		_ = yym1916
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1915), d)
		}
	}
	for {
		yyj1912++
		if yyhl1912 {
			yyb1912 = yyj1912 > l
		} else {
			yyb1912 = r.CheckBreak()
		}
		if yyb1912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1917 := z.EncBinary()
		_ = yym1917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1918 := !z.EncBinary()
			yy2arr1918 := z.EncBasicHandle().StructToArray
			var yyq1918 [2]bool
			_, _, _ = yysep1918, yyq1918, yy2arr1918
			const yyr1918 bool = false
			yyq1918[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1918[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1918 int
			if yyr1918 || yy2arr1918 {
				r.EncodeArrayStart(2)
			} else {
				yynn1918 = 0
				for _, b := range yyq1918 {
					if b {
						yynn1918++
					}
				}
				r.EncodeMapStart(yynn1918)
				yynn1918 = 0
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1918[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1920 := z.EncBinary()
						_ = yym1920
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1921 := z.EncBinary()
						_ = yym1921
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1918[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1924 := z.EncBinary()
						_ = yym1924
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1925 := z.DecBinary()
	_ = yym1925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1926 := r.ContainerType()
		if yyct1926 == codecSelferValueTypeMap1234 {
			yyl1926 := r.ReadMapStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1926, d)
			}
		} else if yyct1926 == codecSelferValueTypeArray1234 {
			yyl1926 := r.ReadArrayStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1927Slc
	var yyhl1927 bool = l >= 0
	for yyj1927 := 0; ; yyj1927++ {
		if yyhl1927 {
			if yyj1927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1927Slc = r.DecodeBytes(yys1927Slc, true, true)
		yys1927 := string(yys1927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1927 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1928 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1929 := z.DecBinary()
				_ = yym1929
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1928), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1930 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1931 := z.DecBinary()
				_ = yym1931
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1930), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1927)
		} // end switch yys1927
	} // end for yyj1927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1932 int
	var yyb1932 bool
	var yyhl1932 bool = l >= 0
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1933 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1934 := z.DecBinary()
		_ = yym1934
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1933), d)
		}
	}
	yyj1932++
	if yyhl1932 {
		yyb1932 = yyj1932 > l
	} else {
		yyb1932 = r.CheckBreak()
	}
	if yyb1932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1935 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1936 := z.DecBinary()
		_ = yym1936
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1935), d)
		}
	}
	for {
		yyj1932++
		if yyhl1932 {
			yyb1932 = yyj1932 > l
		} else {
			yyb1932 = r.CheckBreak()
		}
		if yyb1932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1937 := z.EncBinary()
		_ = yym1937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1938 := !z.EncBinary()
			yy2arr1938 := z.EncBasicHandle().StructToArray
			var yyq1938 [2]bool
			_, _, _ = yysep1938, yyq1938, yy2arr1938
			const yyr1938 bool = false
			var yynn1938 int
			if yyr1938 || yy2arr1938 {
				r.EncodeArrayStart(2)
			} else {
				yynn1938 = 2
				for _, b := range yyq1938 {
					if b {
						yynn1938++
					}
				}
				r.EncodeMapStart(yynn1938)
				yynn1938 = 0
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1940 := z.EncBinary()
				_ = yym1940
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1941 := z.EncBinary()
				_ = yym1941
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1943 := &x.PodAffinityTerm
				yy1943.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1944 := &x.PodAffinityTerm
				yy1944.CodecEncodeSelf(e)
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1945 := z.DecBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1946 := r.ContainerType()
		if yyct1946 == codecSelferValueTypeMap1234 {
			yyl1946 := r.ReadMapStart()
			if yyl1946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1946, d)
			}
		} else if yyct1946 == codecSelferValueTypeArray1234 {
			yyl1946 := r.ReadArrayStart()
			if yyl1946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1947Slc
	var yyhl1947 bool = l >= 0
	for yyj1947 := 0; ; yyj1947++ {
		if yyhl1947 {
			if yyj1947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1947Slc = r.DecodeBytes(yys1947Slc, true, true)
		yys1947 := string(yys1947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1947 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1949 := &x.PodAffinityTerm
				yyv1949.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1947)
		} // end switch yys1947
	} // end for yyj1947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1950 int
	var yyb1950 bool
	var yyhl1950 bool = l >= 0
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1952 := &x.PodAffinityTerm
		yyv1952.CodecDecodeSelf(d)
	}
	for {
		yyj1950++
		if yyhl1950 {
			yyb1950 = yyj1950 > l
		} else {
			yyb1950 = r.CheckBreak()
		}
		if yyb1950 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1950-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1953 := z.EncBinary()
		_ = yym1953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1954 := !z.EncBinary()
			yy2arr1954 := z.EncBasicHandle().StructToArray
			var yyq1954 [3]bool
			_, _, _ = yysep1954, yyq1954, yy2arr1954
			const yyr1954 bool = false
			yyq1954[0] = x.LabelSelector != nil
			yyq1954[2] = x.TopologyKey != ""
			var yynn1954 int
			if yyr1954 || yy2arr1954 {
				r.EncodeArrayStart(3)
			} else {
				yynn1954 = 1
				for _, b := range yyq1954 {
					if b {
						yynn1954++
					}
				}
				r.EncodeMapStart(yynn1954)
				yynn1954 = 0
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1954[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1956 := z.EncBinary()
						_ = yym1956
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1954[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1957 := z.EncBinary()
						_ = yym1957
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1959 := z.EncBinary()
					_ = yym1959
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1954[2] {
					yym1962 := z.EncBinary()
					_ = yym1962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1954[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1964 := z.DecBinary()
	_ = yym1964
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1965 := r.ContainerType()
		if yyct1965 == codecSelferValueTypeMap1234 {
			yyl1965 := r.ReadMapStart()
			if yyl1965 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1965, d)
			}
		} else if yyct1965 == codecSelferValueTypeArray1234 {
			yyl1965 := r.ReadArrayStart()
			if yyl1965 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1965, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1966Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1966Slc
	var yyhl1966 bool = l >= 0
	for yyj1966 := 0; ; yyj1966++ {
		if yyhl1966 {
			if yyj1966 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1966Slc = r.DecodeBytes(yys1966Slc, true, true)
		yys1966 := string(yys1966Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1966 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_v1.LabelSelector)
				}
				yym1968 := z.DecBinary()
				_ = yym1968
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1969 := &x.Namespaces
				yym1970 := z.DecBinary()
				_ = yym1970
				if false {
				} else {
					z.F.DecSliceStringX(yyv1969, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1966)
		} // end switch yys1966
	} // end for yyj1966
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1972 int
	var yyb1972 bool
	var yyhl1972 bool = l >= 0
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_v1.LabelSelector)
		}
		yym1974 := z.DecBinary()
		_ = yym1974
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1975 := &x.Namespaces
		yym1976 := z.DecBinary()
		_ = yym1976
		if false {
		} else {
			z.F.DecSliceStringX(yyv1975, false, d)
		}
	}
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1972++
		if yyhl1972 {
			yyb1972 = yyj1972 > l
		} else {
			yyb1972 = r.CheckBreak()
		}
		if yyb1972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1978 := z.EncBinary()
		_ = yym1978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1979 := !z.EncBinary()
			yy2arr1979 := z.EncBasicHandle().StructToArray
			var yyq1979 [2]bool
			_, _, _ = yysep1979, yyq1979, yy2arr1979
			const yyr1979 bool = false
			yyq1979[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1979[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1979 int
			if yyr1979 || yy2arr1979 {
				r.EncodeArrayStart(2)
			} else {
				yynn1979 = 0
				for _, b := range yyq1979 {
					if b {
						yynn1979++
					}
				}
				r.EncodeMapStart(yynn1979)
				yynn1979 = 0
			}
			if yyr1979 || yy2arr1979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1979[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1979[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1979 || yy2arr1979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1979[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1982 := z.EncBinary()
						_ = yym1982
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1983 := z.EncBinary()
						_ = yym1983
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1979 || yy2arr1979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1984 := z.DecBinary()
	_ = yym1984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1985 := r.ContainerType()
		if yyct1985 == codecSelferValueTypeMap1234 {
			yyl1985 := r.ReadMapStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1985, d)
			}
		} else if yyct1985 == codecSelferValueTypeArray1234 {
			yyl1985 := r.ReadArrayStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1986Slc
	var yyhl1986 bool = l >= 0
	for yyj1986 := 0; ; yyj1986++ {
		if yyhl1986 {
			if yyj1986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1986Slc = r.DecodeBytes(yys1986Slc, true, true)
		yys1986 := string(yys1986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1986 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1988 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1989 := z.DecBinary()
				_ = yym1989
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1988), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1986)
		} // end switch yys1986
	} // end for yyj1986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1990 int
	var yyb1990 bool
	var yyhl1990 bool = l >= 0
	yyj1990++
	if yyhl1990 {
		yyb1990 = yyj1990 > l
	} else {
		yyb1990 = r.CheckBreak()
	}
	if yyb1990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1990++
	if yyhl1990 {
		yyb1990 = yyj1990 > l
	} else {
		yyb1990 = r.CheckBreak()
	}
	if yyb1990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1992 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1993 := z.DecBinary()
		_ = yym1993
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1992), d)
		}
	}
	for {
		yyj1990++
		if yyhl1990 {
			yyb1990 = yyj1990 > l
		} else {
			yyb1990 = r.CheckBreak()
		}
		if yyb1990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1994 := z.EncBinary()
		_ = yym1994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1995 := !z.EncBinary()
			yy2arr1995 := z.EncBasicHandle().StructToArray
			var yyq1995 [2]bool
			_, _, _ = yysep1995, yyq1995, yy2arr1995
			const yyr1995 bool = false
			var yynn1995 int
			if yyr1995 || yy2arr1995 {
				r.EncodeArrayStart(2)
			} else {
				yynn1995 = 2
				for _, b := range yyq1995 {
					if b {
						yynn1995++
					}
				}
				r.EncodeMapStart(yynn1995)
				yynn1995 = 0
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1997 := z.EncBinary()
				_ = yym1997
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1998 := z.EncBinary()
				_ = yym1998
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2000 := &x.Preference
				yy2000.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2001 := &x.Preference
				yy2001.CodecEncodeSelf(e)
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2003 := r.ContainerType()
		if yyct2003 == codecSelferValueTypeMap1234 {
			yyl2003 := r.ReadMapStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2003, d)
			}
		} else if yyct2003 == codecSelferValueTypeArray1234 {
			yyl2003 := r.ReadArrayStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2004Slc
	var yyhl2004 bool = l >= 0
	for yyj2004 := 0; ; yyj2004++ {
		if yyhl2004 {
			if yyj2004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2004Slc = r.DecodeBytes(yys2004Slc, true, true)
		yys2004 := string(yys2004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2004 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2006 := &x.Preference
				yyv2006.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2004)
		} // end switch yys2004
	} // end for yyj2004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2007 int
	var yyb2007 bool
	var yyhl2007 bool = l >= 0
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2009 := &x.Preference
		yyv2009.CodecDecodeSelf(d)
	}
	for {
		yyj2007++
		if yyhl2007 {
			yyb2007 = yyj2007 > l
		} else {
			yyb2007 = r.CheckBreak()
		}
		if yyb2007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2010 := z.EncBinary()
		_ = yym2010
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2011 := !z.EncBinary()
			yy2arr2011 := z.EncBasicHandle().StructToArray
			var yyq2011 [3]bool
			_, _, _ = yysep2011, yyq2011, yy2arr2011
			const yyr2011 bool = false
			yyq2011[1] = x.Value != ""
			var yynn2011 int
			if yyr2011 || yy2arr2011 {
				r.EncodeArrayStart(3)
			} else {
				yynn2011 = 2
				for _, b := range yyq2011 {
					if b {
						yynn2011++
					}
				}
				r.EncodeMapStart(yynn2011)
				yynn2011 = 0
			}
			if yyr2011 || yy2arr2011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2013 := z.EncBinary()
				_ = yym2013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2014 := z.EncBinary()
				_ = yym2014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2011 || yy2arr2011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2011[1] {
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2011[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2011 || yy2arr2011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2011 || yy2arr2011 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2019 := z.DecBinary()
	_ = yym2019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2020 := r.ContainerType()
		if yyct2020 == codecSelferValueTypeMap1234 {
			yyl2020 := r.ReadMapStart()
			if yyl2020 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2020, d)
			}
		} else if yyct2020 == codecSelferValueTypeArray1234 {
			yyl2020 := r.ReadArrayStart()
			if yyl2020 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2020, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2021Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2021Slc
	var yyhl2021 bool = l >= 0
	for yyj2021 := 0; ; yyj2021++ {
		if yyhl2021 {
			if yyj2021 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2021Slc = r.DecodeBytes(yys2021Slc, true, true)
		yys2021 := string(yys2021Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2021 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2021)
		} // end switch yys2021
	} // end for yyj2021
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2025 int
	var yyb2025 bool
	var yyhl2025 bool = l >= 0
	yyj2025++
	if yyhl2025 {
		yyb2025 = yyj2025 > l
	} else {
		yyb2025 = r.CheckBreak()
	}
	if yyb2025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2025++
	if yyhl2025 {
		yyb2025 = yyj2025 > l
	} else {
		yyb2025 = r.CheckBreak()
	}
	if yyb2025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2025++
	if yyhl2025 {
		yyb2025 = yyj2025 > l
	} else {
		yyb2025 = r.CheckBreak()
	}
	if yyb2025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2025++
		if yyhl2025 {
			yyb2025 = yyj2025 > l
		} else {
			yyb2025 = r.CheckBreak()
		}
		if yyb2025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2029 := z.EncBinary()
	_ = yym2029
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2030 := z.DecBinary()
	_ = yym2030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2031 := z.EncBinary()
		_ = yym2031
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2032 := !z.EncBinary()
			yy2arr2032 := z.EncBasicHandle().StructToArray
			var yyq2032 [4]bool
			_, _, _ = yysep2032, yyq2032, yy2arr2032
			const yyr2032 bool = false
			yyq2032[0] = x.Key != ""
			yyq2032[1] = x.Operator != ""
			yyq2032[2] = x.Value != ""
			yyq2032[3] = x.Effect != ""
			var yynn2032 int
			if yyr2032 || yy2arr2032 {
				r.EncodeArrayStart(4)
			} else {
				yynn2032 = 0
				for _, b := range yyq2032 {
					if b {
						yynn2032++
					}
				}
				r.EncodeMapStart(yynn2032)
				yynn2032 = 0
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2032[0] {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2032[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2032[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2032[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2032[2] {
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2032[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2032[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2032[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2032 || yy2arr2032 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2041 := z.DecBinary()
	_ = yym2041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2042 := r.ContainerType()
		if yyct2042 == codecSelferValueTypeMap1234 {
			yyl2042 := r.ReadMapStart()
			if yyl2042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2042, d)
			}
		} else if yyct2042 == codecSelferValueTypeArray1234 {
			yyl2042 := r.ReadArrayStart()
			if yyl2042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2043Slc
	var yyhl2043 bool = l >= 0
	for yyj2043 := 0; ; yyj2043++ {
		if yyhl2043 {
			if yyj2043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2043Slc = r.DecodeBytes(yys2043Slc, true, true)
		yys2043 := string(yys2043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2043 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2043)
		} // end switch yys2043
	} // end for yyj2043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2048 int
	var yyb2048 bool
	var yyhl2048 bool = l >= 0
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2048++
		if yyhl2048 {
			yyb2048 = yyj2048 > l
		} else {
			yyb2048 = r.CheckBreak()
		}
		if yyb2048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2053 := z.EncBinary()
	_ = yym2053
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2054 := z.DecBinary()
	_ = yym2054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2055 := z.EncBinary()
		_ = yym2055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2056 := !z.EncBinary()
			yy2arr2056 := z.EncBasicHandle().StructToArray
			var yyq2056 [17]bool
			_, _, _ = yysep2056, yyq2056, yy2arr2056
			const yyr2056 bool = false
			yyq2056[0] = len(x.Volumes) != 0
			yyq2056[2] = x.RestartPolicy != ""
			yyq2056[3] = x.TerminationGracePeriodSeconds != nil
			yyq2056[4] = x.ActiveDeadlineSeconds != nil
			yyq2056[5] = x.DNSPolicy != ""
			yyq2056[6] = len(x.NodeSelector) != 0
			yyq2056[7] = x.ServiceAccountName != ""
			yyq2056[8] = x.DeprecatedServiceAccount != ""
			yyq2056[9] = x.NodeName != ""
			yyq2056[10] = x.HostNetwork != false
			yyq2056[11] = x.HostPID != false
			yyq2056[12] = x.HostIPC != false
			yyq2056[13] = x.SecurityContext != nil
			yyq2056[14] = len(x.ImagePullSecrets) != 0
			yyq2056[15] = x.Hostname != ""
			yyq2056[16] = x.Subdomain != ""
			var yynn2056 int
			if yyr2056 || yy2arr2056 {
				r.EncodeArrayStart(17)
			} else {
				yynn2056 = 1
				for _, b := range yyq2056 {
					if b {
						yynn2056++
					}
				}
				r.EncodeMapStart(yynn2056)
				yynn2056 = 0
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2058 := z.EncBinary()
						_ = yym2058
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2059 := z.EncBinary()
						_ = yym2059
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2065 := *x.TerminationGracePeriodSeconds
						yym2066 := z.EncBinary()
						_ = yym2066
						if false {
						} else {
							r.EncodeInt(int64(yy2065))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2067 := *x.TerminationGracePeriodSeconds
						yym2068 := z.EncBinary()
						_ = yym2068
						if false {
						} else {
							r.EncodeInt(int64(yy2067))
						}
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2070 := *x.ActiveDeadlineSeconds
						yym2071 := z.EncBinary()
						_ = yym2071
						if false {
						} else {
							r.EncodeInt(int64(yy2070))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2072 := *x.ActiveDeadlineSeconds
						yym2073 := z.EncBinary()
						_ = yym2073
						if false {
						} else {
							r.EncodeInt(int64(yy2072))
						}
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2076 := z.EncBinary()
						_ = yym2076
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2077 := z.EncBinary()
						_ = yym2077
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[7] {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[8] {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[9] {
					yym2085 := z.EncBinary()
					_ = yym2085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[10] {
					yym2088 := z.EncBinary()
					_ = yym2088
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2056[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[11] {
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2056[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[12] {
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2056[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2098 := z.EncBinary()
						_ = yym2098
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2056[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2099 := z.EncBinary()
						_ = yym2099
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[15] {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2056[16] {
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2056[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2056 || yy2arr2056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2106 := z.DecBinary()
	_ = yym2106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2107 := r.ContainerType()
		if yyct2107 == codecSelferValueTypeMap1234 {
			yyl2107 := r.ReadMapStart()
			if yyl2107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2107, d)
			}
		} else if yyct2107 == codecSelferValueTypeArray1234 {
			yyl2107 := r.ReadArrayStart()
			if yyl2107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2108Slc
	var yyhl2108 bool = l >= 0
	for yyj2108 := 0; ; yyj2108++ {
		if yyhl2108 {
			if yyj2108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2108Slc = r.DecodeBytes(yys2108Slc, true, true)
		yys2108 := string(yys2108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2108 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2109 := &x.Volumes
				yym2110 := z.DecBinary()
				_ = yym2110
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2109), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2111 := &x.Containers
				yym2112 := z.DecBinary()
				_ = yym2112
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2111), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2115 := z.DecBinary()
				_ = yym2115
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2117 := z.DecBinary()
				_ = yym2117
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2119 := &x.NodeSelector
				yym2120 := z.DecBinary()
				_ = yym2120
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2119, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2128 := &x.ImagePullSecrets
				yym2129 := z.DecBinary()
				_ = yym2129
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2128), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2108)
		} // end switch yys2108
	} // end for yyj2108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2132 int
	var yyb2132 bool
	var yyhl2132 bool = l >= 0
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2133 := &x.Volumes
		yym2134 := z.DecBinary()
		_ = yym2134
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2133), d)
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2135 := &x.Containers
		yym2136 := z.DecBinary()
		_ = yym2136
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2135), d)
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2139 := z.DecBinary()
		_ = yym2139
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2141 := z.DecBinary()
		_ = yym2141
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2143 := &x.NodeSelector
		yym2144 := z.DecBinary()
		_ = yym2144
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2143, false, d)
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2152 := &x.ImagePullSecrets
		yym2153 := z.DecBinary()
		_ = yym2153
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2152), d)
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2132++
		if yyhl2132 {
			yyb2132 = yyj2132 > l
		} else {
			yyb2132 = r.CheckBreak()
		}
		if yyb2132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2156 := z.EncBinary()
		_ = yym2156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2157 := !z.EncBinary()
			yy2arr2157 := z.EncBasicHandle().StructToArray
			var yyq2157 [5]bool
			_, _, _ = yysep2157, yyq2157, yy2arr2157
			const yyr2157 bool = false
			yyq2157[0] = x.SELinuxOptions != nil
			yyq2157[1] = x.RunAsUser != nil
			yyq2157[2] = x.RunAsNonRoot != nil
			yyq2157[3] = len(x.SupplementalGroups) != 0
			yyq2157[4] = x.FSGroup != nil
			var yynn2157 int
			if yyr2157 || yy2arr2157 {
				r.EncodeArrayStart(5)
			} else {
				yynn2157 = 0
				for _, b := range yyq2157 {
					if b {
						yynn2157++
					}
				}
				r.EncodeMapStart(yynn2157)
				yynn2157 = 0
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2157[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2157[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2157[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2160 := *x.RunAsUser
						yym2161 := z.EncBinary()
						_ = yym2161
						if false {
						} else {
							r.EncodeInt(int64(yy2160))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2157[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2162 := *x.RunAsUser
						yym2163 := z.EncBinary()
						_ = yym2163
						if false {
						} else {
							r.EncodeInt(int64(yy2162))
						}
					}
				}
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2157[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2165 := *x.RunAsNonRoot
						yym2166 := z.EncBinary()
						_ = yym2166
						if false {
						} else {
							r.EncodeBool(bool(yy2165))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2157[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2167 := *x.RunAsNonRoot
						yym2168 := z.EncBinary()
						_ = yym2168
						if false {
						} else {
							r.EncodeBool(bool(yy2167))
						}
					}
				}
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2157[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2170 := z.EncBinary()
						_ = yym2170
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2157[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2171 := z.EncBinary()
						_ = yym2171
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2157[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2173 := *x.FSGroup
						yym2174 := z.EncBinary()
						_ = yym2174
						if false {
						} else {
							r.EncodeInt(int64(yy2173))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2157[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2175 := *x.FSGroup
						yym2176 := z.EncBinary()
						_ = yym2176
						if false {
						} else {
							r.EncodeInt(int64(yy2175))
						}
					}
				}
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2177 := z.DecBinary()
	_ = yym2177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2178 := r.ContainerType()
		if yyct2178 == codecSelferValueTypeMap1234 {
			yyl2178 := r.ReadMapStart()
			if yyl2178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2178, d)
			}
		} else if yyct2178 == codecSelferValueTypeArray1234 {
			yyl2178 := r.ReadArrayStart()
			if yyl2178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2179Slc
	var yyhl2179 bool = l >= 0
	for yyj2179 := 0; ; yyj2179++ {
		if yyhl2179 {
			if yyj2179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2179Slc = r.DecodeBytes(yys2179Slc, true, true)
		yys2179 := string(yys2179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2179 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2182 := z.DecBinary()
				_ = yym2182
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2184 := z.DecBinary()
				_ = yym2184
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2185 := &x.SupplementalGroups
				yym2186 := z.DecBinary()
				_ = yym2186
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2185, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2188 := z.DecBinary()
				_ = yym2188
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2179)
		} // end switch yys2179
	} // end for yyj2179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2189 int
	var yyb2189 bool
	var yyhl2189 bool = l >= 0
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2192 := z.DecBinary()
		_ = yym2192
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2194 := z.DecBinary()
		_ = yym2194
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2195 := &x.SupplementalGroups
		yym2196 := z.DecBinary()
		_ = yym2196
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2195, false, d)
		}
	}
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2198 := z.DecBinary()
		_ = yym2198
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2189++
		if yyhl2189 {
			yyb2189 = yyj2189 > l
		} else {
			yyb2189 = r.CheckBreak()
		}
		if yyb2189 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2189-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodQOSClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2199 := z.EncBinary()
	_ = yym2199
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodQOSClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2200 := z.DecBinary()
	_ = yym2200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2201 := z.EncBinary()
		_ = yym2201
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2202 := !z.EncBinary()
			yy2arr2202 := z.EncBasicHandle().StructToArray
			var yyq2202 [9]bool
			_, _, _ = yysep2202, yyq2202, yy2arr2202
			const yyr2202 bool = false
			yyq2202[0] = x.Phase != ""
			yyq2202[1] = len(x.Conditions) != 0
			yyq2202[2] = x.Message != ""
			yyq2202[3] = x.Reason != ""
			yyq2202[4] = x.HostIP != ""
			yyq2202[5] = x.PodIP != ""
			yyq2202[6] = x.StartTime != nil
			yyq2202[7] = len(x.ContainerStatuses) != 0
			yyq2202[8] = x.QOSClass != ""
			var yynn2202 int
			if yyr2202 || yy2arr2202 {
				r.EncodeArrayStart(9)
			} else {
				yynn2202 = 0
				for _, b := range yyq2202 {
					if b {
						yynn2202++
					}
				}
				r.EncodeMapStart(yynn2202)
				yynn2202 = 0
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2202[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2205 := z.EncBinary()
						_ = yym2205
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2202[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2206 := z.EncBinary()
						_ = yym2206
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[2] {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2202[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[3] {
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2202[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[4] {
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2202[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[5] {
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2202[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2220 := z.EncBinary()
						_ = yym2220
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2220 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2220 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2202[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2221 := z.EncBinary()
						_ = yym2221
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2221 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2221 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2223 := z.EncBinary()
						_ = yym2223
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2202[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2224 := z.EncBinary()
						_ = yym2224
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2202[8] {
					x.QOSClass.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2202[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("qosClass"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.QOSClass.CodecEncodeSelf(e)
				}
			}
			if yyr2202 || yy2arr2202 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2226 := z.DecBinary()
	_ = yym2226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2227 := r.ContainerType()
		if yyct2227 == codecSelferValueTypeMap1234 {
			yyl2227 := r.ReadMapStart()
			if yyl2227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2227, d)
			}
		} else if yyct2227 == codecSelferValueTypeArray1234 {
			yyl2227 := r.ReadArrayStart()
			if yyl2227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2228Slc
	var yyhl2228 bool = l >= 0
	for yyj2228 := 0; ; yyj2228++ {
		if yyhl2228 {
			if yyj2228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2228Slc = r.DecodeBytes(yys2228Slc, true, true)
		yys2228 := string(yys2228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2228 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2230 := &x.Conditions
				yym2231 := z.DecBinary()
				_ = yym2231
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2230), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_v1.Time)
				}
				yym2237 := z.DecBinary()
				_ = yym2237
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2237 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2237 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2238 := &x.ContainerStatuses
				yym2239 := z.DecBinary()
				_ = yym2239
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2238), d)
				}
			}
		case "qosClass":
			if r.TryDecodeAsNil() {
				x.QOSClass = ""
			} else {
				x.QOSClass = PodQOSClass(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2228)
		} // end switch yys2228
	} // end for yyj2228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2241 int
	var yyb2241 bool
	var yyhl2241 bool = l >= 0
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2243 := &x.Conditions
		yym2244 := z.DecBinary()
		_ = yym2244
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2243), d)
		}
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_v1.Time)
		}
		yym2250 := z.DecBinary()
		_ = yym2250
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2250 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2250 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2251 := &x.ContainerStatuses
		yym2252 := z.DecBinary()
		_ = yym2252
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2251), d)
		}
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.QOSClass = ""
	} else {
		x.QOSClass = PodQOSClass(r.DecodeString())
	}
	for {
		yyj2241++
		if yyhl2241 {
			yyb2241 = yyj2241 > l
		} else {
			yyb2241 = r.CheckBreak()
		}
		if yyb2241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2254 := z.EncBinary()
		_ = yym2254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2255 := !z.EncBinary()
			yy2arr2255 := z.EncBasicHandle().StructToArray
			var yyq2255 [4]bool
			_, _, _ = yysep2255, yyq2255, yy2arr2255
			const yyr2255 bool = false
			yyq2255[0] = x.Kind != ""
			yyq2255[1] = x.APIVersion != ""
			yyq2255[2] = true
			yyq2255[3] = true
			var yynn2255 int
			if yyr2255 || yy2arr2255 {
				r.EncodeArrayStart(4)
			} else {
				yynn2255 = 0
				for _, b := range yyq2255 {
					if b {
						yynn2255++
					}
				}
				r.EncodeMapStart(yynn2255)
				yynn2255 = 0
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[0] {
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[1] {
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[2] {
					yy2263 := &x.ObjectMeta
					yy2263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2264 := &x.ObjectMeta
					yy2264.CodecEncodeSelf(e)
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2255[3] {
					yy2266 := &x.Status
					yy2266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2255[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2267 := &x.Status
					yy2267.CodecEncodeSelf(e)
				}
			}
			if yyr2255 || yy2arr2255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2268 := z.DecBinary()
	_ = yym2268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2269 := r.ContainerType()
		if yyct2269 == codecSelferValueTypeMap1234 {
			yyl2269 := r.ReadMapStart()
			if yyl2269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2269, d)
			}
		} else if yyct2269 == codecSelferValueTypeArray1234 {
			yyl2269 := r.ReadArrayStart()
			if yyl2269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2270Slc
	var yyhl2270 bool = l >= 0
	for yyj2270 := 0; ; yyj2270++ {
		if yyhl2270 {
			if yyj2270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2270Slc = r.DecodeBytes(yys2270Slc, true, true)
		yys2270 := string(yys2270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2270 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2273 := &x.ObjectMeta
				yyv2273.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2274 := &x.Status
				yyv2274.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2270)
		} // end switch yys2270
	} // end for yyj2270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2275 int
	var yyb2275 bool
	var yyhl2275 bool = l >= 0
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2278 := &x.ObjectMeta
		yyv2278.CodecDecodeSelf(d)
	}
	yyj2275++
	if yyhl2275 {
		yyb2275 = yyj2275 > l
	} else {
		yyb2275 = r.CheckBreak()
	}
	if yyb2275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2279 := &x.Status
		yyv2279.CodecDecodeSelf(d)
	}
	for {
		yyj2275++
		if yyhl2275 {
			yyb2275 = yyj2275 > l
		} else {
			yyb2275 = r.CheckBreak()
		}
		if yyb2275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2280 := z.EncBinary()
		_ = yym2280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2281 := !z.EncBinary()
			yy2arr2281 := z.EncBasicHandle().StructToArray
			var yyq2281 [5]bool
			_, _, _ = yysep2281, yyq2281, yy2arr2281
			const yyr2281 bool = false
			yyq2281[0] = x.Kind != ""
			yyq2281[1] = x.APIVersion != ""
			yyq2281[2] = true
			yyq2281[3] = true
			yyq2281[4] = true
			var yynn2281 int
			if yyr2281 || yy2arr2281 {
				r.EncodeArrayStart(5)
			} else {
				yynn2281 = 0
				for _, b := range yyq2281 {
					if b {
						yynn2281++
					}
				}
				r.EncodeMapStart(yynn2281)
				yynn2281 = 0
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[0] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[1] {
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[2] {
					yy2289 := &x.ObjectMeta
					yy2289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2290 := &x.ObjectMeta
					yy2290.CodecEncodeSelf(e)
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[3] {
					yy2292 := &x.Spec
					yy2292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2293 := &x.Spec
					yy2293.CodecEncodeSelf(e)
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2281[4] {
					yy2295 := &x.Status
					yy2295.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2281[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2296 := &x.Status
					yy2296.CodecEncodeSelf(e)
				}
			}
			if yyr2281 || yy2arr2281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2297 := z.DecBinary()
	_ = yym2297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2298 := r.ContainerType()
		if yyct2298 == codecSelferValueTypeMap1234 {
			yyl2298 := r.ReadMapStart()
			if yyl2298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2298, d)
			}
		} else if yyct2298 == codecSelferValueTypeArray1234 {
			yyl2298 := r.ReadArrayStart()
			if yyl2298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2299Slc
	var yyhl2299 bool = l >= 0
	for yyj2299 := 0; ; yyj2299++ {
		if yyhl2299 {
			if yyj2299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2299Slc = r.DecodeBytes(yys2299Slc, true, true)
		yys2299 := string(yys2299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2299 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2302 := &x.ObjectMeta
				yyv2302.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2303 := &x.Spec
				yyv2303.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2304 := &x.Status
				yyv2304.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2299)
		} // end switch yys2299
	} // end for yyj2299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2305 int
	var yyb2305 bool
	var yyhl2305 bool = l >= 0
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2308 := &x.ObjectMeta
		yyv2308.CodecDecodeSelf(d)
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2309 := &x.Spec
		yyv2309.CodecDecodeSelf(d)
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2310 := &x.Status
		yyv2310.CodecDecodeSelf(d)
	}
	for {
		yyj2305++
		if yyhl2305 {
			yyb2305 = yyj2305 > l
		} else {
			yyb2305 = r.CheckBreak()
		}
		if yyb2305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2311 := z.EncBinary()
		_ = yym2311
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2312 := !z.EncBinary()
			yy2arr2312 := z.EncBasicHandle().StructToArray
			var yyq2312 [4]bool
			_, _, _ = yysep2312, yyq2312, yy2arr2312
			const yyr2312 bool = false
			yyq2312[0] = x.Kind != ""
			yyq2312[1] = x.APIVersion != ""
			yyq2312[2] = true
			var yynn2312 int
			if yyr2312 || yy2arr2312 {
				r.EncodeArrayStart(4)
			} else {
				yynn2312 = 1
				for _, b := range yyq2312 {
					if b {
						yynn2312++
					}
				}
				r.EncodeMapStart(yynn2312)
				yynn2312 = 0
			}
			if yyr2312 || yy2arr2312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2312[0] {
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2312[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2312 || yy2arr2312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2312[1] {
					yym2317 := z.EncBinary()
					_ = yym2317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2312[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2312 || yy2arr2312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2312[2] {
					yy2320 := &x.ListMeta
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2320) {
					} else {
						z.EncFallback(yy2320)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2312[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2322 := &x.ListMeta
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2322) {
					} else {
						z.EncFallback(yy2322)
					}
				}
			}
			if yyr2312 || yy2arr2312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2312 || yy2arr2312 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2327 := z.DecBinary()
	_ = yym2327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2328 := r.ContainerType()
		if yyct2328 == codecSelferValueTypeMap1234 {
			yyl2328 := r.ReadMapStart()
			if yyl2328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2328, d)
			}
		} else if yyct2328 == codecSelferValueTypeArray1234 {
			yyl2328 := r.ReadArrayStart()
			if yyl2328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2329Slc
	var yyhl2329 bool = l >= 0
	for yyj2329 := 0; ; yyj2329++ {
		if yyhl2329 {
			if yyj2329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2329Slc = r.DecodeBytes(yys2329Slc, true, true)
		yys2329 := string(yys2329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2332 := &x.ListMeta
				yym2333 := z.DecBinary()
				_ = yym2333
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2332) {
				} else {
					z.DecFallback(yyv2332, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2334 := &x.Items
				yym2335 := z.DecBinary()
				_ = yym2335
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2334), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2329)
		} // end switch yys2329
	} // end for yyj2329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2336 int
	var yyb2336 bool
	var yyhl2336 bool = l >= 0
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2339 := &x.ListMeta
		yym2340 := z.DecBinary()
		_ = yym2340
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2339) {
		} else {
			z.DecFallback(yyv2339, false)
		}
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2341 := &x.Items
		yym2342 := z.DecBinary()
		_ = yym2342
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2341), d)
		}
	}
	for {
		yyj2336++
		if yyhl2336 {
			yyb2336 = yyj2336 > l
		} else {
			yyb2336 = r.CheckBreak()
		}
		if yyb2336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2343 := z.EncBinary()
		_ = yym2343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2344 := !z.EncBinary()
			yy2arr2344 := z.EncBasicHandle().StructToArray
			var yyq2344 [2]bool
			_, _, _ = yysep2344, yyq2344, yy2arr2344
			const yyr2344 bool = false
			yyq2344[0] = true
			yyq2344[1] = true
			var yynn2344 int
			if yyr2344 || yy2arr2344 {
				r.EncodeArrayStart(2)
			} else {
				yynn2344 = 0
				for _, b := range yyq2344 {
					if b {
						yynn2344++
					}
				}
				r.EncodeMapStart(yynn2344)
				yynn2344 = 0
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2344[0] {
					yy2346 := &x.ObjectMeta
					yy2346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2347 := &x.ObjectMeta
					yy2347.CodecEncodeSelf(e)
				}
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2344[1] {
					yy2349 := &x.Spec
					yy2349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2344[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2350 := &x.Spec
					yy2350.CodecEncodeSelf(e)
				}
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2351 := z.DecBinary()
	_ = yym2351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2352 := r.ContainerType()
		if yyct2352 == codecSelferValueTypeMap1234 {
			yyl2352 := r.ReadMapStart()
			if yyl2352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2352, d)
			}
		} else if yyct2352 == codecSelferValueTypeArray1234 {
			yyl2352 := r.ReadArrayStart()
			if yyl2352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2353Slc
	var yyhl2353 bool = l >= 0
	for yyj2353 := 0; ; yyj2353++ {
		if yyhl2353 {
			if yyj2353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2353Slc = r.DecodeBytes(yys2353Slc, true, true)
		yys2353 := string(yys2353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2353 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2354 := &x.ObjectMeta
				yyv2354.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2355 := &x.Spec
				yyv2355.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2353)
		} // end switch yys2353
	} // end for yyj2353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2356 int
	var yyb2356 bool
	var yyhl2356 bool = l >= 0
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2357 := &x.ObjectMeta
		yyv2357.CodecDecodeSelf(d)
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2358 := &x.Spec
		yyv2358.CodecDecodeSelf(d)
	}
	for {
		yyj2356++
		if yyhl2356 {
			yyb2356 = yyj2356 > l
		} else {
			yyb2356 = r.CheckBreak()
		}
		if yyb2356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2359 := z.EncBinary()
		_ = yym2359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2360 := !z.EncBinary()
			yy2arr2360 := z.EncBasicHandle().StructToArray
			var yyq2360 [4]bool
			_, _, _ = yysep2360, yyq2360, yy2arr2360
			const yyr2360 bool = false
			yyq2360[0] = x.Kind != ""
			yyq2360[1] = x.APIVersion != ""
			yyq2360[2] = true
			yyq2360[3] = true
			var yynn2360 int
			if yyr2360 || yy2arr2360 {
				r.EncodeArrayStart(4)
			} else {
				yynn2360 = 0
				for _, b := range yyq2360 {
					if b {
						yynn2360++
					}
				}
				r.EncodeMapStart(yynn2360)
				yynn2360 = 0
			}
			if yyr2360 || yy2arr2360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2360[0] {
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2360 || yy2arr2360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2360[1] {
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2360 || yy2arr2360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2360[2] {
					yy2368 := &x.ObjectMeta
					yy2368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2369 := &x.ObjectMeta
					yy2369.CodecEncodeSelf(e)
				}
			}
			if yyr2360 || yy2arr2360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2360[3] {
					yy2371 := &x.Template
					yy2371.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2372 := &x.Template
					yy2372.CodecEncodeSelf(e)
				}
			}
			if yyr2360 || yy2arr2360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2373 := z.DecBinary()
	_ = yym2373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2374 := r.ContainerType()
		if yyct2374 == codecSelferValueTypeMap1234 {
			yyl2374 := r.ReadMapStart()
			if yyl2374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2374, d)
			}
		} else if yyct2374 == codecSelferValueTypeArray1234 {
			yyl2374 := r.ReadArrayStart()
			if yyl2374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2375Slc
	var yyhl2375 bool = l >= 0
	for yyj2375 := 0; ; yyj2375++ {
		if yyhl2375 {
			if yyj2375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2375Slc = r.DecodeBytes(yys2375Slc, true, true)
		yys2375 := string(yys2375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2378 := &x.ObjectMeta
				yyv2378.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2379 := &x.Template
				yyv2379.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2375)
		} // end switch yys2375
	} // end for yyj2375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2380 int
	var yyb2380 bool
	var yyhl2380 bool = l >= 0
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2383 := &x.ObjectMeta
		yyv2383.CodecDecodeSelf(d)
	}
	yyj2380++
	if yyhl2380 {
		yyb2380 = yyj2380 > l
	} else {
		yyb2380 = r.CheckBreak()
	}
	if yyb2380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2384 := &x.Template
		yyv2384.CodecDecodeSelf(d)
	}
	for {
		yyj2380++
		if yyhl2380 {
			yyb2380 = yyj2380 > l
		} else {
			yyb2380 = r.CheckBreak()
		}
		if yyb2380 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2380-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2385 := z.EncBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2386 := !z.EncBinary()
			yy2arr2386 := z.EncBasicHandle().StructToArray
			var yyq2386 [4]bool
			_, _, _ = yysep2386, yyq2386, yy2arr2386
			const yyr2386 bool = false
			yyq2386[0] = x.Kind != ""
			yyq2386[1] = x.APIVersion != ""
			yyq2386[2] = true
			var yynn2386 int
			if yyr2386 || yy2arr2386 {
				r.EncodeArrayStart(4)
			} else {
				yynn2386 = 1
				for _, b := range yyq2386 {
					if b {
						yynn2386++
					}
				}
				r.EncodeMapStart(yynn2386)
				yynn2386 = 0
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[0] {
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[1] {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[2] {
					yy2394 := &x.ListMeta
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2394) {
					} else {
						z.EncFallback(yy2394)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2396 := &x.ListMeta
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2396) {
					} else {
						z.EncFallback(yy2396)
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2401 := z.DecBinary()
	_ = yym2401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2402 := r.ContainerType()
		if yyct2402 == codecSelferValueTypeMap1234 {
			yyl2402 := r.ReadMapStart()
			if yyl2402 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2402, d)
			}
		} else if yyct2402 == codecSelferValueTypeArray1234 {
			yyl2402 := r.ReadArrayStart()
			if yyl2402 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2403Slc
	var yyhl2403 bool = l >= 0
	for yyj2403 := 0; ; yyj2403++ {
		if yyhl2403 {
			if yyj2403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2403Slc = r.DecodeBytes(yys2403Slc, true, true)
		yys2403 := string(yys2403Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2406 := &x.ListMeta
				yym2407 := z.DecBinary()
				_ = yym2407
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2406) {
				} else {
					z.DecFallback(yyv2406, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2408 := &x.Items
				yym2409 := z.DecBinary()
				_ = yym2409
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2408), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2403)
		} // end switch yys2403
	} // end for yyj2403
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2410 int
	var yyb2410 bool
	var yyhl2410 bool = l >= 0
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2413 := &x.ListMeta
		yym2414 := z.DecBinary()
		_ = yym2414
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2413) {
		} else {
			z.DecFallback(yyv2413, false)
		}
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2415 := &x.Items
		yym2416 := z.DecBinary()
		_ = yym2416
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2415), d)
		}
	}
	for {
		yyj2410++
		if yyhl2410 {
			yyb2410 = yyj2410 > l
		} else {
			yyb2410 = r.CheckBreak()
		}
		if yyb2410 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2410-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2417 := z.EncBinary()
		_ = yym2417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2418 := !z.EncBinary()
			yy2arr2418 := z.EncBasicHandle().StructToArray
			var yyq2418 [4]bool
			_, _, _ = yysep2418, yyq2418, yy2arr2418
			const yyr2418 bool = false
			yyq2418[0] = x.Replicas != nil
			yyq2418[1] = x.MinReadySeconds != 0
			yyq2418[2] = len(x.Selector) != 0
			yyq2418[3] = x.Template != nil
			var yynn2418 int
			if yyr2418 || yy2arr2418 {
				r.EncodeArrayStart(4)
			} else {
				yynn2418 = 0
				for _, b := range yyq2418 {
					if b {
						yynn2418++
					}
				}
				r.EncodeMapStart(yynn2418)
				yynn2418 = 0
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2420 := *x.Replicas
						yym2421 := z.EncBinary()
						_ = yym2421
						if false {
						} else {
							r.EncodeInt(int64(yy2420))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2422 := *x.Replicas
						yym2423 := z.EncBinary()
						_ = yym2423
						if false {
						} else {
							r.EncodeInt(int64(yy2422))
						}
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[1] {
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2428 := z.EncBinary()
						_ = yym2428
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2429 := z.EncBinary()
						_ = yym2429
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2431 := z.DecBinary()
	_ = yym2431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2432 := r.ContainerType()
		if yyct2432 == codecSelferValueTypeMap1234 {
			yyl2432 := r.ReadMapStart()
			if yyl2432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2432, d)
			}
		} else if yyct2432 == codecSelferValueTypeArray1234 {
			yyl2432 := r.ReadArrayStart()
			if yyl2432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2433Slc
	var yyhl2433 bool = l >= 0
	for yyj2433 := 0; ; yyj2433++ {
		if yyhl2433 {
			if yyj2433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2433Slc = r.DecodeBytes(yys2433Slc, true, true)
		yys2433 := string(yys2433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2433 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2435 := z.DecBinary()
				_ = yym2435
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2437 := &x.Selector
				yym2438 := z.DecBinary()
				_ = yym2438
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2437, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2433)
		} // end switch yys2433
	} // end for yyj2433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2440 int
	var yyb2440 bool
	var yyhl2440 bool = l >= 0
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2442 := z.DecBinary()
		_ = yym2442
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2444 := &x.Selector
		yym2445 := z.DecBinary()
		_ = yym2445
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2444, false, d)
		}
	}
	yyj2440++
	if yyhl2440 {
		yyb2440 = yyj2440 > l
	} else {
		yyb2440 = r.CheckBreak()
	}
	if yyb2440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2440++
		if yyhl2440 {
			yyb2440 = yyj2440 > l
		} else {
			yyb2440 = r.CheckBreak()
		}
		if yyb2440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2447 := z.EncBinary()
		_ = yym2447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2448 := !z.EncBinary()
			yy2arr2448 := z.EncBasicHandle().StructToArray
			var yyq2448 [6]bool
			_, _, _ = yysep2448, yyq2448, yy2arr2448
			const yyr2448 bool = false
			yyq2448[1] = x.FullyLabeledReplicas != 0
			yyq2448[2] = x.ReadyReplicas != 0
			yyq2448[3] = x.AvailableReplicas != 0
			yyq2448[4] = x.ObservedGeneration != 0
			yyq2448[5] = len(x.Conditions) != 0
			var yynn2448 int
			if yyr2448 || yy2arr2448 {
				r.EncodeArrayStart(6)
			} else {
				yynn2448 = 1
				for _, b := range yyq2448 {
					if b {
						yynn2448++
					}
				}
				r.EncodeMapStart(yynn2448)
				yynn2448 = 0
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2450 := z.EncBinary()
				_ = yym2450
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2451 := z.EncBinary()
				_ = yym2451
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[1] {
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2454 := z.EncBinary()
					_ = yym2454
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[2] {
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[3] {
					yym2459 := z.EncBinary()
					_ = yym2459
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[4] {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2448[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2448[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2465 := z.EncBinary()
						_ = yym2465
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2448[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2466 := z.EncBinary()
						_ = yym2466
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2448 || yy2arr2448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2467 := z.DecBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2468 := r.ContainerType()
		if yyct2468 == codecSelferValueTypeMap1234 {
			yyl2468 := r.ReadMapStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2468, d)
			}
		} else if yyct2468 == codecSelferValueTypeArray1234 {
			yyl2468 := r.ReadArrayStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2469Slc
	var yyhl2469 bool = l >= 0
	for yyj2469 := 0; ; yyj2469++ {
		if yyhl2469 {
			if yyj2469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2469Slc = r.DecodeBytes(yys2469Slc, true, true)
		yys2469 := string(yys2469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2469 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2475 := &x.Conditions
				yym2476 := z.DecBinary()
				_ = yym2476
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2475), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2469)
		} // end switch yys2469
	} // end for yyj2469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2477 int
	var yyb2477 bool
	var yyhl2477 bool = l >= 0
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2483 := &x.Conditions
		yym2484 := z.DecBinary()
		_ = yym2484
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2483), d)
		}
	}
	for {
		yyj2477++
		if yyhl2477 {
			yyb2477 = yyj2477 > l
		} else {
			yyb2477 = r.CheckBreak()
		}
		if yyb2477 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2477-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2485 := z.EncBinary()
	_ = yym2485
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2486 := z.DecBinary()
	_ = yym2486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2487 := z.EncBinary()
		_ = yym2487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2488 := !z.EncBinary()
			yy2arr2488 := z.EncBasicHandle().StructToArray
			var yyq2488 [5]bool
			_, _, _ = yysep2488, yyq2488, yy2arr2488
			const yyr2488 bool = false
			yyq2488[2] = true
			yyq2488[3] = x.Reason != ""
			yyq2488[4] = x.Message != ""
			var yynn2488 int
			if yyr2488 || yy2arr2488 {
				r.EncodeArrayStart(5)
			} else {
				yynn2488 = 2
				for _, b := range yyq2488 {
					if b {
						yynn2488++
					}
				}
				r.EncodeMapStart(yynn2488)
				yynn2488 = 0
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[2] {
					yy2492 := &x.LastTransitionTime
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2492) {
					} else if yym2493 {
						z.EncBinaryMarshal(yy2492)
					} else if !yym2493 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2492)
					} else {
						z.EncFallback(yy2492)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2494 := &x.LastTransitionTime
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2494) {
					} else if yym2495 {
						z.EncBinaryMarshal(yy2494)
					} else if !yym2495 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2494)
					} else {
						z.EncFallback(yy2494)
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[3] {
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2488[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2488[4] {
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2488[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2488 || yy2arr2488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2502 := z.DecBinary()
	_ = yym2502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2503 := r.ContainerType()
		if yyct2503 == codecSelferValueTypeMap1234 {
			yyl2503 := r.ReadMapStart()
			if yyl2503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2503, d)
			}
		} else if yyct2503 == codecSelferValueTypeArray1234 {
			yyl2503 := r.ReadArrayStart()
			if yyl2503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2504Slc
	var yyhl2504 bool = l >= 0
	for yyj2504 := 0; ; yyj2504++ {
		if yyhl2504 {
			if yyj2504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2504Slc = r.DecodeBytes(yys2504Slc, true, true)
		yys2504 := string(yys2504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2504 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv2507 := &x.LastTransitionTime
				yym2508 := z.DecBinary()
				_ = yym2508
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2507) {
				} else if yym2508 {
					z.DecBinaryUnmarshal(yyv2507)
				} else if !yym2508 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2507)
				} else {
					z.DecFallback(yyv2507, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2504)
		} // end switch yys2504
	} // end for yyj2504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2511 int
	var yyb2511 bool
	var yyhl2511 bool = l >= 0
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv2514 := &x.LastTransitionTime
		yym2515 := z.DecBinary()
		_ = yym2515
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2514) {
		} else if yym2515 {
			z.DecBinaryUnmarshal(yyv2514)
		} else if !yym2515 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2514)
		} else {
			z.DecFallback(yyv2514, false)
		}
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2511++
		if yyhl2511 {
			yyb2511 = yyj2511 > l
		} else {
			yyb2511 = r.CheckBreak()
		}
		if yyb2511 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2511-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2518 := z.EncBinary()
		_ = yym2518
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2519 := !z.EncBinary()
			yy2arr2519 := z.EncBasicHandle().StructToArray
			var yyq2519 [5]bool
			_, _, _ = yysep2519, yyq2519, yy2arr2519
			const yyr2519 bool = false
			yyq2519[0] = x.Kind != ""
			yyq2519[1] = x.APIVersion != ""
			yyq2519[2] = true
			yyq2519[3] = true
			yyq2519[4] = true
			var yynn2519 int
			if yyr2519 || yy2arr2519 {
				r.EncodeArrayStart(5)
			} else {
				yynn2519 = 0
				for _, b := range yyq2519 {
					if b {
						yynn2519++
					}
				}
				r.EncodeMapStart(yynn2519)
				yynn2519 = 0
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[0] {
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2519[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[1] {
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2519[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[2] {
					yy2527 := &x.ObjectMeta
					yy2527.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2519[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2528 := &x.ObjectMeta
					yy2528.CodecEncodeSelf(e)
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[3] {
					yy2530 := &x.Spec
					yy2530.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2519[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2531 := &x.Spec
					yy2531.CodecEncodeSelf(e)
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2519[4] {
					yy2533 := &x.Status
					yy2533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2519[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2534 := &x.Status
					yy2534.CodecEncodeSelf(e)
				}
			}
			if yyr2519 || yy2arr2519 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2535 := z.DecBinary()
	_ = yym2535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2536 := r.ContainerType()
		if yyct2536 == codecSelferValueTypeMap1234 {
			yyl2536 := r.ReadMapStart()
			if yyl2536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2536, d)
			}
		} else if yyct2536 == codecSelferValueTypeArray1234 {
			yyl2536 := r.ReadArrayStart()
			if yyl2536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2537Slc
	var yyhl2537 bool = l >= 0
	for yyj2537 := 0; ; yyj2537++ {
		if yyhl2537 {
			if yyj2537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2537Slc = r.DecodeBytes(yys2537Slc, true, true)
		yys2537 := string(yys2537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2537 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2540 := &x.ObjectMeta
				yyv2540.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2541 := &x.Spec
				yyv2541.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2542 := &x.Status
				yyv2542.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2537)
		} // end switch yys2537
	} // end for yyj2537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2543 int
	var yyb2543 bool
	var yyhl2543 bool = l >= 0
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2546 := &x.ObjectMeta
		yyv2546.CodecDecodeSelf(d)
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2547 := &x.Spec
		yyv2547.CodecDecodeSelf(d)
	}
	yyj2543++
	if yyhl2543 {
		yyb2543 = yyj2543 > l
	} else {
		yyb2543 = r.CheckBreak()
	}
	if yyb2543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2548 := &x.Status
		yyv2548.CodecDecodeSelf(d)
	}
	for {
		yyj2543++
		if yyhl2543 {
			yyb2543 = yyj2543 > l
		} else {
			yyb2543 = r.CheckBreak()
		}
		if yyb2543 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2543-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2549 := z.EncBinary()
		_ = yym2549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2550 := !z.EncBinary()
			yy2arr2550 := z.EncBasicHandle().StructToArray
			var yyq2550 [4]bool
			_, _, _ = yysep2550, yyq2550, yy2arr2550
			const yyr2550 bool = false
			yyq2550[0] = x.Kind != ""
			yyq2550[1] = x.APIVersion != ""
			yyq2550[2] = true
			var yynn2550 int
			if yyr2550 || yy2arr2550 {
				r.EncodeArrayStart(4)
			} else {
				yynn2550 = 1
				for _, b := range yyq2550 {
					if b {
						yynn2550++
					}
				}
				r.EncodeMapStart(yynn2550)
				yynn2550 = 0
			}
			if yyr2550 || yy2arr2550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2550[0] {
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2553 := z.EncBinary()
					_ = yym2553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2550 || yy2arr2550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2550[1] {
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2550 || yy2arr2550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2550[2] {
					yy2558 := &x.ListMeta
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2558) {
					} else {
						z.EncFallback(yy2558)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2560 := &x.ListMeta
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2560) {
					} else {
						z.EncFallback(yy2560)
					}
				}
			}
			if yyr2550 || yy2arr2550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2550 || yy2arr2550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2565 := z.DecBinary()
	_ = yym2565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2566 := r.ContainerType()
		if yyct2566 == codecSelferValueTypeMap1234 {
			yyl2566 := r.ReadMapStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2566, d)
			}
		} else if yyct2566 == codecSelferValueTypeArray1234 {
			yyl2566 := r.ReadArrayStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2567Slc
	var yyhl2567 bool = l >= 0
	for yyj2567 := 0; ; yyj2567++ {
		if yyhl2567 {
			if yyj2567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2567Slc = r.DecodeBytes(yys2567Slc, true, true)
		yys2567 := string(yys2567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2567 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2570 := &x.ListMeta
				yym2571 := z.DecBinary()
				_ = yym2571
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2570) {
				} else {
					z.DecFallback(yyv2570, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2572 := &x.Items
				yym2573 := z.DecBinary()
				_ = yym2573
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2572), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2567)
		} // end switch yys2567
	} // end for yyj2567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2574 int
	var yyb2574 bool
	var yyhl2574 bool = l >= 0
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2577 := &x.ListMeta
		yym2578 := z.DecBinary()
		_ = yym2578
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2577) {
		} else {
			z.DecFallback(yyv2577, false)
		}
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2579 := &x.Items
		yym2580 := z.DecBinary()
		_ = yym2580
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2579), d)
		}
	}
	for {
		yyj2574++
		if yyhl2574 {
			yyb2574 = yyj2574 > l
		} else {
			yyb2574 = r.CheckBreak()
		}
		if yyb2574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2581 := z.EncBinary()
	_ = yym2581
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2582 := z.DecBinary()
	_ = yym2582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2583 := z.EncBinary()
	_ = yym2583
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2584 := z.DecBinary()
	_ = yym2584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2585 := z.EncBinary()
		_ = yym2585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2586 := !z.EncBinary()
			yy2arr2586 := z.EncBasicHandle().StructToArray
			var yyq2586 [1]bool
			_, _, _ = yysep2586, yyq2586, yy2arr2586
			const yyr2586 bool = false
			yyq2586[0] = true
			var yynn2586 int
			if yyr2586 || yy2arr2586 {
				r.EncodeArrayStart(1)
			} else {
				yynn2586 = 0
				for _, b := range yyq2586 {
					if b {
						yynn2586++
					}
				}
				r.EncodeMapStart(yynn2586)
				yynn2586 = 0
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[0] {
					yy2588 := &x.LoadBalancer
					yy2588.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2589 := &x.LoadBalancer
					yy2589.CodecEncodeSelf(e)
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2590 := z.DecBinary()
	_ = yym2590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2591 := r.ContainerType()
		if yyct2591 == codecSelferValueTypeMap1234 {
			yyl2591 := r.ReadMapStart()
			if yyl2591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2591, d)
			}
		} else if yyct2591 == codecSelferValueTypeArray1234 {
			yyl2591 := r.ReadArrayStart()
			if yyl2591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2592Slc
	var yyhl2592 bool = l >= 0
	for yyj2592 := 0; ; yyj2592++ {
		if yyhl2592 {
			if yyj2592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2592Slc = r.DecodeBytes(yys2592Slc, true, true)
		yys2592 := string(yys2592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2592 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2593 := &x.LoadBalancer
				yyv2593.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2592)
		} // end switch yys2592
	} // end for yyj2592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2594 int
	var yyb2594 bool
	var yyhl2594 bool = l >= 0
	yyj2594++
	if yyhl2594 {
		yyb2594 = yyj2594 > l
	} else {
		yyb2594 = r.CheckBreak()
	}
	if yyb2594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2595 := &x.LoadBalancer
		yyv2595.CodecDecodeSelf(d)
	}
	for {
		yyj2594++
		if yyhl2594 {
			yyb2594 = yyj2594 > l
		} else {
			yyb2594 = r.CheckBreak()
		}
		if yyb2594 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2594-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2596 := z.EncBinary()
		_ = yym2596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2597 := !z.EncBinary()
			yy2arr2597 := z.EncBasicHandle().StructToArray
			var yyq2597 [1]bool
			_, _, _ = yysep2597, yyq2597, yy2arr2597
			const yyr2597 bool = false
			yyq2597[0] = len(x.Ingress) != 0
			var yynn2597 int
			if yyr2597 || yy2arr2597 {
				r.EncodeArrayStart(1)
			} else {
				yynn2597 = 0
				for _, b := range yyq2597 {
					if b {
						yynn2597++
					}
				}
				r.EncodeMapStart(yynn2597)
				yynn2597 = 0
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2597[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2599 := z.EncBinary()
						_ = yym2599
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2597[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2600 := z.EncBinary()
						_ = yym2600
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2597 || yy2arr2597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2601 := z.DecBinary()
	_ = yym2601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2602 := r.ContainerType()
		if yyct2602 == codecSelferValueTypeMap1234 {
			yyl2602 := r.ReadMapStart()
			if yyl2602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2602, d)
			}
		} else if yyct2602 == codecSelferValueTypeArray1234 {
			yyl2602 := r.ReadArrayStart()
			if yyl2602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2603Slc
	var yyhl2603 bool = l >= 0
	for yyj2603 := 0; ; yyj2603++ {
		if yyhl2603 {
			if yyj2603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2603Slc = r.DecodeBytes(yys2603Slc, true, true)
		yys2603 := string(yys2603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2603 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2604 := &x.Ingress
				yym2605 := z.DecBinary()
				_ = yym2605
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2604), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2603)
		} // end switch yys2603
	} // end for yyj2603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2606 int
	var yyb2606 bool
	var yyhl2606 bool = l >= 0
	yyj2606++
	if yyhl2606 {
		yyb2606 = yyj2606 > l
	} else {
		yyb2606 = r.CheckBreak()
	}
	if yyb2606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2607 := &x.Ingress
		yym2608 := z.DecBinary()
		_ = yym2608
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2607), d)
		}
	}
	for {
		yyj2606++
		if yyhl2606 {
			yyb2606 = yyj2606 > l
		} else {
			yyb2606 = r.CheckBreak()
		}
		if yyb2606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2609 := z.EncBinary()
		_ = yym2609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2610 := !z.EncBinary()
			yy2arr2610 := z.EncBasicHandle().StructToArray
			var yyq2610 [2]bool
			_, _, _ = yysep2610, yyq2610, yy2arr2610
			const yyr2610 bool = false
			yyq2610[0] = x.IP != ""
			yyq2610[1] = x.Hostname != ""
			var yynn2610 int
			if yyr2610 || yy2arr2610 {
				r.EncodeArrayStart(2)
			} else {
				yynn2610 = 0
				for _, b := range yyq2610 {
					if b {
						yynn2610++
					}
				}
				r.EncodeMapStart(yynn2610)
				yynn2610 = 0
			}
			if yyr2610 || yy2arr2610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2610[0] {
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2610[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2610[1] {
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2610[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2617 := z.DecBinary()
	_ = yym2617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2618 := r.ContainerType()
		if yyct2618 == codecSelferValueTypeMap1234 {
			yyl2618 := r.ReadMapStart()
			if yyl2618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2618, d)
			}
		} else if yyct2618 == codecSelferValueTypeArray1234 {
			yyl2618 := r.ReadArrayStart()
			if yyl2618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2619Slc
	var yyhl2619 bool = l >= 0
	for yyj2619 := 0; ; yyj2619++ {
		if yyhl2619 {
			if yyj2619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2619Slc = r.DecodeBytes(yys2619Slc, true, true)
		yys2619 := string(yys2619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2619 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2619)
		} // end switch yys2619
	} // end for yyj2619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2622 int
	var yyb2622 bool
	var yyhl2622 bool = l >= 0
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2622++
		if yyhl2622 {
			yyb2622 = yyj2622 > l
		} else {
			yyb2622 = r.CheckBreak()
		}
		if yyb2622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2625 := z.EncBinary()
		_ = yym2625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2626 := !z.EncBinary()
			yy2arr2626 := z.EncBasicHandle().StructToArray
			var yyq2626 [10]bool
			_, _, _ = yysep2626, yyq2626, yy2arr2626
			const yyr2626 bool = false
			yyq2626[0] = len(x.Ports) != 0
			yyq2626[1] = len(x.Selector) != 0
			yyq2626[2] = x.ClusterIP != ""
			yyq2626[3] = x.Type != ""
			yyq2626[4] = len(x.ExternalIPs) != 0
			yyq2626[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2626[6] = x.SessionAffinity != ""
			yyq2626[7] = x.LoadBalancerIP != ""
			yyq2626[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2626[9] = x.ExternalName != ""
			var yynn2626 int
			if yyr2626 || yy2arr2626 {
				r.EncodeArrayStart(10)
			} else {
				yynn2626 = 0
				for _, b := range yyq2626 {
					if b {
						yynn2626++
					}
				}
				r.EncodeMapStart(yynn2626)
				yynn2626 = 0
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2628 := z.EncBinary()
						_ = yym2628
						if false {
						} else {
							h.encSliceServicePort(([]ServicePort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2626[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2629 := z.EncBinary()
						_ = yym2629
						if false {
						} else {
							h.encSliceServicePort(([]ServicePort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2631 := z.EncBinary()
						_ = yym2631
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2626[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2632 := z.EncBinary()
						_ = yym2632
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[2] {
					yym2634 := z.EncBinary()
					_ = yym2634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2638 := z.EncBinary()
						_ = yym2638
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2626[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2639 := z.EncBinary()
						_ = yym2639
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2641 := z.EncBinary()
						_ = yym2641
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2626[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2642 := z.EncBinary()
						_ = yym2642
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[7] {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2648 := z.EncBinary()
						_ = yym2648
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2626[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2649 := z.EncBinary()
						_ = yym2649
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[9] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2653 := z.DecBinary()
	_ = yym2653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2654 := r.ContainerType()
		if yyct2654 == codecSelferValueTypeMap1234 {
			yyl2654 := r.ReadMapStart()
			if yyl2654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2654, d)
			}
		} else if yyct2654 == codecSelferValueTypeArray1234 {
			yyl2654 := r.ReadArrayStart()
			if yyl2654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2655Slc
	var yyhl2655 bool = l >= 0
	for yyj2655 := 0; ; yyj2655++ {
		if yyhl2655 {
			if yyj2655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2655Slc = r.DecodeBytes(yys2655Slc, true, true)
		yys2655 := string(yys2655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2655 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2656 := &x.Ports
				yym2657 := z.DecBinary()
				_ = yym2657
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2656), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2658 := &x.Selector
				yym2659 := z.DecBinary()
				_ = yym2659
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2658, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2662 := &x.ExternalIPs
				yym2663 := z.DecBinary()
				_ = yym2663
				if false {
				} else {
					z.F.DecSliceStringX(yyv2662, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2664 := &x.DeprecatedPublicIPs
				yym2665 := z.DecBinary()
				_ = yym2665
				if false {
				} else {
					z.F.DecSliceStringX(yyv2664, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2668 := &x.LoadBalancerSourceRanges
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					z.F.DecSliceStringX(yyv2668, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2655)
		} // end switch yys2655
	} // end for yyj2655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2671 int
	var yyb2671 bool
	var yyhl2671 bool = l >= 0
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2672 := &x.Ports
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2672), d)
		}
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2674 := &x.Selector
		yym2675 := z.DecBinary()
		_ = yym2675
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2674, false, d)
		}
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2678 := &x.ExternalIPs
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else {
			z.F.DecSliceStringX(yyv2678, false, d)
		}
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2680 := &x.DeprecatedPublicIPs
		yym2681 := z.DecBinary()
		_ = yym2681
		if false {
		} else {
			z.F.DecSliceStringX(yyv2680, false, d)
		}
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2684 := &x.LoadBalancerSourceRanges
		yym2685 := z.DecBinary()
		_ = yym2685
		if false {
		} else {
			z.F.DecSliceStringX(yyv2684, false, d)
		}
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2671++
		if yyhl2671 {
			yyb2671 = yyj2671 > l
		} else {
			yyb2671 = r.CheckBreak()
		}
		if yyb2671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2687 := z.EncBinary()
		_ = yym2687
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2688 := !z.EncBinary()
			yy2arr2688 := z.EncBasicHandle().StructToArray
			var yyq2688 [5]bool
			_, _, _ = yysep2688, yyq2688, yy2arr2688
			const yyr2688 bool = false
			yyq2688[0] = x.Name != ""
			yyq2688[1] = x.Protocol != ""
			yyq2688[3] = true
			yyq2688[4] = x.NodePort != 0
			var yynn2688 int
			if yyr2688 || yy2arr2688 {
				r.EncodeArrayStart(5)
			} else {
				yynn2688 = 1
				for _, b := range yyq2688 {
					if b {
						yynn2688++
					}
				}
				r.EncodeMapStart(yynn2688)
				yynn2688 = 0
			}
			if yyr2688 || yy2arr2688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2688[0] {
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2688[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2688 || yy2arr2688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2688[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2688[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2688 || yy2arr2688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2694 := z.EncBinary()
				_ = yym2694
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2695 := z.EncBinary()
				_ = yym2695
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2688 || yy2arr2688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2688[3] {
					yy2697 := &x.TargetPort
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2697) {
					} else if !yym2698 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2697)
					} else {
						z.EncFallback(yy2697)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2688[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2699 := &x.TargetPort
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2699) {
					} else if !yym2700 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2699)
					} else {
						z.EncFallback(yy2699)
					}
				}
			}
			if yyr2688 || yy2arr2688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2688[4] {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2688[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2688 || yy2arr2688 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2704 := z.DecBinary()
	_ = yym2704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2705 := r.ContainerType()
		if yyct2705 == codecSelferValueTypeMap1234 {
			yyl2705 := r.ReadMapStart()
			if yyl2705 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2705, d)
			}
		} else if yyct2705 == codecSelferValueTypeArray1234 {
			yyl2705 := r.ReadArrayStart()
			if yyl2705 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2706Slc
	var yyhl2706 bool = l >= 0
	for yyj2706 := 0; ; yyj2706++ {
		if yyhl2706 {
			if yyj2706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2706Slc = r.DecodeBytes(yys2706Slc, true, true)
		yys2706 := string(yys2706Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2706 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2710 := &x.TargetPort
				yym2711 := z.DecBinary()
				_ = yym2711
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2710) {
				} else if !yym2711 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2710)
				} else {
					z.DecFallback(yyv2710, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2706)
		} // end switch yys2706
	} // end for yyj2706
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2713 int
	var yyb2713 bool
	var yyhl2713 bool = l >= 0
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2717 := &x.TargetPort
		yym2718 := z.DecBinary()
		_ = yym2718
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2717) {
		} else if !yym2718 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2717)
		} else {
			z.DecFallback(yyv2717, false)
		}
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2713++
		if yyhl2713 {
			yyb2713 = yyj2713 > l
		} else {
			yyb2713 = r.CheckBreak()
		}
		if yyb2713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2720 := z.EncBinary()
		_ = yym2720
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2721 := !z.EncBinary()
			yy2arr2721 := z.EncBasicHandle().StructToArray
			var yyq2721 [5]bool
			_, _, _ = yysep2721, yyq2721, yy2arr2721
			const yyr2721 bool = false
			yyq2721[0] = x.Kind != ""
			yyq2721[1] = x.APIVersion != ""
			yyq2721[2] = true
			yyq2721[3] = true
			yyq2721[4] = true
			var yynn2721 int
			if yyr2721 || yy2arr2721 {
				r.EncodeArrayStart(5)
			} else {
				yynn2721 = 0
				for _, b := range yyq2721 {
					if b {
						yynn2721++
					}
				}
				r.EncodeMapStart(yynn2721)
				yynn2721 = 0
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[0] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2721[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[1] {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2721[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[2] {
					yy2729 := &x.ObjectMeta
					yy2729.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2721[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2730 := &x.ObjectMeta
					yy2730.CodecEncodeSelf(e)
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[3] {
					yy2732 := &x.Spec
					yy2732.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2721[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2733 := &x.Spec
					yy2733.CodecEncodeSelf(e)
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2721[4] {
					yy2735 := &x.Status
					yy2735.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2721[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2736 := &x.Status
					yy2736.CodecEncodeSelf(e)
				}
			}
			if yyr2721 || yy2arr2721 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2737 := z.DecBinary()
	_ = yym2737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2738 := r.ContainerType()
		if yyct2738 == codecSelferValueTypeMap1234 {
			yyl2738 := r.ReadMapStart()
			if yyl2738 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2738, d)
			}
		} else if yyct2738 == codecSelferValueTypeArray1234 {
			yyl2738 := r.ReadArrayStart()
			if yyl2738 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2739Slc
	var yyhl2739 bool = l >= 0
	for yyj2739 := 0; ; yyj2739++ {
		if yyhl2739 {
			if yyj2739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2739Slc = r.DecodeBytes(yys2739Slc, true, true)
		yys2739 := string(yys2739Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2739 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2742 := &x.ObjectMeta
				yyv2742.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2743 := &x.Spec
				yyv2743.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2744 := &x.Status
				yyv2744.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2739)
		} // end switch yys2739
	} // end for yyj2739
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2745 int
	var yyb2745 bool
	var yyhl2745 bool = l >= 0
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2748 := &x.ObjectMeta
		yyv2748.CodecDecodeSelf(d)
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2749 := &x.Spec
		yyv2749.CodecDecodeSelf(d)
	}
	yyj2745++
	if yyhl2745 {
		yyb2745 = yyj2745 > l
	} else {
		yyb2745 = r.CheckBreak()
	}
	if yyb2745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2750 := &x.Status
		yyv2750.CodecDecodeSelf(d)
	}
	for {
		yyj2745++
		if yyhl2745 {
			yyb2745 = yyj2745 > l
		} else {
			yyb2745 = r.CheckBreak()
		}
		if yyb2745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2751 := z.EncBinary()
		_ = yym2751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2752 := !z.EncBinary()
			yy2arr2752 := z.EncBasicHandle().StructToArray
			var yyq2752 [4]bool
			_, _, _ = yysep2752, yyq2752, yy2arr2752
			const yyr2752 bool = false
			yyq2752[0] = x.Kind != ""
			yyq2752[1] = x.APIVersion != ""
			yyq2752[2] = true
			var yynn2752 int
			if yyr2752 || yy2arr2752 {
				r.EncodeArrayStart(4)
			} else {
				yynn2752 = 1
				for _, b := range yyq2752 {
					if b {
						yynn2752++
					}
				}
				r.EncodeMapStart(yynn2752)
				yynn2752 = 0
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[0] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[1] {
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[2] {
					yy2760 := &x.ListMeta
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2760) {
					} else {
						z.EncFallback(yy2760)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2752[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2762 := &x.ListMeta
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2762) {
					} else {
						z.EncFallback(yy2762)
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2767 := z.DecBinary()
	_ = yym2767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2768 := r.ContainerType()
		if yyct2768 == codecSelferValueTypeMap1234 {
			yyl2768 := r.ReadMapStart()
			if yyl2768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2768, d)
			}
		} else if yyct2768 == codecSelferValueTypeArray1234 {
			yyl2768 := r.ReadArrayStart()
			if yyl2768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2769Slc
	var yyhl2769 bool = l >= 0
	for yyj2769 := 0; ; yyj2769++ {
		if yyhl2769 {
			if yyj2769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2769Slc = r.DecodeBytes(yys2769Slc, true, true)
		yys2769 := string(yys2769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2769 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2772 := &x.ListMeta
				yym2773 := z.DecBinary()
				_ = yym2773
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2772) {
				} else {
					z.DecFallback(yyv2772, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2774 := &x.Items
				yym2775 := z.DecBinary()
				_ = yym2775
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2774), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2769)
		} // end switch yys2769
	} // end for yyj2769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2776 int
	var yyb2776 bool
	var yyhl2776 bool = l >= 0
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2779 := &x.ListMeta
		yym2780 := z.DecBinary()
		_ = yym2780
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2779) {
		} else {
			z.DecFallback(yyv2779, false)
		}
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2781 := &x.Items
		yym2782 := z.DecBinary()
		_ = yym2782
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2781), d)
		}
	}
	for {
		yyj2776++
		if yyhl2776 {
			yyb2776 = yyj2776 > l
		} else {
			yyb2776 = r.CheckBreak()
		}
		if yyb2776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2783 := z.EncBinary()
		_ = yym2783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2784 := !z.EncBinary()
			yy2arr2784 := z.EncBasicHandle().StructToArray
			var yyq2784 [5]bool
			_, _, _ = yysep2784, yyq2784, yy2arr2784
			const yyr2784 bool = false
			yyq2784[0] = x.Kind != ""
			yyq2784[1] = x.APIVersion != ""
			yyq2784[2] = true
			yyq2784[3] = len(x.Secrets) != 0
			yyq2784[4] = len(x.ImagePullSecrets) != 0
			var yynn2784 int
			if yyr2784 || yy2arr2784 {
				r.EncodeArrayStart(5)
			} else {
				yynn2784 = 0
				for _, b := range yyq2784 {
					if b {
						yynn2784++
					}
				}
				r.EncodeMapStart(yynn2784)
				yynn2784 = 0
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[0] {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[1] {
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[2] {
					yy2792 := &x.ObjectMeta
					yy2792.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2793 := &x.ObjectMeta
					yy2793.CodecEncodeSelf(e)
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2795 := z.EncBinary()
						_ = yym2795
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2784[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2796 := z.EncBinary()
						_ = yym2796
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2798 := z.EncBinary()
						_ = yym2798
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2784[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2799 := z.EncBinary()
						_ = yym2799
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2800 := z.DecBinary()
	_ = yym2800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2801 := r.ContainerType()
		if yyct2801 == codecSelferValueTypeMap1234 {
			yyl2801 := r.ReadMapStart()
			if yyl2801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2801, d)
			}
		} else if yyct2801 == codecSelferValueTypeArray1234 {
			yyl2801 := r.ReadArrayStart()
			if yyl2801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2802Slc
	var yyhl2802 bool = l >= 0
	for yyj2802 := 0; ; yyj2802++ {
		if yyhl2802 {
			if yyj2802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2802Slc = r.DecodeBytes(yys2802Slc, true, true)
		yys2802 := string(yys2802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2802 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2805 := &x.ObjectMeta
				yyv2805.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2806 := &x.Secrets
				yym2807 := z.DecBinary()
				_ = yym2807
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2806), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2808 := &x.ImagePullSecrets
				yym2809 := z.DecBinary()
				_ = yym2809
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2808), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2802)
		} // end switch yys2802
	} // end for yyj2802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2810 int
	var yyb2810 bool
	var yyhl2810 bool = l >= 0
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2813 := &x.ObjectMeta
		yyv2813.CodecDecodeSelf(d)
	}
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2814 := &x.Secrets
		yym2815 := z.DecBinary()
		_ = yym2815
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2814), d)
		}
	}
	yyj2810++
	if yyhl2810 {
		yyb2810 = yyj2810 > l
	} else {
		yyb2810 = r.CheckBreak()
	}
	if yyb2810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2816 := &x.ImagePullSecrets
		yym2817 := z.DecBinary()
		_ = yym2817
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2816), d)
		}
	}
	for {
		yyj2810++
		if yyhl2810 {
			yyb2810 = yyj2810 > l
		} else {
			yyb2810 = r.CheckBreak()
		}
		if yyb2810 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2810-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2818 := z.EncBinary()
		_ = yym2818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2819 := !z.EncBinary()
			yy2arr2819 := z.EncBasicHandle().StructToArray
			var yyq2819 [4]bool
			_, _, _ = yysep2819, yyq2819, yy2arr2819
			const yyr2819 bool = false
			yyq2819[0] = x.Kind != ""
			yyq2819[1] = x.APIVersion != ""
			yyq2819[2] = true
			var yynn2819 int
			if yyr2819 || yy2arr2819 {
				r.EncodeArrayStart(4)
			} else {
				yynn2819 = 1
				for _, b := range yyq2819 {
					if b {
						yynn2819++
					}
				}
				r.EncodeMapStart(yynn2819)
				yynn2819 = 0
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[0] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2819[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[1] {
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2819[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2819[2] {
					yy2827 := &x.ListMeta
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2827) {
					} else {
						z.EncFallback(yy2827)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2829 := &x.ListMeta
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2829) {
					} else {
						z.EncFallback(yy2829)
					}
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2819 || yy2arr2819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2834 := z.DecBinary()
	_ = yym2834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2835 := r.ContainerType()
		if yyct2835 == codecSelferValueTypeMap1234 {
			yyl2835 := r.ReadMapStart()
			if yyl2835 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2835, d)
			}
		} else if yyct2835 == codecSelferValueTypeArray1234 {
			yyl2835 := r.ReadArrayStart()
			if yyl2835 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2836Slc
	var yyhl2836 bool = l >= 0
	for yyj2836 := 0; ; yyj2836++ {
		if yyhl2836 {
			if yyj2836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2836Slc = r.DecodeBytes(yys2836Slc, true, true)
		yys2836 := string(yys2836Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2836 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2839 := &x.ListMeta
				yym2840 := z.DecBinary()
				_ = yym2840
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2839) {
				} else {
					z.DecFallback(yyv2839, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2841 := &x.Items
				yym2842 := z.DecBinary()
				_ = yym2842
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2841), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2836)
		} // end switch yys2836
	} // end for yyj2836
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2843 int
	var yyb2843 bool
	var yyhl2843 bool = l >= 0
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2846 := &x.ListMeta
		yym2847 := z.DecBinary()
		_ = yym2847
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2846) {
		} else {
			z.DecFallback(yyv2846, false)
		}
	}
	yyj2843++
	if yyhl2843 {
		yyb2843 = yyj2843 > l
	} else {
		yyb2843 = r.CheckBreak()
	}
	if yyb2843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2848 := &x.Items
		yym2849 := z.DecBinary()
		_ = yym2849
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2848), d)
		}
	}
	for {
		yyj2843++
		if yyhl2843 {
			yyb2843 = yyj2843 > l
		} else {
			yyb2843 = r.CheckBreak()
		}
		if yyb2843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2850 := z.EncBinary()
		_ = yym2850
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2851 := !z.EncBinary()
			yy2arr2851 := z.EncBasicHandle().StructToArray
			var yyq2851 [4]bool
			_, _, _ = yysep2851, yyq2851, yy2arr2851
			const yyr2851 bool = false
			yyq2851[0] = x.Kind != ""
			yyq2851[1] = x.APIVersion != ""
			yyq2851[2] = true
			var yynn2851 int
			if yyr2851 || yy2arr2851 {
				r.EncodeArrayStart(4)
			} else {
				yynn2851 = 1
				for _, b := range yyq2851 {
					if b {
						yynn2851++
					}
				}
				r.EncodeMapStart(yynn2851)
				yynn2851 = 0
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2851[0] {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2851[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2851[1] {
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2851[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2851[2] {
					yy2859 := &x.ObjectMeta
					yy2859.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2851[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2860 := &x.ObjectMeta
					yy2860.CodecEncodeSelf(e)
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2864 := z.DecBinary()
	_ = yym2864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2865 := r.ContainerType()
		if yyct2865 == codecSelferValueTypeMap1234 {
			yyl2865 := r.ReadMapStart()
			if yyl2865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2865, d)
			}
		} else if yyct2865 == codecSelferValueTypeArray1234 {
			yyl2865 := r.ReadArrayStart()
			if yyl2865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2866Slc
	var yyhl2866 bool = l >= 0
	for yyj2866 := 0; ; yyj2866++ {
		if yyhl2866 {
			if yyj2866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2866Slc = r.DecodeBytes(yys2866Slc, true, true)
		yys2866 := string(yys2866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2866 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2869 := &x.ObjectMeta
				yyv2869.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2870 := &x.Subsets
				yym2871 := z.DecBinary()
				_ = yym2871
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2870), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2866)
		} // end switch yys2866
	} // end for yyj2866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2872 int
	var yyb2872 bool
	var yyhl2872 bool = l >= 0
	yyj2872++
	if yyhl2872 {
		yyb2872 = yyj2872 > l
	} else {
		yyb2872 = r.CheckBreak()
	}
	if yyb2872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2872++
	if yyhl2872 {
		yyb2872 = yyj2872 > l
	} else {
		yyb2872 = r.CheckBreak()
	}
	if yyb2872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2872++
	if yyhl2872 {
		yyb2872 = yyj2872 > l
	} else {
		yyb2872 = r.CheckBreak()
	}
	if yyb2872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2875 := &x.ObjectMeta
		yyv2875.CodecDecodeSelf(d)
	}
	yyj2872++
	if yyhl2872 {
		yyb2872 = yyj2872 > l
	} else {
		yyb2872 = r.CheckBreak()
	}
	if yyb2872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2876 := &x.Subsets
		yym2877 := z.DecBinary()
		_ = yym2877
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2876), d)
		}
	}
	for {
		yyj2872++
		if yyhl2872 {
			yyb2872 = yyj2872 > l
		} else {
			yyb2872 = r.CheckBreak()
		}
		if yyb2872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2878 := z.EncBinary()
		_ = yym2878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2879 := !z.EncBinary()
			yy2arr2879 := z.EncBasicHandle().StructToArray
			var yyq2879 [3]bool
			_, _, _ = yysep2879, yyq2879, yy2arr2879
			const yyr2879 bool = false
			yyq2879[0] = len(x.Addresses) != 0
			yyq2879[1] = len(x.NotReadyAddresses) != 0
			yyq2879[2] = len(x.Ports) != 0
			var yynn2879 int
			if yyr2879 || yy2arr2879 {
				r.EncodeArrayStart(3)
			} else {
				yynn2879 = 0
				for _, b := range yyq2879 {
					if b {
						yynn2879++
					}
				}
				r.EncodeMapStart(yynn2879)
				yynn2879 = 0
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2881 := z.EncBinary()
						_ = yym2881
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2882 := z.EncBinary()
						_ = yym2882
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2884 := z.EncBinary()
						_ = yym2884
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2885 := z.EncBinary()
						_ = yym2885
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2887 := z.EncBinary()
						_ = yym2887
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2888 := z.EncBinary()
						_ = yym2888
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2889 := z.DecBinary()
	_ = yym2889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2890 := r.ContainerType()
		if yyct2890 == codecSelferValueTypeMap1234 {
			yyl2890 := r.ReadMapStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2890, d)
			}
		} else if yyct2890 == codecSelferValueTypeArray1234 {
			yyl2890 := r.ReadArrayStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2891Slc
	var yyhl2891 bool = l >= 0
	for yyj2891 := 0; ; yyj2891++ {
		if yyhl2891 {
			if yyj2891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2891Slc = r.DecodeBytes(yys2891Slc, true, true)
		yys2891 := string(yys2891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2891 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2892 := &x.Addresses
				yym2893 := z.DecBinary()
				_ = yym2893
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2892), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2894 := &x.NotReadyAddresses
				yym2895 := z.DecBinary()
				_ = yym2895
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2894), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2896 := &x.Ports
				yym2897 := z.DecBinary()
				_ = yym2897
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2896), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2891)
		} // end switch yys2891
	} // end for yyj2891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2898 int
	var yyb2898 bool
	var yyhl2898 bool = l >= 0
	yyj2898++
	if yyhl2898 {
		yyb2898 = yyj2898 > l
	} else {
		yyb2898 = r.CheckBreak()
	}
	if yyb2898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2899 := &x.Addresses
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2899), d)
		}
	}
	yyj2898++
	if yyhl2898 {
		yyb2898 = yyj2898 > l
	} else {
		yyb2898 = r.CheckBreak()
	}
	if yyb2898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2901 := &x.NotReadyAddresses
		yym2902 := z.DecBinary()
		_ = yym2902
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2901), d)
		}
	}
	yyj2898++
	if yyhl2898 {
		yyb2898 = yyj2898 > l
	} else {
		yyb2898 = r.CheckBreak()
	}
	if yyb2898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2903 := &x.Ports
		yym2904 := z.DecBinary()
		_ = yym2904
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2903), d)
		}
	}
	for {
		yyj2898++
		if yyhl2898 {
			yyb2898 = yyj2898 > l
		} else {
			yyb2898 = r.CheckBreak()
		}
		if yyb2898 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2898-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2905 := z.EncBinary()
		_ = yym2905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2906 := !z.EncBinary()
			yy2arr2906 := z.EncBasicHandle().StructToArray
			var yyq2906 [4]bool
			_, _, _ = yysep2906, yyq2906, yy2arr2906
			const yyr2906 bool = false
			yyq2906[1] = x.Hostname != ""
			yyq2906[2] = x.NodeName != nil
			yyq2906[3] = x.TargetRef != nil
			var yynn2906 int
			if yyr2906 || yy2arr2906 {
				r.EncodeArrayStart(4)
			} else {
				yynn2906 = 1
				for _, b := range yyq2906 {
					if b {
						yynn2906++
					}
				}
				r.EncodeMapStart(yynn2906)
				yynn2906 = 0
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2908 := z.EncBinary()
				_ = yym2908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2906[1] {
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2906[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2914 := *x.NodeName
						yym2915 := z.EncBinary()
						_ = yym2915
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2914))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2906[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2916 := *x.NodeName
						yym2917 := z.EncBinary()
						_ = yym2917
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2916))
						}
					}
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2906[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2906[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2906 || yy2arr2906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2919 := z.DecBinary()
	_ = yym2919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2920 := r.ContainerType()
		if yyct2920 == codecSelferValueTypeMap1234 {
			yyl2920 := r.ReadMapStart()
			if yyl2920 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2920, d)
			}
		} else if yyct2920 == codecSelferValueTypeArray1234 {
			yyl2920 := r.ReadArrayStart()
			if yyl2920 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2921Slc
	var yyhl2921 bool = l >= 0
	for yyj2921 := 0; ; yyj2921++ {
		if yyhl2921 {
			if yyj2921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2921Slc = r.DecodeBytes(yys2921Slc, true, true)
		yys2921 := string(yys2921Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2921 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2925 := z.DecBinary()
				_ = yym2925
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2921)
		} // end switch yys2921
	} // end for yyj2921
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2927 int
	var yyb2927 bool
	var yyhl2927 bool = l >= 0
	yyj2927++
	if yyhl2927 {
		yyb2927 = yyj2927 > l
	} else {
		yyb2927 = r.CheckBreak()
	}
	if yyb2927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2927++
	if yyhl2927 {
		yyb2927 = yyj2927 > l
	} else {
		yyb2927 = r.CheckBreak()
	}
	if yyb2927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2927++
	if yyhl2927 {
		yyb2927 = yyj2927 > l
	} else {
		yyb2927 = r.CheckBreak()
	}
	if yyb2927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2927++
	if yyhl2927 {
		yyb2927 = yyj2927 > l
	} else {
		yyb2927 = r.CheckBreak()
	}
	if yyb2927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2927++
		if yyhl2927 {
			yyb2927 = yyj2927 > l
		} else {
			yyb2927 = r.CheckBreak()
		}
		if yyb2927 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2927-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2933 := z.EncBinary()
		_ = yym2933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2934 := !z.EncBinary()
			yy2arr2934 := z.EncBasicHandle().StructToArray
			var yyq2934 [3]bool
			_, _, _ = yysep2934, yyq2934, yy2arr2934
			const yyr2934 bool = false
			yyq2934[0] = x.Name != ""
			yyq2934[2] = x.Protocol != ""
			var yynn2934 int
			if yyr2934 || yy2arr2934 {
				r.EncodeArrayStart(3)
			} else {
				yynn2934 = 1
				for _, b := range yyq2934 {
					if b {
						yynn2934++
					}
				}
				r.EncodeMapStart(yynn2934)
				yynn2934 = 0
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[0] {
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2939 := z.EncBinary()
				_ = yym2939
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2940 := z.EncBinary()
				_ = yym2940
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2942 := z.DecBinary()
	_ = yym2942
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2943 := r.ContainerType()
		if yyct2943 == codecSelferValueTypeMap1234 {
			yyl2943 := r.ReadMapStart()
			if yyl2943 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2943, d)
			}
		} else if yyct2943 == codecSelferValueTypeArray1234 {
			yyl2943 := r.ReadArrayStart()
			if yyl2943 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2943, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2944Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2944Slc
	var yyhl2944 bool = l >= 0
	for yyj2944 := 0; ; yyj2944++ {
		if yyhl2944 {
			if yyj2944 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2944Slc = r.DecodeBytes(yys2944Slc, true, true)
		yys2944 := string(yys2944Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2944 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2944)
		} // end switch yys2944
	} // end for yyj2944
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2948 int
	var yyb2948 bool
	var yyhl2948 bool = l >= 0
	yyj2948++
	if yyhl2948 {
		yyb2948 = yyj2948 > l
	} else {
		yyb2948 = r.CheckBreak()
	}
	if yyb2948 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2948++
	if yyhl2948 {
		yyb2948 = yyj2948 > l
	} else {
		yyb2948 = r.CheckBreak()
	}
	if yyb2948 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2948++
	if yyhl2948 {
		yyb2948 = yyj2948 > l
	} else {
		yyb2948 = r.CheckBreak()
	}
	if yyb2948 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2948++
		if yyhl2948 {
			yyb2948 = yyj2948 > l
		} else {
			yyb2948 = r.CheckBreak()
		}
		if yyb2948 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2948-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2952 := z.EncBinary()
		_ = yym2952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2953 := !z.EncBinary()
			yy2arr2953 := z.EncBasicHandle().StructToArray
			var yyq2953 [4]bool
			_, _, _ = yysep2953, yyq2953, yy2arr2953
			const yyr2953 bool = false
			yyq2953[0] = x.Kind != ""
			yyq2953[1] = x.APIVersion != ""
			yyq2953[2] = true
			var yynn2953 int
			if yyr2953 || yy2arr2953 {
				r.EncodeArrayStart(4)
			} else {
				yynn2953 = 1
				for _, b := range yyq2953 {
					if b {
						yynn2953++
					}
				}
				r.EncodeMapStart(yynn2953)
				yynn2953 = 0
			}
			if yyr2953 || yy2arr2953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2953[0] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2953[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2953[1] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2953[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2953[2] {
					yy2961 := &x.ListMeta
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2961) {
					} else {
						z.EncFallback(yy2961)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2953[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2963 := &x.ListMeta
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2963) {
					} else {
						z.EncFallback(yy2963)
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2968 := z.DecBinary()
	_ = yym2968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2969 := r.ContainerType()
		if yyct2969 == codecSelferValueTypeMap1234 {
			yyl2969 := r.ReadMapStart()
			if yyl2969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2969, d)
			}
		} else if yyct2969 == codecSelferValueTypeArray1234 {
			yyl2969 := r.ReadArrayStart()
			if yyl2969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2970Slc
	var yyhl2970 bool = l >= 0
	for yyj2970 := 0; ; yyj2970++ {
		if yyhl2970 {
			if yyj2970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2970Slc = r.DecodeBytes(yys2970Slc, true, true)
		yys2970 := string(yys2970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2970 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2973 := &x.ListMeta
				yym2974 := z.DecBinary()
				_ = yym2974
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2973) {
				} else {
					z.DecFallback(yyv2973, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2975 := &x.Items
				yym2976 := z.DecBinary()
				_ = yym2976
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2975), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2970)
		} // end switch yys2970
	} // end for yyj2970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2977 int
	var yyb2977 bool
	var yyhl2977 bool = l >= 0
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2980 := &x.ListMeta
		yym2981 := z.DecBinary()
		_ = yym2981
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2980) {
		} else {
			z.DecFallback(yyv2980, false)
		}
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2982 := &x.Items
		yym2983 := z.DecBinary()
		_ = yym2983
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2982), d)
		}
	}
	for {
		yyj2977++
		if yyhl2977 {
			yyb2977 = yyj2977 > l
		} else {
			yyb2977 = r.CheckBreak()
		}
		if yyb2977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2984 := z.EncBinary()
		_ = yym2984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2985 := !z.EncBinary()
			yy2arr2985 := z.EncBasicHandle().StructToArray
			var yyq2985 [4]bool
			_, _, _ = yysep2985, yyq2985, yy2arr2985
			const yyr2985 bool = false
			yyq2985[0] = x.PodCIDR != ""
			yyq2985[1] = x.ExternalID != ""
			yyq2985[2] = x.ProviderID != ""
			yyq2985[3] = x.Unschedulable != false
			var yynn2985 int
			if yyr2985 || yy2arr2985 {
				r.EncodeArrayStart(4)
			} else {
				yynn2985 = 0
				for _, b := range yyq2985 {
					if b {
						yynn2985++
					}
				}
				r.EncodeMapStart(yynn2985)
				yynn2985 = 0
			}
			if yyr2985 || yy2arr2985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2985[0] {
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2985[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2985[1] {
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2985[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2985[2] {
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2985[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2985[3] {
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2985[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2998 := z.DecBinary()
	_ = yym2998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2999 := r.ContainerType()
		if yyct2999 == codecSelferValueTypeMap1234 {
			yyl2999 := r.ReadMapStart()
			if yyl2999 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2999, d)
			}
		} else if yyct2999 == codecSelferValueTypeArray1234 {
			yyl2999 := r.ReadArrayStart()
			if yyl2999 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3000Slc
	var yyhl3000 bool = l >= 0
	for yyj3000 := 0; ; yyj3000++ {
		if yyhl3000 {
			if yyj3000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3000Slc = r.DecodeBytes(yys3000Slc, true, true)
		yys3000 := string(yys3000Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3000 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3000)
		} // end switch yys3000
	} // end for yyj3000
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3005 int
	var yyb3005 bool
	var yyhl3005 bool = l >= 0
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj3005++
		if yyhl3005 {
			yyb3005 = yyj3005 > l
		} else {
			yyb3005 = r.CheckBreak()
		}
		if yyb3005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3010 := z.EncBinary()
		_ = yym3010
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3011 := !z.EncBinary()
			yy2arr3011 := z.EncBasicHandle().StructToArray
			var yyq3011 [1]bool
			_, _, _ = yysep3011, yyq3011, yy2arr3011
			const yyr3011 bool = false
			var yynn3011 int
			if yyr3011 || yy2arr3011 {
				r.EncodeArrayStart(1)
			} else {
				yynn3011 = 1
				for _, b := range yyq3011 {
					if b {
						yynn3011++
					}
				}
				r.EncodeMapStart(yynn3011)
				yynn3011 = 0
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3014 := z.EncBinary()
				_ = yym3014
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3015 := z.DecBinary()
	_ = yym3015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3016 := r.ContainerType()
		if yyct3016 == codecSelferValueTypeMap1234 {
			yyl3016 := r.ReadMapStart()
			if yyl3016 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3016, d)
			}
		} else if yyct3016 == codecSelferValueTypeArray1234 {
			yyl3016 := r.ReadArrayStart()
			if yyl3016 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3016, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3017Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3017Slc
	var yyhl3017 bool = l >= 0
	for yyj3017 := 0; ; yyj3017++ {
		if yyhl3017 {
			if yyj3017 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3017Slc = r.DecodeBytes(yys3017Slc, true, true)
		yys3017 := string(yys3017Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3017 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3017)
		} // end switch yys3017
	} // end for yyj3017
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3019 int
	var yyb3019 bool
	var yyhl3019 bool = l >= 0
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3019++
		if yyhl3019 {
			yyb3019 = yyj3019 > l
		} else {
			yyb3019 = r.CheckBreak()
		}
		if yyb3019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3021 := z.EncBinary()
		_ = yym3021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3022 := !z.EncBinary()
			yy2arr3022 := z.EncBasicHandle().StructToArray
			var yyq3022 [1]bool
			_, _, _ = yysep3022, yyq3022, yy2arr3022
			const yyr3022 bool = false
			yyq3022[0] = true
			var yynn3022 int
			if yyr3022 || yy2arr3022 {
				r.EncodeArrayStart(1)
			} else {
				yynn3022 = 0
				for _, b := range yyq3022 {
					if b {
						yynn3022++
					}
				}
				r.EncodeMapStart(yynn3022)
				yynn3022 = 0
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3022[0] {
					yy3024 := &x.KubeletEndpoint
					yy3024.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3022[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3025 := &x.KubeletEndpoint
					yy3025.CodecEncodeSelf(e)
				}
			}
			if yyr3022 || yy2arr3022 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3026 := z.DecBinary()
	_ = yym3026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3027 := r.ContainerType()
		if yyct3027 == codecSelferValueTypeMap1234 {
			yyl3027 := r.ReadMapStart()
			if yyl3027 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3027, d)
			}
		} else if yyct3027 == codecSelferValueTypeArray1234 {
			yyl3027 := r.ReadArrayStart()
			if yyl3027 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3028Slc
	var yyhl3028 bool = l >= 0
	for yyj3028 := 0; ; yyj3028++ {
		if yyhl3028 {
			if yyj3028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3028Slc = r.DecodeBytes(yys3028Slc, true, true)
		yys3028 := string(yys3028Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3028 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3029 := &x.KubeletEndpoint
				yyv3029.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3028)
		} // end switch yys3028
	} // end for yyj3028
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3030 int
	var yyb3030 bool
	var yyhl3030 bool = l >= 0
	yyj3030++
	if yyhl3030 {
		yyb3030 = yyj3030 > l
	} else {
		yyb3030 = r.CheckBreak()
	}
	if yyb3030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3031 := &x.KubeletEndpoint
		yyv3031.CodecDecodeSelf(d)
	}
	for {
		yyj3030++
		if yyhl3030 {
			yyb3030 = yyj3030 > l
		} else {
			yyb3030 = r.CheckBreak()
		}
		if yyb3030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3032 := z.EncBinary()
		_ = yym3032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3033 := !z.EncBinary()
			yy2arr3033 := z.EncBasicHandle().StructToArray
			var yyq3033 [10]bool
			_, _, _ = yysep3033, yyq3033, yy2arr3033
			const yyr3033 bool = false
			var yynn3033 int
			if yyr3033 || yy2arr3033 {
				r.EncodeArrayStart(10)
			} else {
				yynn3033 = 10
				for _, b := range yyq3033 {
					if b {
						yynn3033++
					}
				}
				r.EncodeMapStart(yynn3033)
				yynn3033 = 0
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3035 := z.EncBinary()
				_ = yym3035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3036 := z.EncBinary()
				_ = yym3036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3038 := z.EncBinary()
				_ = yym3038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3039 := z.EncBinary()
				_ = yym3039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3041 := z.EncBinary()
				_ = yym3041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3042 := z.EncBinary()
				_ = yym3042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3044 := z.EncBinary()
				_ = yym3044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3045 := z.EncBinary()
				_ = yym3045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3047 := z.EncBinary()
				_ = yym3047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3048 := z.EncBinary()
				_ = yym3048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3050 := z.EncBinary()
				_ = yym3050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3051 := z.EncBinary()
				_ = yym3051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3053 := z.EncBinary()
				_ = yym3053
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3054 := z.EncBinary()
				_ = yym3054
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3056 := z.EncBinary()
				_ = yym3056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3057 := z.EncBinary()
				_ = yym3057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3059 := z.EncBinary()
				_ = yym3059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3060 := z.EncBinary()
				_ = yym3060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3062 := z.EncBinary()
				_ = yym3062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3063 := z.EncBinary()
				_ = yym3063
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3064 := z.DecBinary()
	_ = yym3064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3065 := r.ContainerType()
		if yyct3065 == codecSelferValueTypeMap1234 {
			yyl3065 := r.ReadMapStart()
			if yyl3065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3065, d)
			}
		} else if yyct3065 == codecSelferValueTypeArray1234 {
			yyl3065 := r.ReadArrayStart()
			if yyl3065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3066Slc
	var yyhl3066 bool = l >= 0
	for yyj3066 := 0; ; yyj3066++ {
		if yyhl3066 {
			if yyj3066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3066Slc = r.DecodeBytes(yys3066Slc, true, true)
		yys3066 := string(yys3066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3066 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3066)
		} // end switch yys3066
	} // end for yyj3066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3088 := z.EncBinary()
		_ = yym3088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3089 := !z.EncBinary()
			yy2arr3089 := z.EncBasicHandle().StructToArray
			var yyq3089 [10]bool
			_, _, _ = yysep3089, yyq3089, yy2arr3089
			const yyr3089 bool = false
			yyq3089[0] = len(x.Capacity) != 0
			yyq3089[1] = len(x.Allocatable) != 0
			yyq3089[2] = x.Phase != ""
			yyq3089[3] = len(x.Conditions) != 0
			yyq3089[4] = len(x.Addresses) != 0
			yyq3089[5] = true
			yyq3089[6] = true
			yyq3089[7] = len(x.Images) != 0
			yyq3089[8] = len(x.VolumesInUse) != 0
			yyq3089[9] = len(x.VolumesAttached) != 0
			var yynn3089 int
			if yyr3089 || yy2arr3089 {
				r.EncodeArrayStart(10)
			} else {
				yynn3089 = 0
				for _, b := range yyq3089 {
					if b {
						yynn3089++
					}
				}
				r.EncodeMapStart(yynn3089)
				yynn3089 = 0
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3089[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3094 := z.EncBinary()
						_ = yym3094
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3095 := z.EncBinary()
						_ = yym3095
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3097 := z.EncBinary()
						_ = yym3097
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3098 := z.EncBinary()
						_ = yym3098
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[5] {
					yy3100 := &x.DaemonEndpoints
					yy3100.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3101 := &x.DaemonEndpoints
					yy3101.CodecEncodeSelf(e)
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[6] {
					yy3103 := &x.NodeInfo
					yy3103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3104 := &x.NodeInfo
					yy3104.CodecEncodeSelf(e)
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3106 := z.EncBinary()
						_ = yym3106
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3107 := z.EncBinary()
						_ = yym3107
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3109 := z.EncBinary()
						_ = yym3109
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3110 := z.EncBinary()
						_ = yym3110
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3089[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3112 := z.EncBinary()
						_ = yym3112
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3089[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3113 := z.EncBinary()
						_ = yym3113
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3089 || yy2arr3089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3114 := z.DecBinary()
	_ = yym3114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3115 := r.ContainerType()
		if yyct3115 == codecSelferValueTypeMap1234 {
			yyl3115 := r.ReadMapStart()
			if yyl3115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3115, d)
			}
		} else if yyct3115 == codecSelferValueTypeArray1234 {
			yyl3115 := r.ReadArrayStart()
			if yyl3115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3116Slc
	var yyhl3116 bool = l >= 0
	for yyj3116 := 0; ; yyj3116++ {
		if yyhl3116 {
			if yyj3116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3116Slc = r.DecodeBytes(yys3116Slc, true, true)
		yys3116 := string(yys3116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3116 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3117 := &x.Capacity
				yyv3117.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3118 := &x.Allocatable
				yyv3118.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3120 := &x.Conditions
				yym3121 := z.DecBinary()
				_ = yym3121
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3120), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3122 := &x.Addresses
				yym3123 := z.DecBinary()
				_ = yym3123
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3122), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3124 := &x.DaemonEndpoints
				yyv3124.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3125 := &x.NodeInfo
				yyv3125.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3126 := &x.Images
				yym3127 := z.DecBinary()
				_ = yym3127
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3126), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3128 := &x.VolumesInUse
				yym3129 := z.DecBinary()
				_ = yym3129
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3128), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3130 := &x.VolumesAttached
				yym3131 := z.DecBinary()
				_ = yym3131
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3130), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3116)
		} // end switch yys3116
	} // end for yyj3116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3132 int
	var yyb3132 bool
	var yyhl3132 bool = l >= 0
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3133 := &x.Capacity
		yyv3133.CodecDecodeSelf(d)
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3134 := &x.Allocatable
		yyv3134.CodecDecodeSelf(d)
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3136 := &x.Conditions
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3136), d)
		}
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3138 := &x.Addresses
		yym3139 := z.DecBinary()
		_ = yym3139
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3138), d)
		}
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3140 := &x.DaemonEndpoints
		yyv3140.CodecDecodeSelf(d)
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3141 := &x.NodeInfo
		yyv3141.CodecDecodeSelf(d)
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3142 := &x.Images
		yym3143 := z.DecBinary()
		_ = yym3143
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3142), d)
		}
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3144 := &x.VolumesInUse
		yym3145 := z.DecBinary()
		_ = yym3145
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3144), d)
		}
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3146 := &x.VolumesAttached
		yym3147 := z.DecBinary()
		_ = yym3147
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3146), d)
		}
	}
	for {
		yyj3132++
		if yyhl3132 {
			yyb3132 = yyj3132 > l
		} else {
			yyb3132 = r.CheckBreak()
		}
		if yyb3132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3148 := z.EncBinary()
	_ = yym3148
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3149 := z.DecBinary()
	_ = yym3149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3150 := z.EncBinary()
		_ = yym3150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3151 := !z.EncBinary()
			yy2arr3151 := z.EncBasicHandle().StructToArray
			var yyq3151 [2]bool
			_, _, _ = yysep3151, yyq3151, yy2arr3151
			const yyr3151 bool = false
			var yynn3151 int
			if yyr3151 || yy2arr3151 {
				r.EncodeArrayStart(2)
			} else {
				yynn3151 = 2
				for _, b := range yyq3151 {
					if b {
						yynn3151++
					}
				}
				r.EncodeMapStart(yynn3151)
				yynn3151 = 0
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3154 := z.EncBinary()
				_ = yym3154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3155 := z.EncBinary()
				_ = yym3155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3156 := z.DecBinary()
	_ = yym3156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3157 := r.ContainerType()
		if yyct3157 == codecSelferValueTypeMap1234 {
			yyl3157 := r.ReadMapStart()
			if yyl3157 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3157, d)
			}
		} else if yyct3157 == codecSelferValueTypeArray1234 {
			yyl3157 := r.ReadArrayStart()
			if yyl3157 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3157, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3158Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3158Slc
	var yyhl3158 bool = l >= 0
	for yyj3158 := 0; ; yyj3158++ {
		if yyhl3158 {
			if yyj3158 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3158Slc = r.DecodeBytes(yys3158Slc, true, true)
		yys3158 := string(yys3158Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3158 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3158)
		} // end switch yys3158
	} // end for yyj3158
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3161 int
	var yyb3161 bool
	var yyhl3161 bool = l >= 0
	yyj3161++
	if yyhl3161 {
		yyb3161 = yyj3161 > l
	} else {
		yyb3161 = r.CheckBreak()
	}
	if yyb3161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3161++
	if yyhl3161 {
		yyb3161 = yyj3161 > l
	} else {
		yyb3161 = r.CheckBreak()
	}
	if yyb3161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3161++
		if yyhl3161 {
			yyb3161 = yyj3161 > l
		} else {
			yyb3161 = r.CheckBreak()
		}
		if yyb3161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3164 := z.EncBinary()
		_ = yym3164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3165 := !z.EncBinary()
			yy2arr3165 := z.EncBasicHandle().StructToArray
			var yyq3165 [1]bool
			_, _, _ = yysep3165, yyq3165, yy2arr3165
			const yyr3165 bool = false
			yyq3165[0] = len(x.PreferAvoidPods) != 0
			var yynn3165 int
			if yyr3165 || yy2arr3165 {
				r.EncodeArrayStart(1)
			} else {
				yynn3165 = 0
				for _, b := range yyq3165 {
					if b {
						yynn3165++
					}
				}
				r.EncodeMapStart(yynn3165)
				yynn3165 = 0
			}
			if yyr3165 || yy2arr3165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3165[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3167 := z.EncBinary()
						_ = yym3167
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3168 := z.EncBinary()
						_ = yym3168
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3165 || yy2arr3165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3170 := r.ContainerType()
		if yyct3170 == codecSelferValueTypeMap1234 {
			yyl3170 := r.ReadMapStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3170, d)
			}
		} else if yyct3170 == codecSelferValueTypeArray1234 {
			yyl3170 := r.ReadArrayStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3171Slc
	var yyhl3171 bool = l >= 0
	for yyj3171 := 0; ; yyj3171++ {
		if yyhl3171 {
			if yyj3171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3171Slc = r.DecodeBytes(yys3171Slc, true, true)
		yys3171 := string(yys3171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3171 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3172 := &x.PreferAvoidPods
				yym3173 := z.DecBinary()
				_ = yym3173
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3172), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3171)
		} // end switch yys3171
	} // end for yyj3171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3174 int
	var yyb3174 bool
	var yyhl3174 bool = l >= 0
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3175 := &x.PreferAvoidPods
		yym3176 := z.DecBinary()
		_ = yym3176
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3175), d)
		}
	}
	for {
		yyj3174++
		if yyhl3174 {
			yyb3174 = yyj3174 > l
		} else {
			yyb3174 = r.CheckBreak()
		}
		if yyb3174 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3174-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3177 := z.EncBinary()
		_ = yym3177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3178 := !z.EncBinary()
			yy2arr3178 := z.EncBasicHandle().StructToArray
			var yyq3178 [4]bool
			_, _, _ = yysep3178, yyq3178, yy2arr3178
			const yyr3178 bool = false
			yyq3178[1] = true
			yyq3178[2] = x.Reason != ""
			yyq3178[3] = x.Message != ""
			var yynn3178 int
			if yyr3178 || yy2arr3178 {
				r.EncodeArrayStart(4)
			} else {
				yynn3178 = 1
				for _, b := range yyq3178 {
					if b {
						yynn3178++
					}
				}
				r.EncodeMapStart(yynn3178)
				yynn3178 = 0
			}
			if yyr3178 || yy2arr3178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3180 := &x.PodSignature
				yy3180.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3181 := &x.PodSignature
				yy3181.CodecEncodeSelf(e)
			}
			if yyr3178 || yy2arr3178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3178[1] {
					yy3183 := &x.EvictionTime
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3183) {
					} else if yym3184 {
						z.EncBinaryMarshal(yy3183)
					} else if !yym3184 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3183)
					} else {
						z.EncFallback(yy3183)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3185 := &x.EvictionTime
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3185) {
					} else if yym3186 {
						z.EncBinaryMarshal(yy3185)
					} else if !yym3186 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3185)
					} else {
						z.EncFallback(yy3185)
					}
				}
			}
			if yyr3178 || yy2arr3178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3178[2] {
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3178 || yy2arr3178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3178[3] {
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3178[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3192 := z.EncBinary()
					_ = yym3192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3178 || yy2arr3178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3193 := z.DecBinary()
	_ = yym3193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3194 := r.ContainerType()
		if yyct3194 == codecSelferValueTypeMap1234 {
			yyl3194 := r.ReadMapStart()
			if yyl3194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3194, d)
			}
		} else if yyct3194 == codecSelferValueTypeArray1234 {
			yyl3194 := r.ReadArrayStart()
			if yyl3194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3195Slc
	var yyhl3195 bool = l >= 0
	for yyj3195 := 0; ; yyj3195++ {
		if yyhl3195 {
			if yyj3195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3195Slc = r.DecodeBytes(yys3195Slc, true, true)
		yys3195 := string(yys3195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3195 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3196 := &x.PodSignature
				yyv3196.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_v1.Time{}
			} else {
				yyv3197 := &x.EvictionTime
				yym3198 := z.DecBinary()
				_ = yym3198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3197) {
				} else if yym3198 {
					z.DecBinaryUnmarshal(yyv3197)
				} else if !yym3198 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3197)
				} else {
					z.DecFallback(yyv3197, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3195)
		} // end switch yys3195
	} // end for yyj3195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3201 int
	var yyb3201 bool
	var yyhl3201 bool = l >= 0
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3202 := &x.PodSignature
		yyv3202.CodecDecodeSelf(d)
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_v1.Time{}
	} else {
		yyv3203 := &x.EvictionTime
		yym3204 := z.DecBinary()
		_ = yym3204
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3203) {
		} else if yym3204 {
			z.DecBinaryUnmarshal(yyv3203)
		} else if !yym3204 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3203)
		} else {
			z.DecFallback(yyv3203, false)
		}
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3201++
		if yyhl3201 {
			yyb3201 = yyj3201 > l
		} else {
			yyb3201 = r.CheckBreak()
		}
		if yyb3201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3207 := z.EncBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3208 := !z.EncBinary()
			yy2arr3208 := z.EncBasicHandle().StructToArray
			var yyq3208 [1]bool
			_, _, _ = yysep3208, yyq3208, yy2arr3208
			const yyr3208 bool = false
			yyq3208[0] = x.PodController != nil
			var yynn3208 int
			if yyr3208 || yy2arr3208 {
				r.EncodeArrayStart(1)
			} else {
				yynn3208 = 0
				for _, b := range yyq3208 {
					if b {
						yynn3208++
					}
				}
				r.EncodeMapStart(yynn3208)
				yynn3208 = 0
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						yym3210 := z.EncBinary()
						_ = yym3210
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodController) {
						} else {
							z.EncFallback(x.PodController)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3208[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						yym3211 := z.EncBinary()
						_ = yym3211
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodController) {
						} else {
							z.EncFallback(x.PodController)
						}
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3213 := r.ContainerType()
		if yyct3213 == codecSelferValueTypeMap1234 {
			yyl3213 := r.ReadMapStart()
			if yyl3213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3213, d)
			}
		} else if yyct3213 == codecSelferValueTypeArray1234 {
			yyl3213 := r.ReadArrayStart()
			if yyl3213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3214Slc
	var yyhl3214 bool = l >= 0
	for yyj3214 := 0; ; yyj3214++ {
		if yyhl3214 {
			if yyj3214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3214Slc = r.DecodeBytes(yys3214Slc, true, true)
		yys3214 := string(yys3214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3214 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(pkg2_v1.OwnerReference)
				}
				yym3216 := z.DecBinary()
				_ = yym3216
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodController) {
				} else {
					z.DecFallback(x.PodController, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3214)
		} // end switch yys3214
	} // end for yyj3214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(pkg2_v1.OwnerReference)
		}
		yym3219 := z.DecBinary()
		_ = yym3219
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodController) {
		} else {
			z.DecFallback(x.PodController, false)
		}
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3220 := z.EncBinary()
		_ = yym3220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3221 := !z.EncBinary()
			yy2arr3221 := z.EncBasicHandle().StructToArray
			var yyq3221 [2]bool
			_, _, _ = yysep3221, yyq3221, yy2arr3221
			const yyr3221 bool = false
			yyq3221[1] = x.SizeBytes != 0
			var yynn3221 int
			if yyr3221 || yy2arr3221 {
				r.EncodeArrayStart(2)
			} else {
				yynn3221 = 1
				for _, b := range yyq3221 {
					if b {
						yynn3221++
					}
				}
				r.EncodeMapStart(yynn3221)
				yynn3221 = 0
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3224 := z.EncBinary()
					_ = yym3224
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3221[1] {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3228 := z.DecBinary()
	_ = yym3228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3229 := r.ContainerType()
		if yyct3229 == codecSelferValueTypeMap1234 {
			yyl3229 := r.ReadMapStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3229, d)
			}
		} else if yyct3229 == codecSelferValueTypeArray1234 {
			yyl3229 := r.ReadArrayStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3230Slc
	var yyhl3230 bool = l >= 0
	for yyj3230 := 0; ; yyj3230++ {
		if yyhl3230 {
			if yyj3230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3230Slc = r.DecodeBytes(yys3230Slc, true, true)
		yys3230 := string(yys3230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3230 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3231 := &x.Names
				yym3232 := z.DecBinary()
				_ = yym3232
				if false {
				} else {
					z.F.DecSliceStringX(yyv3231, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3230)
		} // end switch yys3230
	} // end for yyj3230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3234 int
	var yyb3234 bool
	var yyhl3234 bool = l >= 0
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3235 := &x.Names
		yym3236 := z.DecBinary()
		_ = yym3236
		if false {
		} else {
			z.F.DecSliceStringX(yyv3235, false, d)
		}
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3234++
		if yyhl3234 {
			yyb3234 = yyj3234 > l
		} else {
			yyb3234 = r.CheckBreak()
		}
		if yyb3234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3238 := z.EncBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3239 := z.DecBinary()
	_ = yym3239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3240 := z.EncBinary()
	_ = yym3240
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3241 := z.DecBinary()
	_ = yym3241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3242 := z.EncBinary()
		_ = yym3242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3243 := !z.EncBinary()
			yy2arr3243 := z.EncBasicHandle().StructToArray
			var yyq3243 [6]bool
			_, _, _ = yysep3243, yyq3243, yy2arr3243
			const yyr3243 bool = false
			yyq3243[2] = true
			yyq3243[3] = true
			yyq3243[4] = x.Reason != ""
			yyq3243[5] = x.Message != ""
			var yynn3243 int
			if yyr3243 || yy2arr3243 {
				r.EncodeArrayStart(6)
			} else {
				yynn3243 = 2
				for _, b := range yyq3243 {
					if b {
						yynn3243++
					}
				}
				r.EncodeMapStart(yynn3243)
				yynn3243 = 0
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3243[2] {
					yy3247 := &x.LastHeartbeatTime
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3247) {
					} else if yym3248 {
						z.EncBinaryMarshal(yy3247)
					} else if !yym3248 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3247)
					} else {
						z.EncFallback(yy3247)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3249 := &x.LastHeartbeatTime
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3249) {
					} else if yym3250 {
						z.EncBinaryMarshal(yy3249)
					} else if !yym3250 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3249)
					} else {
						z.EncFallback(yy3249)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3243[3] {
					yy3252 := &x.LastTransitionTime
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3252) {
					} else if yym3253 {
						z.EncBinaryMarshal(yy3252)
					} else if !yym3253 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3252)
					} else {
						z.EncFallback(yy3252)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3243[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3254 := &x.LastTransitionTime
					yym3255 := z.EncBinary()
					_ = yym3255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3254) {
					} else if yym3255 {
						z.EncBinaryMarshal(yy3254)
					} else if !yym3255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3254)
					} else {
						z.EncFallback(yy3254)
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3243[4] {
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3243[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3243[5] {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3243[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3243 || yy2arr3243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3263 := r.ContainerType()
		if yyct3263 == codecSelferValueTypeMap1234 {
			yyl3263 := r.ReadMapStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3263, d)
			}
		} else if yyct3263 == codecSelferValueTypeArray1234 {
			yyl3263 := r.ReadArrayStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3264Slc
	var yyhl3264 bool = l >= 0
	for yyj3264 := 0; ; yyj3264++ {
		if yyhl3264 {
			if yyj3264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3264Slc = r.DecodeBytes(yys3264Slc, true, true)
		yys3264 := string(yys3264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3264 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_v1.Time{}
			} else {
				yyv3267 := &x.LastHeartbeatTime
				yym3268 := z.DecBinary()
				_ = yym3268
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3267) {
				} else if yym3268 {
					z.DecBinaryUnmarshal(yyv3267)
				} else if !yym3268 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3267)
				} else {
					z.DecFallback(yyv3267, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv3269 := &x.LastTransitionTime
				yym3270 := z.DecBinary()
				_ = yym3270
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3269) {
				} else if yym3270 {
					z.DecBinaryUnmarshal(yyv3269)
				} else if !yym3270 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3269)
				} else {
					z.DecFallback(yyv3269, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3264)
		} // end switch yys3264
	} // end for yyj3264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3273 int
	var yyb3273 bool
	var yyhl3273 bool = l >= 0
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_v1.Time{}
	} else {
		yyv3276 := &x.LastHeartbeatTime
		yym3277 := z.DecBinary()
		_ = yym3277
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3276) {
		} else if yym3277 {
			z.DecBinaryUnmarshal(yyv3276)
		} else if !yym3277 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3276)
		} else {
			z.DecFallback(yyv3276, false)
		}
	}
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv3278 := &x.LastTransitionTime
		yym3279 := z.DecBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3278) {
		} else if yym3279 {
			z.DecBinaryUnmarshal(yyv3278)
		} else if !yym3279 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3278)
		} else {
			z.DecFallback(yyv3278, false)
		}
	}
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3273++
		if yyhl3273 {
			yyb3273 = yyj3273 > l
		} else {
			yyb3273 = r.CheckBreak()
		}
		if yyb3273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3282 := z.EncBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3283 := z.DecBinary()
	_ = yym3283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3284 := z.EncBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3285 := !z.EncBinary()
			yy2arr3285 := z.EncBasicHandle().StructToArray
			var yyq3285 [2]bool
			_, _, _ = yysep3285, yyq3285, yy2arr3285
			const yyr3285 bool = false
			var yynn3285 int
			if yyr3285 || yy2arr3285 {
				r.EncodeArrayStart(2)
			} else {
				yynn3285 = 2
				for _, b := range yyq3285 {
					if b {
						yynn3285++
					}
				}
				r.EncodeMapStart(yynn3285)
				yynn3285 = 0
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3288 := z.EncBinary()
				_ = yym3288
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3289 := z.EncBinary()
				_ = yym3289
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3290 := z.DecBinary()
	_ = yym3290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3291 := r.ContainerType()
		if yyct3291 == codecSelferValueTypeMap1234 {
			yyl3291 := r.ReadMapStart()
			if yyl3291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3291, d)
			}
		} else if yyct3291 == codecSelferValueTypeArray1234 {
			yyl3291 := r.ReadArrayStart()
			if yyl3291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3292Slc
	var yyhl3292 bool = l >= 0
	for yyj3292 := 0; ; yyj3292++ {
		if yyhl3292 {
			if yyj3292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3292Slc = r.DecodeBytes(yys3292Slc, true, true)
		yys3292 := string(yys3292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3292 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3292)
		} // end switch yys3292
	} // end for yyj3292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3295 int
	var yyb3295 bool
	var yyhl3295 bool = l >= 0
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3295++
		if yyhl3295 {
			yyb3295 = yyj3295 > l
		} else {
			yyb3295 = r.CheckBreak()
		}
		if yyb3295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3298 := z.EncBinary()
	_ = yym3298
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3299 := z.DecBinary()
	_ = yym3299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3300 := z.EncBinary()
		_ = yym3300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3302 := z.EncBinary()
		_ = yym3302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3303 := !z.EncBinary()
			yy2arr3303 := z.EncBasicHandle().StructToArray
			var yyq3303 [5]bool
			_, _, _ = yysep3303, yyq3303, yy2arr3303
			const yyr3303 bool = false
			yyq3303[0] = x.Kind != ""
			yyq3303[1] = x.APIVersion != ""
			yyq3303[2] = true
			yyq3303[3] = true
			yyq3303[4] = true
			var yynn3303 int
			if yyr3303 || yy2arr3303 {
				r.EncodeArrayStart(5)
			} else {
				yynn3303 = 0
				for _, b := range yyq3303 {
					if b {
						yynn3303++
					}
				}
				r.EncodeMapStart(yynn3303)
				yynn3303 = 0
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[0] {
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[1] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[2] {
					yy3311 := &x.ObjectMeta
					yy3311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3312 := &x.ObjectMeta
					yy3312.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[3] {
					yy3314 := &x.Spec
					yy3314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3315 := &x.Spec
					yy3315.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[4] {
					yy3317 := &x.Status
					yy3317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3318 := &x.Status
					yy3318.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3319 := z.DecBinary()
	_ = yym3319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3320 := r.ContainerType()
		if yyct3320 == codecSelferValueTypeMap1234 {
			yyl3320 := r.ReadMapStart()
			if yyl3320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3320, d)
			}
		} else if yyct3320 == codecSelferValueTypeArray1234 {
			yyl3320 := r.ReadArrayStart()
			if yyl3320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3321Slc
	var yyhl3321 bool = l >= 0
	for yyj3321 := 0; ; yyj3321++ {
		if yyhl3321 {
			if yyj3321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3321Slc = r.DecodeBytes(yys3321Slc, true, true)
		yys3321 := string(yys3321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3324 := &x.ObjectMeta
				yyv3324.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3325 := &x.Spec
				yyv3325.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3326 := &x.Status
				yyv3326.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3321)
		} // end switch yys3321
	} // end for yyj3321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3327 int
	var yyb3327 bool
	var yyhl3327 bool = l >= 0
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3330 := &x.ObjectMeta
		yyv3330.CodecDecodeSelf(d)
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3331 := &x.Spec
		yyv3331.CodecDecodeSelf(d)
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3332 := &x.Status
		yyv3332.CodecDecodeSelf(d)
	}
	for {
		yyj3327++
		if yyhl3327 {
			yyb3327 = yyj3327 > l
		} else {
			yyb3327 = r.CheckBreak()
		}
		if yyb3327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3333 := z.EncBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3334 := !z.EncBinary()
			yy2arr3334 := z.EncBasicHandle().StructToArray
			var yyq3334 [4]bool
			_, _, _ = yysep3334, yyq3334, yy2arr3334
			const yyr3334 bool = false
			yyq3334[0] = x.Kind != ""
			yyq3334[1] = x.APIVersion != ""
			yyq3334[2] = true
			var yynn3334 int
			if yyr3334 || yy2arr3334 {
				r.EncodeArrayStart(4)
			} else {
				yynn3334 = 1
				for _, b := range yyq3334 {
					if b {
						yynn3334++
					}
				}
				r.EncodeMapStart(yynn3334)
				yynn3334 = 0
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[0] {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[1] {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[2] {
					yy3342 := &x.ListMeta
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3342) {
					} else {
						z.EncFallback(yy3342)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3344 := &x.ListMeta
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3344) {
					} else {
						z.EncFallback(yy3344)
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3349 := z.DecBinary()
	_ = yym3349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3350 := r.ContainerType()
		if yyct3350 == codecSelferValueTypeMap1234 {
			yyl3350 := r.ReadMapStart()
			if yyl3350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3350, d)
			}
		} else if yyct3350 == codecSelferValueTypeArray1234 {
			yyl3350 := r.ReadArrayStart()
			if yyl3350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3351Slc
	var yyhl3351 bool = l >= 0
	for yyj3351 := 0; ; yyj3351++ {
		if yyhl3351 {
			if yyj3351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3351Slc = r.DecodeBytes(yys3351Slc, true, true)
		yys3351 := string(yys3351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3351 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3354 := &x.ListMeta
				yym3355 := z.DecBinary()
				_ = yym3355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3354) {
				} else {
					z.DecFallback(yyv3354, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3356 := &x.Items
				yym3357 := z.DecBinary()
				_ = yym3357
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3356), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3351)
		} // end switch yys3351
	} // end for yyj3351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3358 int
	var yyb3358 bool
	var yyhl3358 bool = l >= 0
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3361 := &x.ListMeta
		yym3362 := z.DecBinary()
		_ = yym3362
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3361) {
		} else {
			z.DecFallback(yyv3361, false)
		}
	}
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3363 := &x.Items
		yym3364 := z.DecBinary()
		_ = yym3364
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3363), d)
		}
	}
	for {
		yyj3358++
		if yyhl3358 {
			yyb3358 = yyj3358 > l
		} else {
			yyb3358 = r.CheckBreak()
		}
		if yyb3358 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3358-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3365 := z.EncBinary()
	_ = yym3365
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3366 := z.DecBinary()
	_ = yym3366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3367 := z.EncBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3368 := !z.EncBinary()
			yy2arr3368 := z.EncBasicHandle().StructToArray
			var yyq3368 [1]bool
			_, _, _ = yysep3368, yyq3368, yy2arr3368
			const yyr3368 bool = false
			yyq3368[0] = len(x.Finalizers) != 0
			var yynn3368 int
			if yyr3368 || yy2arr3368 {
				r.EncodeArrayStart(1)
			} else {
				yynn3368 = 0
				for _, b := range yyq3368 {
					if b {
						yynn3368++
					}
				}
				r.EncodeMapStart(yynn3368)
				yynn3368 = 0
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3370 := z.EncBinary()
						_ = yym3370
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3371 := z.EncBinary()
						_ = yym3371
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3372 := z.DecBinary()
	_ = yym3372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3373 := r.ContainerType()
		if yyct3373 == codecSelferValueTypeMap1234 {
			yyl3373 := r.ReadMapStart()
			if yyl3373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3373, d)
			}
		} else if yyct3373 == codecSelferValueTypeArray1234 {
			yyl3373 := r.ReadArrayStart()
			if yyl3373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3374Slc
	var yyhl3374 bool = l >= 0
	for yyj3374 := 0; ; yyj3374++ {
		if yyhl3374 {
			if yyj3374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3374Slc = r.DecodeBytes(yys3374Slc, true, true)
		yys3374 := string(yys3374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3374 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3375 := &x.Finalizers
				yym3376 := z.DecBinary()
				_ = yym3376
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3375), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3374)
		} // end switch yys3374
	} // end for yyj3374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3377 int
	var yyb3377 bool
	var yyhl3377 bool = l >= 0
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3378 := &x.Finalizers
		yym3379 := z.DecBinary()
		_ = yym3379
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3378), d)
		}
	}
	for {
		yyj3377++
		if yyhl3377 {
			yyb3377 = yyj3377 > l
		} else {
			yyb3377 = r.CheckBreak()
		}
		if yyb3377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3380 := z.EncBinary()
		_ = yym3380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3381 := !z.EncBinary()
			yy2arr3381 := z.EncBasicHandle().StructToArray
			var yyq3381 [1]bool
			_, _, _ = yysep3381, yyq3381, yy2arr3381
			const yyr3381 bool = false
			yyq3381[0] = x.Phase != ""
			var yynn3381 int
			if yyr3381 || yy2arr3381 {
				r.EncodeArrayStart(1)
			} else {
				yynn3381 = 0
				for _, b := range yyq3381 {
					if b {
						yynn3381++
					}
				}
				r.EncodeMapStart(yynn3381)
				yynn3381 = 0
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3381[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3381[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3383 := z.DecBinary()
	_ = yym3383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3384 := r.ContainerType()
		if yyct3384 == codecSelferValueTypeMap1234 {
			yyl3384 := r.ReadMapStart()
			if yyl3384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3384, d)
			}
		} else if yyct3384 == codecSelferValueTypeArray1234 {
			yyl3384 := r.ReadArrayStart()
			if yyl3384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3385Slc
	var yyhl3385 bool = l >= 0
	for yyj3385 := 0; ; yyj3385++ {
		if yyhl3385 {
			if yyj3385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3385Slc = r.DecodeBytes(yys3385Slc, true, true)
		yys3385 := string(yys3385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3385 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3385)
		} // end switch yys3385
	} // end for yyj3385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3387 int
	var yyb3387 bool
	var yyhl3387 bool = l >= 0
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3387++
		if yyhl3387 {
			yyb3387 = yyj3387 > l
		} else {
			yyb3387 = r.CheckBreak()
		}
		if yyb3387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3389 := z.EncBinary()
	_ = yym3389
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3390 := z.DecBinary()
	_ = yym3390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3391 := z.EncBinary()
		_ = yym3391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3392 := !z.EncBinary()
			yy2arr3392 := z.EncBasicHandle().StructToArray
			var yyq3392 [5]bool
			_, _, _ = yysep3392, yyq3392, yy2arr3392
			const yyr3392 bool = false
			yyq3392[0] = x.Kind != ""
			yyq3392[1] = x.APIVersion != ""
			yyq3392[2] = true
			yyq3392[3] = true
			yyq3392[4] = true
			var yynn3392 int
			if yyr3392 || yy2arr3392 {
				r.EncodeArrayStart(5)
			} else {
				yynn3392 = 0
				for _, b := range yyq3392 {
					if b {
						yynn3392++
					}
				}
				r.EncodeMapStart(yynn3392)
				yynn3392 = 0
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[0] {
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[1] {
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[2] {
					yy3400 := &x.ObjectMeta
					yy3400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3401 := &x.ObjectMeta
					yy3401.CodecEncodeSelf(e)
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[3] {
					yy3403 := &x.Spec
					yy3403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3392[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3404 := &x.Spec
					yy3404.CodecEncodeSelf(e)
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[4] {
					yy3406 := &x.Status
					yy3406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3392[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3407 := &x.Status
					yy3407.CodecEncodeSelf(e)
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3408 := z.DecBinary()
	_ = yym3408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3409 := r.ContainerType()
		if yyct3409 == codecSelferValueTypeMap1234 {
			yyl3409 := r.ReadMapStart()
			if yyl3409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3409, d)
			}
		} else if yyct3409 == codecSelferValueTypeArray1234 {
			yyl3409 := r.ReadArrayStart()
			if yyl3409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3410Slc
	var yyhl3410 bool = l >= 0
	for yyj3410 := 0; ; yyj3410++ {
		if yyhl3410 {
			if yyj3410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3410Slc = r.DecodeBytes(yys3410Slc, true, true)
		yys3410 := string(yys3410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3410 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3413 := &x.ObjectMeta
				yyv3413.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3414 := &x.Spec
				yyv3414.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3415 := &x.Status
				yyv3415.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3410)
		} // end switch yys3410
	} // end for yyj3410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3416 int
	var yyb3416 bool
	var yyhl3416 bool = l >= 0
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3419 := &x.ObjectMeta
		yyv3419.CodecDecodeSelf(d)
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3420 := &x.Spec
		yyv3420.CodecDecodeSelf(d)
	}
	yyj3416++
	if yyhl3416 {
		yyb3416 = yyj3416 > l
	} else {
		yyb3416 = r.CheckBreak()
	}
	if yyb3416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3421 := &x.Status
		yyv3421.CodecDecodeSelf(d)
	}
	for {
		yyj3416++
		if yyhl3416 {
			yyb3416 = yyj3416 > l
		} else {
			yyb3416 = r.CheckBreak()
		}
		if yyb3416 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3416-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3422 := z.EncBinary()
		_ = yym3422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3423 := !z.EncBinary()
			yy2arr3423 := z.EncBasicHandle().StructToArray
			var yyq3423 [4]bool
			_, _, _ = yysep3423, yyq3423, yy2arr3423
			const yyr3423 bool = false
			yyq3423[0] = x.Kind != ""
			yyq3423[1] = x.APIVersion != ""
			yyq3423[2] = true
			var yynn3423 int
			if yyr3423 || yy2arr3423 {
				r.EncodeArrayStart(4)
			} else {
				yynn3423 = 1
				for _, b := range yyq3423 {
					if b {
						yynn3423++
					}
				}
				r.EncodeMapStart(yynn3423)
				yynn3423 = 0
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[0] {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[1] {
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[2] {
					yy3431 := &x.ListMeta
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3431) {
					} else {
						z.EncFallback(yy3431)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3433 := &x.ListMeta
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3433) {
					} else {
						z.EncFallback(yy3433)
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3438 := z.DecBinary()
	_ = yym3438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3439 := r.ContainerType()
		if yyct3439 == codecSelferValueTypeMap1234 {
			yyl3439 := r.ReadMapStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3439, d)
			}
		} else if yyct3439 == codecSelferValueTypeArray1234 {
			yyl3439 := r.ReadArrayStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3440Slc
	var yyhl3440 bool = l >= 0
	for yyj3440 := 0; ; yyj3440++ {
		if yyhl3440 {
			if yyj3440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3440Slc = r.DecodeBytes(yys3440Slc, true, true)
		yys3440 := string(yys3440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3443 := &x.ListMeta
				yym3444 := z.DecBinary()
				_ = yym3444
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3443) {
				} else {
					z.DecFallback(yyv3443, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3445 := &x.Items
				yym3446 := z.DecBinary()
				_ = yym3446
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3445), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3440)
		} // end switch yys3440
	} // end for yyj3440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3447 int
	var yyb3447 bool
	var yyhl3447 bool = l >= 0
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3450 := &x.ListMeta
		yym3451 := z.DecBinary()
		_ = yym3451
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3450) {
		} else {
			z.DecFallback(yyv3450, false)
		}
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3452 := &x.Items
		yym3453 := z.DecBinary()
		_ = yym3453
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3452), d)
		}
	}
	for {
		yyj3447++
		if yyhl3447 {
			yyb3447 = yyj3447 > l
		} else {
			yyb3447 = r.CheckBreak()
		}
		if yyb3447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3454 := z.EncBinary()
		_ = yym3454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3455 := !z.EncBinary()
			yy2arr3455 := z.EncBasicHandle().StructToArray
			var yyq3455 [4]bool
			_, _, _ = yysep3455, yyq3455, yy2arr3455
			const yyr3455 bool = false
			yyq3455[0] = x.Kind != ""
			yyq3455[1] = x.APIVersion != ""
			yyq3455[2] = true
			var yynn3455 int
			if yyr3455 || yy2arr3455 {
				r.EncodeArrayStart(4)
			} else {
				yynn3455 = 1
				for _, b := range yyq3455 {
					if b {
						yynn3455++
					}
				}
				r.EncodeMapStart(yynn3455)
				yynn3455 = 0
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[0] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[1] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[2] {
					yy3463 := &x.ObjectMeta
					yy3463.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3455[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3464 := &x.ObjectMeta
					yy3464.CodecEncodeSelf(e)
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3466 := &x.Target
				yy3466.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3467 := &x.Target
				yy3467.CodecEncodeSelf(e)
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3468 := z.DecBinary()
	_ = yym3468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3469 := r.ContainerType()
		if yyct3469 == codecSelferValueTypeMap1234 {
			yyl3469 := r.ReadMapStart()
			if yyl3469 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3469, d)
			}
		} else if yyct3469 == codecSelferValueTypeArray1234 {
			yyl3469 := r.ReadArrayStart()
			if yyl3469 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3469, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3470Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3470Slc
	var yyhl3470 bool = l >= 0
	for yyj3470 := 0; ; yyj3470++ {
		if yyhl3470 {
			if yyj3470 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3470Slc = r.DecodeBytes(yys3470Slc, true, true)
		yys3470 := string(yys3470Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3470 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3473 := &x.ObjectMeta
				yyv3473.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3474 := &x.Target
				yyv3474.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3470)
		} // end switch yys3470
	} // end for yyj3470
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3475 int
	var yyb3475 bool
	var yyhl3475 bool = l >= 0
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3478 := &x.ObjectMeta
		yyv3478.CodecDecodeSelf(d)
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3479 := &x.Target
		yyv3479.CodecDecodeSelf(d)
	}
	for {
		yyj3475++
		if yyhl3475 {
			yyb3475 = yyj3475 > l
		} else {
			yyb3475 = r.CheckBreak()
		}
		if yyb3475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3480 := z.EncBinary()
		_ = yym3480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3481 := !z.EncBinary()
			yy2arr3481 := z.EncBasicHandle().StructToArray
			var yyq3481 [1]bool
			_, _, _ = yysep3481, yyq3481, yy2arr3481
			const yyr3481 bool = false
			yyq3481[0] = x.UID != nil
			var yynn3481 int
			if yyr3481 || yy2arr3481 {
				r.EncodeArrayStart(1)
			} else {
				yynn3481 = 0
				for _, b := range yyq3481 {
					if b {
						yynn3481++
					}
				}
				r.EncodeMapStart(yynn3481)
				yynn3481 = 0
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3481[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3483 := *x.UID
						yym3484 := z.EncBinary()
						_ = yym3484
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3483) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3483))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3485 := *x.UID
						yym3486 := z.EncBinary()
						_ = yym3486
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3485) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3485))
						}
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3487 := z.DecBinary()
	_ = yym3487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3488 := r.ContainerType()
		if yyct3488 == codecSelferValueTypeMap1234 {
			yyl3488 := r.ReadMapStart()
			if yyl3488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3488, d)
			}
		} else if yyct3488 == codecSelferValueTypeArray1234 {
			yyl3488 := r.ReadArrayStart()
			if yyl3488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3489Slc
	var yyhl3489 bool = l >= 0
	for yyj3489 := 0; ; yyj3489++ {
		if yyhl3489 {
			if yyj3489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3489Slc = r.DecodeBytes(yys3489Slc, true, true)
		yys3489 := string(yys3489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3489 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3491 := z.DecBinary()
				_ = yym3491
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3489)
		} // end switch yys3489
	} // end for yyj3489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3492 int
	var yyb3492 bool
	var yyhl3492 bool = l >= 0
	yyj3492++
	if yyhl3492 {
		yyb3492 = yyj3492 > l
	} else {
		yyb3492 = r.CheckBreak()
	}
	if yyb3492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3494 := z.DecBinary()
		_ = yym3494
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3492++
		if yyhl3492 {
			yyb3492 = yyj3492 > l
		} else {
			yyb3492 = r.CheckBreak()
		}
		if yyb3492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3495 := z.EncBinary()
		_ = yym3495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3496 := !z.EncBinary()
			yy2arr3496 := z.EncBasicHandle().StructToArray
			var yyq3496 [5]bool
			_, _, _ = yysep3496, yyq3496, yy2arr3496
			const yyr3496 bool = false
			yyq3496[0] = x.Kind != ""
			yyq3496[1] = x.APIVersion != ""
			yyq3496[2] = x.GracePeriodSeconds != nil
			yyq3496[3] = x.Preconditions != nil
			yyq3496[4] = x.OrphanDependents != nil
			var yynn3496 int
			if yyr3496 || yy2arr3496 {
				r.EncodeArrayStart(5)
			} else {
				yynn3496 = 0
				for _, b := range yyq3496 {
					if b {
						yynn3496++
					}
				}
				r.EncodeMapStart(yynn3496)
				yynn3496 = 0
			}
			if yyr3496 || yy2arr3496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3496[0] {
					yym3498 := z.EncBinary()
					_ = yym3498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3496 || yy2arr3496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3496[1] {
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3496 || yy2arr3496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3496[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3504 := *x.GracePeriodSeconds
						yym3505 := z.EncBinary()
						_ = yym3505
						if false {
						} else {
							r.EncodeInt(int64(yy3504))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3506 := *x.GracePeriodSeconds
						yym3507 := z.EncBinary()
						_ = yym3507
						if false {
						} else {
							r.EncodeInt(int64(yy3506))
						}
					}
				}
			}
			if yyr3496 || yy2arr3496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3496[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3496 || yy2arr3496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3496[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3510 := *x.OrphanDependents
						yym3511 := z.EncBinary()
						_ = yym3511
						if false {
						} else {
							r.EncodeBool(bool(yy3510))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3496[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3512 := *x.OrphanDependents
						yym3513 := z.EncBinary()
						_ = yym3513
						if false {
						} else {
							r.EncodeBool(bool(yy3512))
						}
					}
				}
			}
			if yyr3496 || yy2arr3496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3514 := z.DecBinary()
	_ = yym3514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3515 := r.ContainerType()
		if yyct3515 == codecSelferValueTypeMap1234 {
			yyl3515 := r.ReadMapStart()
			if yyl3515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3515, d)
			}
		} else if yyct3515 == codecSelferValueTypeArray1234 {
			yyl3515 := r.ReadArrayStart()
			if yyl3515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3516Slc
	var yyhl3516 bool = l >= 0
	for yyj3516 := 0; ; yyj3516++ {
		if yyhl3516 {
			if yyj3516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3516Slc = r.DecodeBytes(yys3516Slc, true, true)
		yys3516 := string(yys3516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3516 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3520 := z.DecBinary()
				_ = yym3520
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3523 := z.DecBinary()
				_ = yym3523
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3516)
		} // end switch yys3516
	} // end for yyj3516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3524 int
	var yyb3524 bool
	var yyhl3524 bool = l >= 0
	yyj3524++
	if yyhl3524 {
		yyb3524 = yyj3524 > l
	} else {
		yyb3524 = r.CheckBreak()
	}
	if yyb3524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3524++
	if yyhl3524 {
		yyb3524 = yyj3524 > l
	} else {
		yyb3524 = r.CheckBreak()
	}
	if yyb3524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3524++
	if yyhl3524 {
		yyb3524 = yyj3524 > l
	} else {
		yyb3524 = r.CheckBreak()
	}
	if yyb3524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3528 := z.DecBinary()
		_ = yym3528
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3524++
	if yyhl3524 {
		yyb3524 = yyj3524 > l
	} else {
		yyb3524 = r.CheckBreak()
	}
	if yyb3524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3524++
	if yyhl3524 {
		yyb3524 = yyj3524 > l
	} else {
		yyb3524 = r.CheckBreak()
	}
	if yyb3524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3531 := z.DecBinary()
		_ = yym3531
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3524++
		if yyhl3524 {
			yyb3524 = yyj3524 > l
		} else {
			yyb3524 = r.CheckBreak()
		}
		if yyb3524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3532 := z.EncBinary()
		_ = yym3532
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3533 := !z.EncBinary()
			yy2arr3533 := z.EncBasicHandle().StructToArray
			var yyq3533 [7]bool
			_, _, _ = yysep3533, yyq3533, yy2arr3533
			const yyr3533 bool = false
			yyq3533[0] = x.Kind != ""
			yyq3533[1] = x.APIVersion != ""
			yyq3533[2] = x.LabelSelector != ""
			yyq3533[3] = x.FieldSelector != ""
			yyq3533[4] = x.Watch != false
			yyq3533[5] = x.ResourceVersion != ""
			yyq3533[6] = x.TimeoutSeconds != nil
			var yynn3533 int
			if yyr3533 || yy2arr3533 {
				r.EncodeArrayStart(7)
			} else {
				yynn3533 = 0
				for _, b := range yyq3533 {
					if b {
						yynn3533++
					}
				}
				r.EncodeMapStart(yynn3533)
				yynn3533 = 0
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[0] {
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3533[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3536 := z.EncBinary()
					_ = yym3536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[1] {
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3533[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3539 := z.EncBinary()
					_ = yym3539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[2] {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3533[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[3] {
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3533[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3545 := z.EncBinary()
					_ = yym3545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[4] {
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3533[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[5] {
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3533[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3533[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3553 := *x.TimeoutSeconds
						yym3554 := z.EncBinary()
						_ = yym3554
						if false {
						} else {
							r.EncodeInt(int64(yy3553))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3533[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3555 := *x.TimeoutSeconds
						yym3556 := z.EncBinary()
						_ = yym3556
						if false {
						} else {
							r.EncodeInt(int64(yy3555))
						}
					}
				}
			}
			if yyr3533 || yy2arr3533 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3557 := z.DecBinary()
	_ = yym3557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3558 := r.ContainerType()
		if yyct3558 == codecSelferValueTypeMap1234 {
			yyl3558 := r.ReadMapStart()
			if yyl3558 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3558, d)
			}
		} else if yyct3558 == codecSelferValueTypeArray1234 {
			yyl3558 := r.ReadArrayStart()
			if yyl3558 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3558, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3559Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3559Slc
	var yyhl3559 bool = l >= 0
	for yyj3559 := 0; ; yyj3559++ {
		if yyhl3559 {
			if yyj3559 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3559Slc = r.DecodeBytes(yys3559Slc, true, true)
		yys3559 := string(yys3559Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3559 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3567 := z.DecBinary()
				_ = yym3567
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3559)
		} // end switch yys3559
	} // end for yyj3559
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3568 int
	var yyb3568 bool
	var yyhl3568 bool = l >= 0
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3576 := z.DecBinary()
		_ = yym3576
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3568++
		if yyhl3568 {
			yyb3568 = yyj3568 > l
		} else {
			yyb3568 = r.CheckBreak()
		}
		if yyb3568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3577 := z.EncBinary()
		_ = yym3577
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3578 := !z.EncBinary()
			yy2arr3578 := z.EncBasicHandle().StructToArray
			var yyq3578 [10]bool
			_, _, _ = yysep3578, yyq3578, yy2arr3578
			const yyr3578 bool = false
			yyq3578[0] = x.Kind != ""
			yyq3578[1] = x.APIVersion != ""
			yyq3578[2] = x.Container != ""
			yyq3578[3] = x.Follow != false
			yyq3578[4] = x.Previous != false
			yyq3578[5] = x.SinceSeconds != nil
			yyq3578[6] = x.SinceTime != nil
			yyq3578[7] = x.Timestamps != false
			yyq3578[8] = x.TailLines != nil
			yyq3578[9] = x.LimitBytes != nil
			var yynn3578 int
			if yyr3578 || yy2arr3578 {
				r.EncodeArrayStart(10)
			} else {
				yynn3578 = 0
				for _, b := range yyq3578 {
					if b {
						yynn3578++
					}
				}
				r.EncodeMapStart(yynn3578)
				yynn3578 = 0
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[0] {
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3578[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[1] {
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3578[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[2] {
					yym3586 := z.EncBinary()
					_ = yym3586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3578[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[3] {
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3578[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[4] {
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3578[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3595 := *x.SinceSeconds
						yym3596 := z.EncBinary()
						_ = yym3596
						if false {
						} else {
							r.EncodeInt(int64(yy3595))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3578[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3597 := *x.SinceSeconds
						yym3598 := z.EncBinary()
						_ = yym3598
						if false {
						} else {
							r.EncodeInt(int64(yy3597))
						}
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3600 := z.EncBinary()
						_ = yym3600
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3600 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3600 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3578[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3601 := z.EncBinary()
						_ = yym3601
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3601 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3601 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[7] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3578[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3606 := *x.TailLines
						yym3607 := z.EncBinary()
						_ = yym3607
						if false {
						} else {
							r.EncodeInt(int64(yy3606))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3578[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3608 := *x.TailLines
						yym3609 := z.EncBinary()
						_ = yym3609
						if false {
						} else {
							r.EncodeInt(int64(yy3608))
						}
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3611 := *x.LimitBytes
						yym3612 := z.EncBinary()
						_ = yym3612
						if false {
						} else {
							r.EncodeInt(int64(yy3611))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3578[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3613 := *x.LimitBytes
						yym3614 := z.EncBinary()
						_ = yym3614
						if false {
						} else {
							r.EncodeInt(int64(yy3613))
						}
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3615 := z.DecBinary()
	_ = yym3615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3616 := r.ContainerType()
		if yyct3616 == codecSelferValueTypeMap1234 {
			yyl3616 := r.ReadMapStart()
			if yyl3616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3616, d)
			}
		} else if yyct3616 == codecSelferValueTypeArray1234 {
			yyl3616 := r.ReadArrayStart()
			if yyl3616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3617Slc
	var yyhl3617 bool = l >= 0
	for yyj3617 := 0; ; yyj3617++ {
		if yyhl3617 {
			if yyj3617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3617Slc = r.DecodeBytes(yys3617Slc, true, true)
		yys3617 := string(yys3617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3617 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3624 := z.DecBinary()
				_ = yym3624
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_v1.Time)
				}
				yym3626 := z.DecBinary()
				_ = yym3626
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3626 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3626 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3629 := z.DecBinary()
				_ = yym3629
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3631 := z.DecBinary()
				_ = yym3631
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3617)
		} // end switch yys3617
	} // end for yyj3617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3632 int
	var yyb3632 bool
	var yyhl3632 bool = l >= 0
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3639 := z.DecBinary()
		_ = yym3639
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_v1.Time)
		}
		yym3641 := z.DecBinary()
		_ = yym3641
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3641 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3641 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3644 := z.DecBinary()
		_ = yym3644
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3646 := z.DecBinary()
		_ = yym3646
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3632++
		if yyhl3632 {
			yyb3632 = yyj3632 > l
		} else {
			yyb3632 = r.CheckBreak()
		}
		if yyb3632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3647 := z.EncBinary()
		_ = yym3647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3648 := !z.EncBinary()
			yy2arr3648 := z.EncBasicHandle().StructToArray
			var yyq3648 [7]bool
			_, _, _ = yysep3648, yyq3648, yy2arr3648
			const yyr3648 bool = false
			yyq3648[0] = x.Kind != ""
			yyq3648[1] = x.APIVersion != ""
			yyq3648[2] = x.Stdin != false
			yyq3648[3] = x.Stdout != false
			yyq3648[4] = x.Stderr != false
			yyq3648[5] = x.TTY != false
			yyq3648[6] = x.Container != ""
			var yynn3648 int
			if yyr3648 || yy2arr3648 {
				r.EncodeArrayStart(7)
			} else {
				yynn3648 = 0
				for _, b := range yyq3648 {
					if b {
						yynn3648++
					}
				}
				r.EncodeMapStart(yynn3648)
				yynn3648 = 0
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[0] {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[1] {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[2] {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[3] {
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[4] {
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[5] {
					yym3665 := z.EncBinary()
					_ = yym3665
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[6] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3670 := z.DecBinary()
	_ = yym3670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3671 := r.ContainerType()
		if yyct3671 == codecSelferValueTypeMap1234 {
			yyl3671 := r.ReadMapStart()
			if yyl3671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3671, d)
			}
		} else if yyct3671 == codecSelferValueTypeArray1234 {
			yyl3671 := r.ReadArrayStart()
			if yyl3671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3672Slc
	var yyhl3672 bool = l >= 0
	for yyj3672 := 0; ; yyj3672++ {
		if yyhl3672 {
			if yyj3672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3672Slc = r.DecodeBytes(yys3672Slc, true, true)
		yys3672 := string(yys3672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3672 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3672)
		} // end switch yys3672
	} // end for yyj3672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3680 int
	var yyb3680 bool
	var yyhl3680 bool = l >= 0
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3680++
		if yyhl3680 {
			yyb3680 = yyj3680 > l
		} else {
			yyb3680 = r.CheckBreak()
		}
		if yyb3680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3688 := z.EncBinary()
		_ = yym3688
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3689 := !z.EncBinary()
			yy2arr3689 := z.EncBasicHandle().StructToArray
			var yyq3689 [8]bool
			_, _, _ = yysep3689, yyq3689, yy2arr3689
			const yyr3689 bool = false
			yyq3689[0] = x.Kind != ""
			yyq3689[1] = x.APIVersion != ""
			yyq3689[2] = x.Stdin != false
			yyq3689[3] = x.Stdout != false
			yyq3689[4] = x.Stderr != false
			yyq3689[5] = x.TTY != false
			yyq3689[6] = x.Container != ""
			var yynn3689 int
			if yyr3689 || yy2arr3689 {
				r.EncodeArrayStart(8)
			} else {
				yynn3689 = 1
				for _, b := range yyq3689 {
					if b {
						yynn3689++
					}
				}
				r.EncodeMapStart(yynn3689)
				yynn3689 = 0
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[0] {
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3689[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[1] {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3689[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[2] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3689[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[3] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3689[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[4] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3689[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[5] {
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3689[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[6] {
					yym3709 := z.EncBinary()
					_ = yym3709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3689[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3710 := z.EncBinary()
					_ = yym3710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3712 := z.EncBinary()
					_ = yym3712
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3714 := z.DecBinary()
	_ = yym3714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3715 := r.ContainerType()
		if yyct3715 == codecSelferValueTypeMap1234 {
			yyl3715 := r.ReadMapStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3715, d)
			}
		} else if yyct3715 == codecSelferValueTypeArray1234 {
			yyl3715 := r.ReadArrayStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3716Slc
	var yyhl3716 bool = l >= 0
	for yyj3716 := 0; ; yyj3716++ {
		if yyhl3716 {
			if yyj3716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3716Slc = r.DecodeBytes(yys3716Slc, true, true)
		yys3716 := string(yys3716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3716 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3724 := &x.Command
				yym3725 := z.DecBinary()
				_ = yym3725
				if false {
				} else {
					z.F.DecSliceStringX(yyv3724, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3716)
		} // end switch yys3716
	} // end for yyj3716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3726 int
	var yyb3726 bool
	var yyhl3726 bool = l >= 0
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3734 := &x.Command
		yym3735 := z.DecBinary()
		_ = yym3735
		if false {
		} else {
			z.F.DecSliceStringX(yyv3734, false, d)
		}
	}
	for {
		yyj3726++
		if yyhl3726 {
			yyb3726 = yyj3726 > l
		} else {
			yyb3726 = r.CheckBreak()
		}
		if yyb3726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3736 := z.EncBinary()
		_ = yym3736
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3737 := !z.EncBinary()
			yy2arr3737 := z.EncBasicHandle().StructToArray
			var yyq3737 [3]bool
			_, _, _ = yysep3737, yyq3737, yy2arr3737
			const yyr3737 bool = false
			yyq3737[0] = x.Kind != ""
			yyq3737[1] = x.APIVersion != ""
			yyq3737[2] = x.Path != ""
			var yynn3737 int
			if yyr3737 || yy2arr3737 {
				r.EncodeArrayStart(3)
			} else {
				yynn3737 = 0
				for _, b := range yyq3737 {
					if b {
						yynn3737++
					}
				}
				r.EncodeMapStart(yynn3737)
				yynn3737 = 0
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3737[0] {
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3737[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3737[1] {
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3737[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3737[2] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3737[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3747 := z.DecBinary()
	_ = yym3747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3748 := r.ContainerType()
		if yyct3748 == codecSelferValueTypeMap1234 {
			yyl3748 := r.ReadMapStart()
			if yyl3748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3748, d)
			}
		} else if yyct3748 == codecSelferValueTypeArray1234 {
			yyl3748 := r.ReadArrayStart()
			if yyl3748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3749Slc
	var yyhl3749 bool = l >= 0
	for yyj3749 := 0; ; yyj3749++ {
		if yyhl3749 {
			if yyj3749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3749Slc = r.DecodeBytes(yys3749Slc, true, true)
		yys3749 := string(yys3749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3749)
		} // end switch yys3749
	} // end for yyj3749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3753 int
	var yyb3753 bool
	var yyhl3753 bool = l >= 0
	yyj3753++
	if yyhl3753 {
		yyb3753 = yyj3753 > l
	} else {
		yyb3753 = r.CheckBreak()
	}
	if yyb3753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3753++
	if yyhl3753 {
		yyb3753 = yyj3753 > l
	} else {
		yyb3753 = r.CheckBreak()
	}
	if yyb3753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3753++
	if yyhl3753 {
		yyb3753 = yyj3753 > l
	} else {
		yyb3753 = r.CheckBreak()
	}
	if yyb3753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3753++
		if yyhl3753 {
			yyb3753 = yyj3753 > l
		} else {
			yyb3753 = r.CheckBreak()
		}
		if yyb3753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3757 := z.EncBinary()
		_ = yym3757
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3758 := !z.EncBinary()
			yy2arr3758 := z.EncBasicHandle().StructToArray
			var yyq3758 [3]bool
			_, _, _ = yysep3758, yyq3758, yy2arr3758
			const yyr3758 bool = false
			yyq3758[0] = x.Kind != ""
			yyq3758[1] = x.APIVersion != ""
			yyq3758[2] = x.Path != ""
			var yynn3758 int
			if yyr3758 || yy2arr3758 {
				r.EncodeArrayStart(3)
			} else {
				yynn3758 = 0
				for _, b := range yyq3758 {
					if b {
						yynn3758++
					}
				}
				r.EncodeMapStart(yynn3758)
				yynn3758 = 0
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[0] {
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[1] {
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[2] {
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3767 := z.EncBinary()
					_ = yym3767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3768 := z.DecBinary()
	_ = yym3768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3769 := r.ContainerType()
		if yyct3769 == codecSelferValueTypeMap1234 {
			yyl3769 := r.ReadMapStart()
			if yyl3769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3769, d)
			}
		} else if yyct3769 == codecSelferValueTypeArray1234 {
			yyl3769 := r.ReadArrayStart()
			if yyl3769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3770Slc
	var yyhl3770 bool = l >= 0
	for yyj3770 := 0; ; yyj3770++ {
		if yyhl3770 {
			if yyj3770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3770Slc = r.DecodeBytes(yys3770Slc, true, true)
		yys3770 := string(yys3770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3770)
		} // end switch yys3770
	} // end for yyj3770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3774 int
	var yyb3774 bool
	var yyhl3774 bool = l >= 0
	yyj3774++
	if yyhl3774 {
		yyb3774 = yyj3774 > l
	} else {
		yyb3774 = r.CheckBreak()
	}
	if yyb3774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3774++
	if yyhl3774 {
		yyb3774 = yyj3774 > l
	} else {
		yyb3774 = r.CheckBreak()
	}
	if yyb3774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3774++
	if yyhl3774 {
		yyb3774 = yyj3774 > l
	} else {
		yyb3774 = r.CheckBreak()
	}
	if yyb3774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3774++
		if yyhl3774 {
			yyb3774 = yyj3774 > l
		} else {
			yyb3774 = r.CheckBreak()
		}
		if yyb3774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3778 := z.EncBinary()
		_ = yym3778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3779 := !z.EncBinary()
			yy2arr3779 := z.EncBasicHandle().StructToArray
			var yyq3779 [3]bool
			_, _, _ = yysep3779, yyq3779, yy2arr3779
			const yyr3779 bool = false
			yyq3779[0] = x.Kind != ""
			yyq3779[1] = x.APIVersion != ""
			yyq3779[2] = x.Path != ""
			var yynn3779 int
			if yyr3779 || yy2arr3779 {
				r.EncodeArrayStart(3)
			} else {
				yynn3779 = 0
				for _, b := range yyq3779 {
					if b {
						yynn3779++
					}
				}
				r.EncodeMapStart(yynn3779)
				yynn3779 = 0
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3779[0] {
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3779[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3782 := z.EncBinary()
					_ = yym3782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3779[1] {
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3779[2] {
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3789 := z.DecBinary()
	_ = yym3789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3790 := r.ContainerType()
		if yyct3790 == codecSelferValueTypeMap1234 {
			yyl3790 := r.ReadMapStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3790, d)
			}
		} else if yyct3790 == codecSelferValueTypeArray1234 {
			yyl3790 := r.ReadArrayStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3791Slc
	var yyhl3791 bool = l >= 0
	for yyj3791 := 0; ; yyj3791++ {
		if yyhl3791 {
			if yyj3791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3791Slc = r.DecodeBytes(yys3791Slc, true, true)
		yys3791 := string(yys3791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3791 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3791)
		} // end switch yys3791
	} // end for yyj3791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3795 int
	var yyb3795 bool
	var yyhl3795 bool = l >= 0
	yyj3795++
	if yyhl3795 {
		yyb3795 = yyj3795 > l
	} else {
		yyb3795 = r.CheckBreak()
	}
	if yyb3795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3795++
	if yyhl3795 {
		yyb3795 = yyj3795 > l
	} else {
		yyb3795 = r.CheckBreak()
	}
	if yyb3795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3795++
	if yyhl3795 {
		yyb3795 = yyj3795 > l
	} else {
		yyb3795 = r.CheckBreak()
	}
	if yyb3795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3795++
		if yyhl3795 {
			yyb3795 = yyj3795 > l
		} else {
			yyb3795 = r.CheckBreak()
		}
		if yyb3795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3799 := z.EncBinary()
		_ = yym3799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3800 := !z.EncBinary()
			yy2arr3800 := z.EncBasicHandle().StructToArray
			var yyq3800 [7]bool
			_, _, _ = yysep3800, yyq3800, yy2arr3800
			const yyr3800 bool = false
			yyq3800[0] = x.Kind != ""
			yyq3800[1] = x.Namespace != ""
			yyq3800[2] = x.Name != ""
			yyq3800[3] = x.UID != ""
			yyq3800[4] = x.APIVersion != ""
			yyq3800[5] = x.ResourceVersion != ""
			yyq3800[6] = x.FieldPath != ""
			var yynn3800 int
			if yyr3800 || yy2arr3800 {
				r.EncodeArrayStart(7)
			} else {
				yynn3800 = 0
				for _, b := range yyq3800 {
					if b {
						yynn3800++
					}
				}
				r.EncodeMapStart(yynn3800)
				yynn3800 = 0
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[0] {
					yym3802 := z.EncBinary()
					_ = yym3802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3803 := z.EncBinary()
					_ = yym3803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[1] {
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[2] {
					yym3808 := z.EncBinary()
					_ = yym3808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[3] {
					yym3811 := z.EncBinary()
					_ = yym3811
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3812 := z.EncBinary()
					_ = yym3812
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[4] {
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[5] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[6] {
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3800[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3822 := z.DecBinary()
	_ = yym3822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3823 := r.ContainerType()
		if yyct3823 == codecSelferValueTypeMap1234 {
			yyl3823 := r.ReadMapStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3823, d)
			}
		} else if yyct3823 == codecSelferValueTypeArray1234 {
			yyl3823 := r.ReadArrayStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3824Slc
	var yyhl3824 bool = l >= 0
	for yyj3824 := 0; ; yyj3824++ {
		if yyhl3824 {
			if yyj3824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3824Slc = r.DecodeBytes(yys3824Slc, true, true)
		yys3824 := string(yys3824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3824 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3824)
		} // end switch yys3824
	} // end for yyj3824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3832 int
	var yyb3832 bool
	var yyhl3832 bool = l >= 0
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3832++
	if yyhl3832 {
		yyb3832 = yyj3832 > l
	} else {
		yyb3832 = r.CheckBreak()
	}
	if yyb3832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3832++
		if yyhl3832 {
			yyb3832 = yyj3832 > l
		} else {
			yyb3832 = r.CheckBreak()
		}
		if yyb3832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3840 := z.EncBinary()
		_ = yym3840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3841 := !z.EncBinary()
			yy2arr3841 := z.EncBasicHandle().StructToArray
			var yyq3841 [1]bool
			_, _, _ = yysep3841, yyq3841, yy2arr3841
			const yyr3841 bool = false
			yyq3841[0] = x.Name != ""
			var yynn3841 int
			if yyr3841 || yy2arr3841 {
				r.EncodeArrayStart(1)
			} else {
				yynn3841 = 0
				for _, b := range yyq3841 {
					if b {
						yynn3841++
					}
				}
				r.EncodeMapStart(yynn3841)
				yynn3841 = 0
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3841[0] {
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3841[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3845 := z.DecBinary()
	_ = yym3845
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3846 := r.ContainerType()
		if yyct3846 == codecSelferValueTypeMap1234 {
			yyl3846 := r.ReadMapStart()
			if yyl3846 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3846, d)
			}
		} else if yyct3846 == codecSelferValueTypeArray1234 {
			yyl3846 := r.ReadArrayStart()
			if yyl3846 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3846, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3847Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3847Slc
	var yyhl3847 bool = l >= 0
	for yyj3847 := 0; ; yyj3847++ {
		if yyhl3847 {
			if yyj3847 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3847Slc = r.DecodeBytes(yys3847Slc, true, true)
		yys3847 := string(yys3847Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3847 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3847)
		} // end switch yys3847
	} // end for yyj3847
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3849 int
	var yyb3849 bool
	var yyhl3849 bool = l >= 0
	yyj3849++
	if yyhl3849 {
		yyb3849 = yyj3849 > l
	} else {
		yyb3849 = r.CheckBreak()
	}
	if yyb3849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3849++
		if yyhl3849 {
			yyb3849 = yyj3849 > l
		} else {
			yyb3849 = r.CheckBreak()
		}
		if yyb3849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3851 := z.EncBinary()
		_ = yym3851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3852 := !z.EncBinary()
			yy2arr3852 := z.EncBasicHandle().StructToArray
			var yyq3852 [3]bool
			_, _, _ = yysep3852, yyq3852, yy2arr3852
			const yyr3852 bool = false
			yyq3852[0] = x.Kind != ""
			yyq3852[1] = x.APIVersion != ""
			yyq3852[2] = true
			var yynn3852 int
			if yyr3852 || yy2arr3852 {
				r.EncodeArrayStart(3)
			} else {
				yynn3852 = 0
				for _, b := range yyq3852 {
					if b {
						yynn3852++
					}
				}
				r.EncodeMapStart(yynn3852)
				yynn3852 = 0
			}
			if yyr3852 || yy2arr3852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3852[0] {
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3852[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3852 || yy2arr3852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3852[1] {
					yym3857 := z.EncBinary()
					_ = yym3857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3852[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3852 || yy2arr3852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3852[2] {
					yy3860 := &x.Reference
					yy3860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3852[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3861 := &x.Reference
					yy3861.CodecEncodeSelf(e)
				}
			}
			if yyr3852 || yy2arr3852 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3862 := z.DecBinary()
	_ = yym3862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3863 := r.ContainerType()
		if yyct3863 == codecSelferValueTypeMap1234 {
			yyl3863 := r.ReadMapStart()
			if yyl3863 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3863, d)
			}
		} else if yyct3863 == codecSelferValueTypeArray1234 {
			yyl3863 := r.ReadArrayStart()
			if yyl3863 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3864Slc
	var yyhl3864 bool = l >= 0
	for yyj3864 := 0; ; yyj3864++ {
		if yyhl3864 {
			if yyj3864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3864Slc = r.DecodeBytes(yys3864Slc, true, true)
		yys3864 := string(yys3864Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3864 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3867 := &x.Reference
				yyv3867.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3864)
		} // end switch yys3864
	} // end for yyj3864
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3868 int
	var yyb3868 bool
	var yyhl3868 bool = l >= 0
	yyj3868++
	if yyhl3868 {
		yyb3868 = yyj3868 > l
	} else {
		yyb3868 = r.CheckBreak()
	}
	if yyb3868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3868++
	if yyhl3868 {
		yyb3868 = yyj3868 > l
	} else {
		yyb3868 = r.CheckBreak()
	}
	if yyb3868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3868++
	if yyhl3868 {
		yyb3868 = yyj3868 > l
	} else {
		yyb3868 = r.CheckBreak()
	}
	if yyb3868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3871 := &x.Reference
		yyv3871.CodecDecodeSelf(d)
	}
	for {
		yyj3868++
		if yyhl3868 {
			yyb3868 = yyj3868 > l
		} else {
			yyb3868 = r.CheckBreak()
		}
		if yyb3868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3872 := z.EncBinary()
		_ = yym3872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3873 := !z.EncBinary()
			yy2arr3873 := z.EncBasicHandle().StructToArray
			var yyq3873 [2]bool
			_, _, _ = yysep3873, yyq3873, yy2arr3873
			const yyr3873 bool = false
			yyq3873[0] = x.Component != ""
			yyq3873[1] = x.Host != ""
			var yynn3873 int
			if yyr3873 || yy2arr3873 {
				r.EncodeArrayStart(2)
			} else {
				yynn3873 = 0
				for _, b := range yyq3873 {
					if b {
						yynn3873++
					}
				}
				r.EncodeMapStart(yynn3873)
				yynn3873 = 0
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[0] {
					yym3875 := z.EncBinary()
					_ = yym3875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3873[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[1] {
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3873[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3880 := z.DecBinary()
	_ = yym3880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3881 := r.ContainerType()
		if yyct3881 == codecSelferValueTypeMap1234 {
			yyl3881 := r.ReadMapStart()
			if yyl3881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3881, d)
			}
		} else if yyct3881 == codecSelferValueTypeArray1234 {
			yyl3881 := r.ReadArrayStart()
			if yyl3881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3882Slc
	var yyhl3882 bool = l >= 0
	for yyj3882 := 0; ; yyj3882++ {
		if yyhl3882 {
			if yyj3882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3882Slc = r.DecodeBytes(yys3882Slc, true, true)
		yys3882 := string(yys3882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3882 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3882)
		} // end switch yys3882
	} // end for yyj3882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3885 int
	var yyb3885 bool
	var yyhl3885 bool = l >= 0
	yyj3885++
	if yyhl3885 {
		yyb3885 = yyj3885 > l
	} else {
		yyb3885 = r.CheckBreak()
	}
	if yyb3885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3885++
	if yyhl3885 {
		yyb3885 = yyj3885 > l
	} else {
		yyb3885 = r.CheckBreak()
	}
	if yyb3885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3885++
		if yyhl3885 {
			yyb3885 = yyj3885 > l
		} else {
			yyb3885 = r.CheckBreak()
		}
		if yyb3885 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3885-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3888 := z.EncBinary()
		_ = yym3888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3889 := !z.EncBinary()
			yy2arr3889 := z.EncBasicHandle().StructToArray
			var yyq3889 [11]bool
			_, _, _ = yysep3889, yyq3889, yy2arr3889
			const yyr3889 bool = false
			yyq3889[0] = x.Kind != ""
			yyq3889[1] = x.APIVersion != ""
			yyq3889[4] = x.Reason != ""
			yyq3889[5] = x.Message != ""
			yyq3889[6] = true
			yyq3889[7] = true
			yyq3889[8] = true
			yyq3889[9] = x.Count != 0
			yyq3889[10] = x.Type != ""
			var yynn3889 int
			if yyr3889 || yy2arr3889 {
				r.EncodeArrayStart(11)
			} else {
				yynn3889 = 2
				for _, b := range yyq3889 {
					if b {
						yynn3889++
					}
				}
				r.EncodeMapStart(yynn3889)
				yynn3889 = 0
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[0] {
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[1] {
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3897 := &x.ObjectMeta
				yy3897.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3898 := &x.ObjectMeta
				yy3898.CodecEncodeSelf(e)
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3900 := &x.InvolvedObject
				yy3900.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3901 := &x.InvolvedObject
				yy3901.CodecEncodeSelf(e)
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[4] {
					yym3903 := z.EncBinary()
					_ = yym3903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[5] {
					yym3906 := z.EncBinary()
					_ = yym3906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3907 := z.EncBinary()
					_ = yym3907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[6] {
					yy3909 := &x.Source
					yy3909.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3889[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3910 := &x.Source
					yy3910.CodecEncodeSelf(e)
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[7] {
					yy3912 := &x.FirstTimestamp
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3912) {
					} else if yym3913 {
						z.EncBinaryMarshal(yy3912)
					} else if !yym3913 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3912)
					} else {
						z.EncFallback(yy3912)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3889[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3914 := &x.FirstTimestamp
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3914) {
					} else if yym3915 {
						z.EncBinaryMarshal(yy3914)
					} else if !yym3915 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3914)
					} else {
						z.EncFallback(yy3914)
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[8] {
					yy3917 := &x.LastTimestamp
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3917) {
					} else if yym3918 {
						z.EncBinaryMarshal(yy3917)
					} else if !yym3918 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3917)
					} else {
						z.EncFallback(yy3917)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3889[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3919 := &x.LastTimestamp
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3919) {
					} else if yym3920 {
						z.EncBinaryMarshal(yy3919)
					} else if !yym3920 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3919)
					} else {
						z.EncFallback(yy3919)
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[9] {
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3889[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[10] {
					yym3925 := z.EncBinary()
					_ = yym3925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3927 := z.DecBinary()
	_ = yym3927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3928 := r.ContainerType()
		if yyct3928 == codecSelferValueTypeMap1234 {
			yyl3928 := r.ReadMapStart()
			if yyl3928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3928, d)
			}
		} else if yyct3928 == codecSelferValueTypeArray1234 {
			yyl3928 := r.ReadArrayStart()
			if yyl3928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3929Slc
	var yyhl3929 bool = l >= 0
	for yyj3929 := 0; ; yyj3929++ {
		if yyhl3929 {
			if yyj3929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3929Slc = r.DecodeBytes(yys3929Slc, true, true)
		yys3929 := string(yys3929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3929 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3932 := &x.ObjectMeta
				yyv3932.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3933 := &x.InvolvedObject
				yyv3933.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3936 := &x.Source
				yyv3936.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_v1.Time{}
			} else {
				yyv3937 := &x.FirstTimestamp
				yym3938 := z.DecBinary()
				_ = yym3938
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3937) {
				} else if yym3938 {
					z.DecBinaryUnmarshal(yyv3937)
				} else if !yym3938 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3937)
				} else {
					z.DecFallback(yyv3937, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_v1.Time{}
			} else {
				yyv3939 := &x.LastTimestamp
				yym3940 := z.DecBinary()
				_ = yym3940
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3939) {
				} else if yym3940 {
					z.DecBinaryUnmarshal(yyv3939)
				} else if !yym3940 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3939)
				} else {
					z.DecFallback(yyv3939, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3929)
		} // end switch yys3929
	} // end for yyj3929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3943 int
	var yyb3943 bool
	var yyhl3943 bool = l >= 0
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3946 := &x.ObjectMeta
		yyv3946.CodecDecodeSelf(d)
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3947 := &x.InvolvedObject
		yyv3947.CodecDecodeSelf(d)
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3950 := &x.Source
		yyv3950.CodecDecodeSelf(d)
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_v1.Time{}
	} else {
		yyv3951 := &x.FirstTimestamp
		yym3952 := z.DecBinary()
		_ = yym3952
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3951) {
		} else if yym3952 {
			z.DecBinaryUnmarshal(yyv3951)
		} else if !yym3952 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3951)
		} else {
			z.DecFallback(yyv3951, false)
		}
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_v1.Time{}
	} else {
		yyv3953 := &x.LastTimestamp
		yym3954 := z.DecBinary()
		_ = yym3954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3953) {
		} else if yym3954 {
			z.DecBinaryUnmarshal(yyv3953)
		} else if !yym3954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3953)
		} else {
			z.DecFallback(yyv3953, false)
		}
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3943++
	if yyhl3943 {
		yyb3943 = yyj3943 > l
	} else {
		yyb3943 = r.CheckBreak()
	}
	if yyb3943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3943++
		if yyhl3943 {
			yyb3943 = yyj3943 > l
		} else {
			yyb3943 = r.CheckBreak()
		}
		if yyb3943 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3943-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3957 := z.EncBinary()
		_ = yym3957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3958 := !z.EncBinary()
			yy2arr3958 := z.EncBasicHandle().StructToArray
			var yyq3958 [4]bool
			_, _, _ = yysep3958, yyq3958, yy2arr3958
			const yyr3958 bool = false
			yyq3958[0] = x.Kind != ""
			yyq3958[1] = x.APIVersion != ""
			yyq3958[2] = true
			var yynn3958 int
			if yyr3958 || yy2arr3958 {
				r.EncodeArrayStart(4)
			} else {
				yynn3958 = 1
				for _, b := range yyq3958 {
					if b {
						yynn3958++
					}
				}
				r.EncodeMapStart(yynn3958)
				yynn3958 = 0
			}
			if yyr3958 || yy2arr3958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3958[0] {
					yym3960 := z.EncBinary()
					_ = yym3960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3958[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3961 := z.EncBinary()
					_ = yym3961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3958 || yy2arr3958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3958[1] {
					yym3963 := z.EncBinary()
					_ = yym3963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3964 := z.EncBinary()
					_ = yym3964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3958 || yy2arr3958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3958[2] {
					yy3966 := &x.ListMeta
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3966) {
					} else {
						z.EncFallback(yy3966)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3968 := &x.ListMeta
					yym3969 := z.EncBinary()
					_ = yym3969
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3968) {
					} else {
						z.EncFallback(yy3968)
					}
				}
			}
			if yyr3958 || yy2arr3958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3972 := z.EncBinary()
					_ = yym3972
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3958 || yy2arr3958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3973 := z.DecBinary()
	_ = yym3973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3974 := r.ContainerType()
		if yyct3974 == codecSelferValueTypeMap1234 {
			yyl3974 := r.ReadMapStart()
			if yyl3974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3974, d)
			}
		} else if yyct3974 == codecSelferValueTypeArray1234 {
			yyl3974 := r.ReadArrayStart()
			if yyl3974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3975Slc
	var yyhl3975 bool = l >= 0
	for yyj3975 := 0; ; yyj3975++ {
		if yyhl3975 {
			if yyj3975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3975Slc = r.DecodeBytes(yys3975Slc, true, true)
		yys3975 := string(yys3975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3975 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3978 := &x.ListMeta
				yym3979 := z.DecBinary()
				_ = yym3979
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3978) {
				} else {
					z.DecFallback(yyv3978, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3980 := &x.Items
				yym3981 := z.DecBinary()
				_ = yym3981
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3980), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3975)
		} // end switch yys3975
	} // end for yyj3975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3982 int
	var yyb3982 bool
	var yyhl3982 bool = l >= 0
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3985 := &x.ListMeta
		yym3986 := z.DecBinary()
		_ = yym3986
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3985) {
		} else {
			z.DecFallback(yyv3985, false)
		}
	}
	yyj3982++
	if yyhl3982 {
		yyb3982 = yyj3982 > l
	} else {
		yyb3982 = r.CheckBreak()
	}
	if yyb3982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3987 := &x.Items
		yym3988 := z.DecBinary()
		_ = yym3988
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3987), d)
		}
	}
	for {
		yyj3982++
		if yyhl3982 {
			yyb3982 = yyj3982 > l
		} else {
			yyb3982 = r.CheckBreak()
		}
		if yyb3982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3989 := z.EncBinary()
		_ = yym3989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3990 := !z.EncBinary()
			yy2arr3990 := z.EncBasicHandle().StructToArray
			var yyq3990 [4]bool
			_, _, _ = yysep3990, yyq3990, yy2arr3990
			const yyr3990 bool = false
			yyq3990[0] = x.Kind != ""
			yyq3990[1] = x.APIVersion != ""
			yyq3990[2] = true
			var yynn3990 int
			if yyr3990 || yy2arr3990 {
				r.EncodeArrayStart(4)
			} else {
				yynn3990 = 1
				for _, b := range yyq3990 {
					if b {
						yynn3990++
					}
				}
				r.EncodeMapStart(yynn3990)
				yynn3990 = 0
			}
			if yyr3990 || yy2arr3990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3990[0] {
					yym3992 := z.EncBinary()
					_ = yym3992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3990[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3993 := z.EncBinary()
					_ = yym3993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3990 || yy2arr3990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3990[1] {
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3990[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3996 := z.EncBinary()
					_ = yym3996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3990 || yy2arr3990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3990[2] {
					yy3998 := &x.ListMeta
					yym3999 := z.EncBinary()
					_ = yym3999
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3998) {
					} else {
						z.EncFallback(yy3998)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3990[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4000 := &x.ListMeta
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4000) {
					} else {
						z.EncFallback(yy4000)
					}
				}
			}
			if yyr3990 || yy2arr3990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4003 := z.EncBinary()
					_ = yym4003
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3990 || yy2arr3990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4005 := z.DecBinary()
	_ = yym4005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4006 := r.ContainerType()
		if yyct4006 == codecSelferValueTypeMap1234 {
			yyl4006 := r.ReadMapStart()
			if yyl4006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4006, d)
			}
		} else if yyct4006 == codecSelferValueTypeArray1234 {
			yyl4006 := r.ReadArrayStart()
			if yyl4006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4007Slc
	var yyhl4007 bool = l >= 0
	for yyj4007 := 0; ; yyj4007++ {
		if yyhl4007 {
			if yyj4007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4007Slc = r.DecodeBytes(yys4007Slc, true, true)
		yys4007 := string(yys4007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4007 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4010 := &x.ListMeta
				yym4011 := z.DecBinary()
				_ = yym4011
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4010) {
				} else {
					z.DecFallback(yyv4010, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4012 := &x.Items
				yym4013 := z.DecBinary()
				_ = yym4013
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4012), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4007)
		} // end switch yys4007
	} // end for yyj4007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4014 int
	var yyb4014 bool
	var yyhl4014 bool = l >= 0
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4017 := &x.ListMeta
		yym4018 := z.DecBinary()
		_ = yym4018
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4017) {
		} else {
			z.DecFallback(yyv4017, false)
		}
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4019 := &x.Items
		yym4020 := z.DecBinary()
		_ = yym4020
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv4019), d)
		}
	}
	for {
		yyj4014++
		if yyhl4014 {
			yyb4014 = yyj4014 > l
		} else {
			yyb4014 = r.CheckBreak()
		}
		if yyb4014 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4014-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4021 := z.EncBinary()
	_ = yym4021
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4022 := z.DecBinary()
	_ = yym4022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4023 := z.EncBinary()
		_ = yym4023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4024 := !z.EncBinary()
			yy2arr4024 := z.EncBasicHandle().StructToArray
			var yyq4024 [6]bool
			_, _, _ = yysep4024, yyq4024, yy2arr4024
			const yyr4024 bool = false
			yyq4024[0] = x.Type != ""
			yyq4024[1] = len(x.Max) != 0
			yyq4024[2] = len(x.Min) != 0
			yyq4024[3] = len(x.Default) != 0
			yyq4024[4] = len(x.DefaultRequest) != 0
			yyq4024[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4024 int
			if yyr4024 || yy2arr4024 {
				r.EncodeArrayStart(6)
			} else {
				yynn4024 = 0
				for _, b := range yyq4024 {
					if b {
						yynn4024++
					}
				}
				r.EncodeMapStart(yynn4024)
				yynn4024 = 0
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4024[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4024[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4024[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4031 := z.DecBinary()
	_ = yym4031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4032 := r.ContainerType()
		if yyct4032 == codecSelferValueTypeMap1234 {
			yyl4032 := r.ReadMapStart()
			if yyl4032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4032, d)
			}
		} else if yyct4032 == codecSelferValueTypeArray1234 {
			yyl4032 := r.ReadArrayStart()
			if yyl4032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4033Slc
	var yyhl4033 bool = l >= 0
	for yyj4033 := 0; ; yyj4033++ {
		if yyhl4033 {
			if yyj4033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4033Slc = r.DecodeBytes(yys4033Slc, true, true)
		yys4033 := string(yys4033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4033 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4035 := &x.Max
				yyv4035.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4036 := &x.Min
				yyv4036.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4037 := &x.Default
				yyv4037.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4038 := &x.DefaultRequest
				yyv4038.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4039 := &x.MaxLimitRequestRatio
				yyv4039.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4033)
		} // end switch yys4033
	} // end for yyj4033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4040 int
	var yyb4040 bool
	var yyhl4040 bool = l >= 0
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4042 := &x.Max
		yyv4042.CodecDecodeSelf(d)
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4043 := &x.Min
		yyv4043.CodecDecodeSelf(d)
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4044 := &x.Default
		yyv4044.CodecDecodeSelf(d)
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4045 := &x.DefaultRequest
		yyv4045.CodecDecodeSelf(d)
	}
	yyj4040++
	if yyhl4040 {
		yyb4040 = yyj4040 > l
	} else {
		yyb4040 = r.CheckBreak()
	}
	if yyb4040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4046 := &x.MaxLimitRequestRatio
		yyv4046.CodecDecodeSelf(d)
	}
	for {
		yyj4040++
		if yyhl4040 {
			yyb4040 = yyj4040 > l
		} else {
			yyb4040 = r.CheckBreak()
		}
		if yyb4040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4047 := z.EncBinary()
		_ = yym4047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4048 := !z.EncBinary()
			yy2arr4048 := z.EncBasicHandle().StructToArray
			var yyq4048 [1]bool
			_, _, _ = yysep4048, yyq4048, yy2arr4048
			const yyr4048 bool = false
			var yynn4048 int
			if yyr4048 || yy2arr4048 {
				r.EncodeArrayStart(1)
			} else {
				yynn4048 = 1
				for _, b := range yyq4048 {
					if b {
						yynn4048++
					}
				}
				r.EncodeMapStart(yynn4048)
				yynn4048 = 0
			}
			if yyr4048 || yy2arr4048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4050 := z.EncBinary()
					_ = yym4050
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4051 := z.EncBinary()
					_ = yym4051
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4048 || yy2arr4048 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4052 := z.DecBinary()
	_ = yym4052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4053 := r.ContainerType()
		if yyct4053 == codecSelferValueTypeMap1234 {
			yyl4053 := r.ReadMapStart()
			if yyl4053 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4053, d)
			}
		} else if yyct4053 == codecSelferValueTypeArray1234 {
			yyl4053 := r.ReadArrayStart()
			if yyl4053 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4054Slc
	var yyhl4054 bool = l >= 0
	for yyj4054 := 0; ; yyj4054++ {
		if yyhl4054 {
			if yyj4054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4054Slc = r.DecodeBytes(yys4054Slc, true, true)
		yys4054 := string(yys4054Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4054 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4055 := &x.Limits
				yym4056 := z.DecBinary()
				_ = yym4056
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4055), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4054)
		} // end switch yys4054
	} // end for yyj4054
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4057 int
	var yyb4057 bool
	var yyhl4057 bool = l >= 0
	yyj4057++
	if yyhl4057 {
		yyb4057 = yyj4057 > l
	} else {
		yyb4057 = r.CheckBreak()
	}
	if yyb4057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4058 := &x.Limits
		yym4059 := z.DecBinary()
		_ = yym4059
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4058), d)
		}
	}
	for {
		yyj4057++
		if yyhl4057 {
			yyb4057 = yyj4057 > l
		} else {
			yyb4057 = r.CheckBreak()
		}
		if yyb4057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4060 := z.EncBinary()
		_ = yym4060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4061 := !z.EncBinary()
			yy2arr4061 := z.EncBasicHandle().StructToArray
			var yyq4061 [4]bool
			_, _, _ = yysep4061, yyq4061, yy2arr4061
			const yyr4061 bool = false
			yyq4061[0] = x.Kind != ""
			yyq4061[1] = x.APIVersion != ""
			yyq4061[2] = true
			yyq4061[3] = true
			var yynn4061 int
			if yyr4061 || yy2arr4061 {
				r.EncodeArrayStart(4)
			} else {
				yynn4061 = 0
				for _, b := range yyq4061 {
					if b {
						yynn4061++
					}
				}
				r.EncodeMapStart(yynn4061)
				yynn4061 = 0
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[0] {
					yym4063 := z.EncBinary()
					_ = yym4063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[1] {
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[2] {
					yy4069 := &x.ObjectMeta
					yy4069.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4061[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4070 := &x.ObjectMeta
					yy4070.CodecEncodeSelf(e)
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[3] {
					yy4072 := &x.Spec
					yy4072.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4061[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4073 := &x.Spec
					yy4073.CodecEncodeSelf(e)
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4074 := z.DecBinary()
	_ = yym4074
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4075 := r.ContainerType()
		if yyct4075 == codecSelferValueTypeMap1234 {
			yyl4075 := r.ReadMapStart()
			if yyl4075 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4075, d)
			}
		} else if yyct4075 == codecSelferValueTypeArray1234 {
			yyl4075 := r.ReadArrayStart()
			if yyl4075 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4075, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4076Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4076Slc
	var yyhl4076 bool = l >= 0
	for yyj4076 := 0; ; yyj4076++ {
		if yyhl4076 {
			if yyj4076 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4076Slc = r.DecodeBytes(yys4076Slc, true, true)
		yys4076 := string(yys4076Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4076 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4079 := &x.ObjectMeta
				yyv4079.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4080 := &x.Spec
				yyv4080.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4076)
		} // end switch yys4076
	} // end for yyj4076
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4081 int
	var yyb4081 bool
	var yyhl4081 bool = l >= 0
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4084 := &x.ObjectMeta
		yyv4084.CodecDecodeSelf(d)
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4085 := &x.Spec
		yyv4085.CodecDecodeSelf(d)
	}
	for {
		yyj4081++
		if yyhl4081 {
			yyb4081 = yyj4081 > l
		} else {
			yyb4081 = r.CheckBreak()
		}
		if yyb4081 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4081-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4086 := z.EncBinary()
		_ = yym4086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4087 := !z.EncBinary()
			yy2arr4087 := z.EncBasicHandle().StructToArray
			var yyq4087 [4]bool
			_, _, _ = yysep4087, yyq4087, yy2arr4087
			const yyr4087 bool = false
			yyq4087[0] = x.Kind != ""
			yyq4087[1] = x.APIVersion != ""
			yyq4087[2] = true
			var yynn4087 int
			if yyr4087 || yy2arr4087 {
				r.EncodeArrayStart(4)
			} else {
				yynn4087 = 1
				for _, b := range yyq4087 {
					if b {
						yynn4087++
					}
				}
				r.EncodeMapStart(yynn4087)
				yynn4087 = 0
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[0] {
					yym4089 := z.EncBinary()
					_ = yym4089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4087[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4090 := z.EncBinary()
					_ = yym4090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[1] {
					yym4092 := z.EncBinary()
					_ = yym4092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4093 := z.EncBinary()
					_ = yym4093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4087[2] {
					yy4095 := &x.ListMeta
					yym4096 := z.EncBinary()
					_ = yym4096
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4095) {
					} else {
						z.EncFallback(yy4095)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4087[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4097 := &x.ListMeta
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4097) {
					} else {
						z.EncFallback(yy4097)
					}
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4100 := z.EncBinary()
					_ = yym4100
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4101 := z.EncBinary()
					_ = yym4101
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4087 || yy2arr4087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4102 := z.DecBinary()
	_ = yym4102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4103 := r.ContainerType()
		if yyct4103 == codecSelferValueTypeMap1234 {
			yyl4103 := r.ReadMapStart()
			if yyl4103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4103, d)
			}
		} else if yyct4103 == codecSelferValueTypeArray1234 {
			yyl4103 := r.ReadArrayStart()
			if yyl4103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4104Slc
	var yyhl4104 bool = l >= 0
	for yyj4104 := 0; ; yyj4104++ {
		if yyhl4104 {
			if yyj4104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4104Slc = r.DecodeBytes(yys4104Slc, true, true)
		yys4104 := string(yys4104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4104 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4107 := &x.ListMeta
				yym4108 := z.DecBinary()
				_ = yym4108
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4107) {
				} else {
					z.DecFallback(yyv4107, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4109 := &x.Items
				yym4110 := z.DecBinary()
				_ = yym4110
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4104)
		} // end switch yys4104
	} // end for yyj4104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4111 int
	var yyb4111 bool
	var yyhl4111 bool = l >= 0
	yyj4111++
	if yyhl4111 {
		yyb4111 = yyj4111 > l
	} else {
		yyb4111 = r.CheckBreak()
	}
	if yyb4111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4111++
	if yyhl4111 {
		yyb4111 = yyj4111 > l
	} else {
		yyb4111 = r.CheckBreak()
	}
	if yyb4111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4111++
	if yyhl4111 {
		yyb4111 = yyj4111 > l
	} else {
		yyb4111 = r.CheckBreak()
	}
	if yyb4111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4114 := &x.ListMeta
		yym4115 := z.DecBinary()
		_ = yym4115
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4114) {
		} else {
			z.DecFallback(yyv4114, false)
		}
	}
	yyj4111++
	if yyhl4111 {
		yyb4111 = yyj4111 > l
	} else {
		yyb4111 = r.CheckBreak()
	}
	if yyb4111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4116 := &x.Items
		yym4117 := z.DecBinary()
		_ = yym4117
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4116), d)
		}
	}
	for {
		yyj4111++
		if yyhl4111 {
			yyb4111 = yyj4111 > l
		} else {
			yyb4111 = r.CheckBreak()
		}
		if yyb4111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4118 := z.EncBinary()
	_ = yym4118
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4119 := z.DecBinary()
	_ = yym4119
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4120 := z.EncBinary()
		_ = yym4120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4121 := !z.EncBinary()
			yy2arr4121 := z.EncBasicHandle().StructToArray
			var yyq4121 [2]bool
			_, _, _ = yysep4121, yyq4121, yy2arr4121
			const yyr4121 bool = false
			yyq4121[0] = len(x.Hard) != 0
			yyq4121[1] = len(x.Scopes) != 0
			var yynn4121 int
			if yyr4121 || yy2arr4121 {
				r.EncodeArrayStart(2)
			} else {
				yynn4121 = 0
				for _, b := range yyq4121 {
					if b {
						yynn4121++
					}
				}
				r.EncodeMapStart(yynn4121)
				yynn4121 = 0
			}
			if yyr4121 || yy2arr4121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4121[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4121[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4121 || yy2arr4121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4121[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4124 := z.EncBinary()
						_ = yym4124
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4121[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4125 := z.EncBinary()
						_ = yym4125
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4121 || yy2arr4121 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4126 := z.DecBinary()
	_ = yym4126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4127 := r.ContainerType()
		if yyct4127 == codecSelferValueTypeMap1234 {
			yyl4127 := r.ReadMapStart()
			if yyl4127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4127, d)
			}
		} else if yyct4127 == codecSelferValueTypeArray1234 {
			yyl4127 := r.ReadArrayStart()
			if yyl4127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4128Slc
	var yyhl4128 bool = l >= 0
	for yyj4128 := 0; ; yyj4128++ {
		if yyhl4128 {
			if yyj4128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4128Slc = r.DecodeBytes(yys4128Slc, true, true)
		yys4128 := string(yys4128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4128 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4129 := &x.Hard
				yyv4129.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4130 := &x.Scopes
				yym4131 := z.DecBinary()
				_ = yym4131
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4130), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4128)
		} // end switch yys4128
	} // end for yyj4128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4132 int
	var yyb4132 bool
	var yyhl4132 bool = l >= 0
	yyj4132++
	if yyhl4132 {
		yyb4132 = yyj4132 > l
	} else {
		yyb4132 = r.CheckBreak()
	}
	if yyb4132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4133 := &x.Hard
		yyv4133.CodecDecodeSelf(d)
	}
	yyj4132++
	if yyhl4132 {
		yyb4132 = yyj4132 > l
	} else {
		yyb4132 = r.CheckBreak()
	}
	if yyb4132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4134 := &x.Scopes
		yym4135 := z.DecBinary()
		_ = yym4135
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4134), d)
		}
	}
	for {
		yyj4132++
		if yyhl4132 {
			yyb4132 = yyj4132 > l
		} else {
			yyb4132 = r.CheckBreak()
		}
		if yyb4132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4136 := z.EncBinary()
		_ = yym4136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4137 := !z.EncBinary()
			yy2arr4137 := z.EncBasicHandle().StructToArray
			var yyq4137 [2]bool
			_, _, _ = yysep4137, yyq4137, yy2arr4137
			const yyr4137 bool = false
			yyq4137[0] = len(x.Hard) != 0
			yyq4137[1] = len(x.Used) != 0
			var yynn4137 int
			if yyr4137 || yy2arr4137 {
				r.EncodeArrayStart(2)
			} else {
				yynn4137 = 0
				for _, b := range yyq4137 {
					if b {
						yynn4137++
					}
				}
				r.EncodeMapStart(yynn4137)
				yynn4137 = 0
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4140 := z.DecBinary()
	_ = yym4140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4141 := r.ContainerType()
		if yyct4141 == codecSelferValueTypeMap1234 {
			yyl4141 := r.ReadMapStart()
			if yyl4141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4141, d)
			}
		} else if yyct4141 == codecSelferValueTypeArray1234 {
			yyl4141 := r.ReadArrayStart()
			if yyl4141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4142Slc
	var yyhl4142 bool = l >= 0
	for yyj4142 := 0; ; yyj4142++ {
		if yyhl4142 {
			if yyj4142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4142Slc = r.DecodeBytes(yys4142Slc, true, true)
		yys4142 := string(yys4142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4142 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4143 := &x.Hard
				yyv4143.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4144 := &x.Used
				yyv4144.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4142)
		} // end switch yys4142
	} // end for yyj4142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4145 int
	var yyb4145 bool
	var yyhl4145 bool = l >= 0
	yyj4145++
	if yyhl4145 {
		yyb4145 = yyj4145 > l
	} else {
		yyb4145 = r.CheckBreak()
	}
	if yyb4145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4146 := &x.Hard
		yyv4146.CodecDecodeSelf(d)
	}
	yyj4145++
	if yyhl4145 {
		yyb4145 = yyj4145 > l
	} else {
		yyb4145 = r.CheckBreak()
	}
	if yyb4145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4147 := &x.Used
		yyv4147.CodecDecodeSelf(d)
	}
	for {
		yyj4145++
		if yyhl4145 {
			yyb4145 = yyj4145 > l
		} else {
			yyb4145 = r.CheckBreak()
		}
		if yyb4145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4148 := z.EncBinary()
		_ = yym4148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4149 := !z.EncBinary()
			yy2arr4149 := z.EncBasicHandle().StructToArray
			var yyq4149 [5]bool
			_, _, _ = yysep4149, yyq4149, yy2arr4149
			const yyr4149 bool = false
			yyq4149[0] = x.Kind != ""
			yyq4149[1] = x.APIVersion != ""
			yyq4149[2] = true
			yyq4149[3] = true
			yyq4149[4] = true
			var yynn4149 int
			if yyr4149 || yy2arr4149 {
				r.EncodeArrayStart(5)
			} else {
				yynn4149 = 0
				for _, b := range yyq4149 {
					if b {
						yynn4149++
					}
				}
				r.EncodeMapStart(yynn4149)
				yynn4149 = 0
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[0] {
					yym4151 := z.EncBinary()
					_ = yym4151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4149[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4152 := z.EncBinary()
					_ = yym4152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[1] {
					yym4154 := z.EncBinary()
					_ = yym4154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4149[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4155 := z.EncBinary()
					_ = yym4155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[2] {
					yy4157 := &x.ObjectMeta
					yy4157.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4149[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4158 := &x.ObjectMeta
					yy4158.CodecEncodeSelf(e)
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[3] {
					yy4160 := &x.Spec
					yy4160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4149[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4161 := &x.Spec
					yy4161.CodecEncodeSelf(e)
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4149[4] {
					yy4163 := &x.Status
					yy4163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4149[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4164 := &x.Status
					yy4164.CodecEncodeSelf(e)
				}
			}
			if yyr4149 || yy2arr4149 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4165 := z.DecBinary()
	_ = yym4165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4166 := r.ContainerType()
		if yyct4166 == codecSelferValueTypeMap1234 {
			yyl4166 := r.ReadMapStart()
			if yyl4166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4166, d)
			}
		} else if yyct4166 == codecSelferValueTypeArray1234 {
			yyl4166 := r.ReadArrayStart()
			if yyl4166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4167Slc
	var yyhl4167 bool = l >= 0
	for yyj4167 := 0; ; yyj4167++ {
		if yyhl4167 {
			if yyj4167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4167Slc = r.DecodeBytes(yys4167Slc, true, true)
		yys4167 := string(yys4167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4167 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4170 := &x.ObjectMeta
				yyv4170.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4171 := &x.Spec
				yyv4171.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4172 := &x.Status
				yyv4172.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4167)
		} // end switch yys4167
	} // end for yyj4167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4173 int
	var yyb4173 bool
	var yyhl4173 bool = l >= 0
	yyj4173++
	if yyhl4173 {
		yyb4173 = yyj4173 > l
	} else {
		yyb4173 = r.CheckBreak()
	}
	if yyb4173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4173++
	if yyhl4173 {
		yyb4173 = yyj4173 > l
	} else {
		yyb4173 = r.CheckBreak()
	}
	if yyb4173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4173++
	if yyhl4173 {
		yyb4173 = yyj4173 > l
	} else {
		yyb4173 = r.CheckBreak()
	}
	if yyb4173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4176 := &x.ObjectMeta
		yyv4176.CodecDecodeSelf(d)
	}
	yyj4173++
	if yyhl4173 {
		yyb4173 = yyj4173 > l
	} else {
		yyb4173 = r.CheckBreak()
	}
	if yyb4173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4177 := &x.Spec
		yyv4177.CodecDecodeSelf(d)
	}
	yyj4173++
	if yyhl4173 {
		yyb4173 = yyj4173 > l
	} else {
		yyb4173 = r.CheckBreak()
	}
	if yyb4173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4178 := &x.Status
		yyv4178.CodecDecodeSelf(d)
	}
	for {
		yyj4173++
		if yyhl4173 {
			yyb4173 = yyj4173 > l
		} else {
			yyb4173 = r.CheckBreak()
		}
		if yyb4173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4179 := z.EncBinary()
		_ = yym4179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4180 := !z.EncBinary()
			yy2arr4180 := z.EncBasicHandle().StructToArray
			var yyq4180 [4]bool
			_, _, _ = yysep4180, yyq4180, yy2arr4180
			const yyr4180 bool = false
			yyq4180[0] = x.Kind != ""
			yyq4180[1] = x.APIVersion != ""
			yyq4180[2] = true
			var yynn4180 int
			if yyr4180 || yy2arr4180 {
				r.EncodeArrayStart(4)
			} else {
				yynn4180 = 1
				for _, b := range yyq4180 {
					if b {
						yynn4180++
					}
				}
				r.EncodeMapStart(yynn4180)
				yynn4180 = 0
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[0] {
					yym4182 := z.EncBinary()
					_ = yym4182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4183 := z.EncBinary()
					_ = yym4183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[1] {
					yym4185 := z.EncBinary()
					_ = yym4185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4186 := z.EncBinary()
					_ = yym4186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4180[2] {
					yy4188 := &x.ListMeta
					yym4189 := z.EncBinary()
					_ = yym4189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4188) {
					} else {
						z.EncFallback(yy4188)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4180[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4190 := &x.ListMeta
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4190) {
					} else {
						z.EncFallback(yy4190)
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4180 || yy2arr4180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4195 := z.DecBinary()
	_ = yym4195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4196 := r.ContainerType()
		if yyct4196 == codecSelferValueTypeMap1234 {
			yyl4196 := r.ReadMapStart()
			if yyl4196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4196, d)
			}
		} else if yyct4196 == codecSelferValueTypeArray1234 {
			yyl4196 := r.ReadArrayStart()
			if yyl4196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4197Slc
	var yyhl4197 bool = l >= 0
	for yyj4197 := 0; ; yyj4197++ {
		if yyhl4197 {
			if yyj4197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4197Slc = r.DecodeBytes(yys4197Slc, true, true)
		yys4197 := string(yys4197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4197 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4200 := &x.ListMeta
				yym4201 := z.DecBinary()
				_ = yym4201
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4200) {
				} else {
					z.DecFallback(yyv4200, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4202 := &x.Items
				yym4203 := z.DecBinary()
				_ = yym4203
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4202), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4197)
		} // end switch yys4197
	} // end for yyj4197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4204 int
	var yyb4204 bool
	var yyhl4204 bool = l >= 0
	yyj4204++
	if yyhl4204 {
		yyb4204 = yyj4204 > l
	} else {
		yyb4204 = r.CheckBreak()
	}
	if yyb4204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4204++
	if yyhl4204 {
		yyb4204 = yyj4204 > l
	} else {
		yyb4204 = r.CheckBreak()
	}
	if yyb4204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4204++
	if yyhl4204 {
		yyb4204 = yyj4204 > l
	} else {
		yyb4204 = r.CheckBreak()
	}
	if yyb4204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4207 := &x.ListMeta
		yym4208 := z.DecBinary()
		_ = yym4208
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4207) {
		} else {
			z.DecFallback(yyv4207, false)
		}
	}
	yyj4204++
	if yyhl4204 {
		yyb4204 = yyj4204 > l
	} else {
		yyb4204 = r.CheckBreak()
	}
	if yyb4204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4209 := &x.Items
		yym4210 := z.DecBinary()
		_ = yym4210
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4209), d)
		}
	}
	for {
		yyj4204++
		if yyhl4204 {
			yyb4204 = yyj4204 > l
		} else {
			yyb4204 = r.CheckBreak()
		}
		if yyb4204 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4204-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4211 := z.EncBinary()
		_ = yym4211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4212 := !z.EncBinary()
			yy2arr4212 := z.EncBasicHandle().StructToArray
			var yyq4212 [6]bool
			_, _, _ = yysep4212, yyq4212, yy2arr4212
			const yyr4212 bool = false
			yyq4212[0] = x.Kind != ""
			yyq4212[1] = x.APIVersion != ""
			yyq4212[2] = true
			yyq4212[3] = len(x.Data) != 0
			yyq4212[4] = len(x.StringData) != 0
			yyq4212[5] = x.Type != ""
			var yynn4212 int
			if yyr4212 || yy2arr4212 {
				r.EncodeArrayStart(6)
			} else {
				yynn4212 = 0
				for _, b := range yyq4212 {
					if b {
						yynn4212++
					}
				}
				r.EncodeMapStart(yynn4212)
				yynn4212 = 0
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[0] {
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[1] {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[2] {
					yy4220 := &x.ObjectMeta
					yy4220.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4212[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4221 := &x.ObjectMeta
					yy4221.CodecEncodeSelf(e)
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4223 := z.EncBinary()
						_ = yym4223
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4212[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4224 := z.EncBinary()
						_ = yym4224
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4226 := z.EncBinary()
						_ = yym4226
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4212[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4227 := z.EncBinary()
						_ = yym4227
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4229 := z.DecBinary()
	_ = yym4229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4230 := r.ContainerType()
		if yyct4230 == codecSelferValueTypeMap1234 {
			yyl4230 := r.ReadMapStart()
			if yyl4230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4230, d)
			}
		} else if yyct4230 == codecSelferValueTypeArray1234 {
			yyl4230 := r.ReadArrayStart()
			if yyl4230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4231Slc
	var yyhl4231 bool = l >= 0
	for yyj4231 := 0; ; yyj4231++ {
		if yyhl4231 {
			if yyj4231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4231Slc = r.DecodeBytes(yys4231Slc, true, true)
		yys4231 := string(yys4231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4231 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4234 := &x.ObjectMeta
				yyv4234.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4235 := &x.Data
				yym4236 := z.DecBinary()
				_ = yym4236
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4235), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4237 := &x.StringData
				yym4238 := z.DecBinary()
				_ = yym4238
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4237, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4231)
		} // end switch yys4231
	} // end for yyj4231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4240 int
	var yyb4240 bool
	var yyhl4240 bool = l >= 0
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4243 := &x.ObjectMeta
		yyv4243.CodecDecodeSelf(d)
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4244 := &x.Data
		yym4245 := z.DecBinary()
		_ = yym4245
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4244), d)
		}
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4246 := &x.StringData
		yym4247 := z.DecBinary()
		_ = yym4247
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4246, false, d)
		}
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4240++
		if yyhl4240 {
			yyb4240 = yyj4240 > l
		} else {
			yyb4240 = r.CheckBreak()
		}
		if yyb4240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4249 := z.EncBinary()
	_ = yym4249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4250 := z.DecBinary()
	_ = yym4250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4251 := z.EncBinary()
		_ = yym4251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4252 := !z.EncBinary()
			yy2arr4252 := z.EncBasicHandle().StructToArray
			var yyq4252 [4]bool
			_, _, _ = yysep4252, yyq4252, yy2arr4252
			const yyr4252 bool = false
			yyq4252[0] = x.Kind != ""
			yyq4252[1] = x.APIVersion != ""
			yyq4252[2] = true
			var yynn4252 int
			if yyr4252 || yy2arr4252 {
				r.EncodeArrayStart(4)
			} else {
				yynn4252 = 1
				for _, b := range yyq4252 {
					if b {
						yynn4252++
					}
				}
				r.EncodeMapStart(yynn4252)
				yynn4252 = 0
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4252[0] {
					yym4254 := z.EncBinary()
					_ = yym4254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4255 := z.EncBinary()
					_ = yym4255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4252[1] {
					yym4257 := z.EncBinary()
					_ = yym4257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4252[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4252[2] {
					yy4260 := &x.ListMeta
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4260) {
					} else {
						z.EncFallback(yy4260)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4252[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4262 := &x.ListMeta
					yym4263 := z.EncBinary()
					_ = yym4263
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4262) {
					} else {
						z.EncFallback(yy4262)
					}
				}
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4265 := z.EncBinary()
					_ = yym4265
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4266 := z.EncBinary()
					_ = yym4266
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4252 || yy2arr4252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4267 := z.DecBinary()
	_ = yym4267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4268 := r.ContainerType()
		if yyct4268 == codecSelferValueTypeMap1234 {
			yyl4268 := r.ReadMapStart()
			if yyl4268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4268, d)
			}
		} else if yyct4268 == codecSelferValueTypeArray1234 {
			yyl4268 := r.ReadArrayStart()
			if yyl4268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4269Slc
	var yyhl4269 bool = l >= 0
	for yyj4269 := 0; ; yyj4269++ {
		if yyhl4269 {
			if yyj4269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4269Slc = r.DecodeBytes(yys4269Slc, true, true)
		yys4269 := string(yys4269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4269 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4272 := &x.ListMeta
				yym4273 := z.DecBinary()
				_ = yym4273
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4272) {
				} else {
					z.DecFallback(yyv4272, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4274 := &x.Items
				yym4275 := z.DecBinary()
				_ = yym4275
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4274), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4269)
		} // end switch yys4269
	} // end for yyj4269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4276 int
	var yyb4276 bool
	var yyhl4276 bool = l >= 0
	yyj4276++
	if yyhl4276 {
		yyb4276 = yyj4276 > l
	} else {
		yyb4276 = r.CheckBreak()
	}
	if yyb4276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4276++
	if yyhl4276 {
		yyb4276 = yyj4276 > l
	} else {
		yyb4276 = r.CheckBreak()
	}
	if yyb4276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4276++
	if yyhl4276 {
		yyb4276 = yyj4276 > l
	} else {
		yyb4276 = r.CheckBreak()
	}
	if yyb4276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4279 := &x.ListMeta
		yym4280 := z.DecBinary()
		_ = yym4280
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4279) {
		} else {
			z.DecFallback(yyv4279, false)
		}
	}
	yyj4276++
	if yyhl4276 {
		yyb4276 = yyj4276 > l
	} else {
		yyb4276 = r.CheckBreak()
	}
	if yyb4276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4281 := &x.Items
		yym4282 := z.DecBinary()
		_ = yym4282
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4281), d)
		}
	}
	for {
		yyj4276++
		if yyhl4276 {
			yyb4276 = yyj4276 > l
		} else {
			yyb4276 = r.CheckBreak()
		}
		if yyb4276 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4276-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4283 := z.EncBinary()
		_ = yym4283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4284 := !z.EncBinary()
			yy2arr4284 := z.EncBasicHandle().StructToArray
			var yyq4284 [4]bool
			_, _, _ = yysep4284, yyq4284, yy2arr4284
			const yyr4284 bool = false
			yyq4284[0] = x.Kind != ""
			yyq4284[1] = x.APIVersion != ""
			yyq4284[2] = true
			yyq4284[3] = len(x.Data) != 0
			var yynn4284 int
			if yyr4284 || yy2arr4284 {
				r.EncodeArrayStart(4)
			} else {
				yynn4284 = 0
				for _, b := range yyq4284 {
					if b {
						yynn4284++
					}
				}
				r.EncodeMapStart(yynn4284)
				yynn4284 = 0
			}
			if yyr4284 || yy2arr4284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4284[0] {
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4287 := z.EncBinary()
					_ = yym4287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4284 || yy2arr4284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4284[1] {
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4290 := z.EncBinary()
					_ = yym4290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4284 || yy2arr4284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4284[2] {
					yy4292 := &x.ObjectMeta
					yy4292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4284[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4293 := &x.ObjectMeta
					yy4293.CodecEncodeSelf(e)
				}
			}
			if yyr4284 || yy2arr4284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4284[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4295 := z.EncBinary()
						_ = yym4295
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4284[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4296 := z.EncBinary()
						_ = yym4296
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4284 || yy2arr4284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4297 := z.DecBinary()
	_ = yym4297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4298 := r.ContainerType()
		if yyct4298 == codecSelferValueTypeMap1234 {
			yyl4298 := r.ReadMapStart()
			if yyl4298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4298, d)
			}
		} else if yyct4298 == codecSelferValueTypeArray1234 {
			yyl4298 := r.ReadArrayStart()
			if yyl4298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4299Slc
	var yyhl4299 bool = l >= 0
	for yyj4299 := 0; ; yyj4299++ {
		if yyhl4299 {
			if yyj4299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4299Slc = r.DecodeBytes(yys4299Slc, true, true)
		yys4299 := string(yys4299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4299 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4302 := &x.ObjectMeta
				yyv4302.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4303 := &x.Data
				yym4304 := z.DecBinary()
				_ = yym4304
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4303, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4299)
		} // end switch yys4299
	} // end for yyj4299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4305 int
	var yyb4305 bool
	var yyhl4305 bool = l >= 0
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4308 := &x.ObjectMeta
		yyv4308.CodecDecodeSelf(d)
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4309 := &x.Data
		yym4310 := z.DecBinary()
		_ = yym4310
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4309, false, d)
		}
	}
	for {
		yyj4305++
		if yyhl4305 {
			yyb4305 = yyj4305 > l
		} else {
			yyb4305 = r.CheckBreak()
		}
		if yyb4305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4311 := z.EncBinary()
		_ = yym4311
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4312 := !z.EncBinary()
			yy2arr4312 := z.EncBasicHandle().StructToArray
			var yyq4312 [4]bool
			_, _, _ = yysep4312, yyq4312, yy2arr4312
			const yyr4312 bool = false
			yyq4312[0] = x.Kind != ""
			yyq4312[1] = x.APIVersion != ""
			yyq4312[2] = true
			var yynn4312 int
			if yyr4312 || yy2arr4312 {
				r.EncodeArrayStart(4)
			} else {
				yynn4312 = 1
				for _, b := range yyq4312 {
					if b {
						yynn4312++
					}
				}
				r.EncodeMapStart(yynn4312)
				yynn4312 = 0
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[0] {
					yym4314 := z.EncBinary()
					_ = yym4314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4312[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4315 := z.EncBinary()
					_ = yym4315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[1] {
					yym4317 := z.EncBinary()
					_ = yym4317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4312[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4318 := z.EncBinary()
					_ = yym4318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[2] {
					yy4320 := &x.ListMeta
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4320) {
					} else {
						z.EncFallback(yy4320)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4312[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4322 := &x.ListMeta
					yym4323 := z.EncBinary()
					_ = yym4323
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4322) {
					} else {
						z.EncFallback(yy4322)
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4327 := z.DecBinary()
	_ = yym4327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4328 := r.ContainerType()
		if yyct4328 == codecSelferValueTypeMap1234 {
			yyl4328 := r.ReadMapStart()
			if yyl4328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4328, d)
			}
		} else if yyct4328 == codecSelferValueTypeArray1234 {
			yyl4328 := r.ReadArrayStart()
			if yyl4328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4329Slc
	var yyhl4329 bool = l >= 0
	for yyj4329 := 0; ; yyj4329++ {
		if yyhl4329 {
			if yyj4329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4329Slc = r.DecodeBytes(yys4329Slc, true, true)
		yys4329 := string(yys4329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4332 := &x.ListMeta
				yym4333 := z.DecBinary()
				_ = yym4333
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4332) {
				} else {
					z.DecFallback(yyv4332, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4334 := &x.Items
				yym4335 := z.DecBinary()
				_ = yym4335
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4334), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4329)
		} // end switch yys4329
	} // end for yyj4329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4336 int
	var yyb4336 bool
	var yyhl4336 bool = l >= 0
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4339 := &x.ListMeta
		yym4340 := z.DecBinary()
		_ = yym4340
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4339) {
		} else {
			z.DecFallback(yyv4339, false)
		}
	}
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4341 := &x.Items
		yym4342 := z.DecBinary()
		_ = yym4342
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4341), d)
		}
	}
	for {
		yyj4336++
		if yyhl4336 {
			yyb4336 = yyj4336 > l
		} else {
			yyb4336 = r.CheckBreak()
		}
		if yyb4336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4343 := z.EncBinary()
	_ = yym4343
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4344 := z.DecBinary()
	_ = yym4344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4345 := z.EncBinary()
		_ = yym4345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4346 := !z.EncBinary()
			yy2arr4346 := z.EncBasicHandle().StructToArray
			var yyq4346 [4]bool
			_, _, _ = yysep4346, yyq4346, yy2arr4346
			const yyr4346 bool = false
			yyq4346[2] = x.Message != ""
			yyq4346[3] = x.Error != ""
			var yynn4346 int
			if yyr4346 || yy2arr4346 {
				r.EncodeArrayStart(4)
			} else {
				yynn4346 = 2
				for _, b := range yyq4346 {
					if b {
						yynn4346++
					}
				}
				r.EncodeMapStart(yynn4346)
				yynn4346 = 0
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4346[2] {
					yym4350 := z.EncBinary()
					_ = yym4350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4351 := z.EncBinary()
					_ = yym4351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4346[3] {
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4346[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4354 := z.EncBinary()
					_ = yym4354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4355 := z.DecBinary()
	_ = yym4355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4356 := r.ContainerType()
		if yyct4356 == codecSelferValueTypeMap1234 {
			yyl4356 := r.ReadMapStart()
			if yyl4356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4356, d)
			}
		} else if yyct4356 == codecSelferValueTypeArray1234 {
			yyl4356 := r.ReadArrayStart()
			if yyl4356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4357Slc
	var yyhl4357 bool = l >= 0
	for yyj4357 := 0; ; yyj4357++ {
		if yyhl4357 {
			if yyj4357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4357Slc = r.DecodeBytes(yys4357Slc, true, true)
		yys4357 := string(yys4357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4357 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4357)
		} // end switch yys4357
	} // end for yyj4357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4362 int
	var yyb4362 bool
	var yyhl4362 bool = l >= 0
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4362++
	if yyhl4362 {
		yyb4362 = yyj4362 > l
	} else {
		yyb4362 = r.CheckBreak()
	}
	if yyb4362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4362++
		if yyhl4362 {
			yyb4362 = yyj4362 > l
		} else {
			yyb4362 = r.CheckBreak()
		}
		if yyb4362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4367 := z.EncBinary()
		_ = yym4367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4368 := !z.EncBinary()
			yy2arr4368 := z.EncBasicHandle().StructToArray
			var yyq4368 [4]bool
			_, _, _ = yysep4368, yyq4368, yy2arr4368
			const yyr4368 bool = false
			yyq4368[0] = x.Kind != ""
			yyq4368[1] = x.APIVersion != ""
			yyq4368[2] = true
			yyq4368[3] = len(x.Conditions) != 0
			var yynn4368 int
			if yyr4368 || yy2arr4368 {
				r.EncodeArrayStart(4)
			} else {
				yynn4368 = 0
				for _, b := range yyq4368 {
					if b {
						yynn4368++
					}
				}
				r.EncodeMapStart(yynn4368)
				yynn4368 = 0
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4368[0] {
					yym4370 := z.EncBinary()
					_ = yym4370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4371 := z.EncBinary()
					_ = yym4371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4368[1] {
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4374 := z.EncBinary()
					_ = yym4374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4368[2] {
					yy4376 := &x.ObjectMeta
					yy4376.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4377 := &x.ObjectMeta
					yy4377.CodecEncodeSelf(e)
				}
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4368[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4379 := z.EncBinary()
						_ = yym4379
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4368[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4380 := z.EncBinary()
						_ = yym4380
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4368 || yy2arr4368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4381 := z.DecBinary()
	_ = yym4381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4382 := r.ContainerType()
		if yyct4382 == codecSelferValueTypeMap1234 {
			yyl4382 := r.ReadMapStart()
			if yyl4382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4382, d)
			}
		} else if yyct4382 == codecSelferValueTypeArray1234 {
			yyl4382 := r.ReadArrayStart()
			if yyl4382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4383Slc
	var yyhl4383 bool = l >= 0
	for yyj4383 := 0; ; yyj4383++ {
		if yyhl4383 {
			if yyj4383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4383Slc = r.DecodeBytes(yys4383Slc, true, true)
		yys4383 := string(yys4383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4383 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4386 := &x.ObjectMeta
				yyv4386.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4387 := &x.Conditions
				yym4388 := z.DecBinary()
				_ = yym4388
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4387), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4383)
		} // end switch yys4383
	} // end for yyj4383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4389 int
	var yyb4389 bool
	var yyhl4389 bool = l >= 0
	yyj4389++
	if yyhl4389 {
		yyb4389 = yyj4389 > l
	} else {
		yyb4389 = r.CheckBreak()
	}
	if yyb4389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4389++
	if yyhl4389 {
		yyb4389 = yyj4389 > l
	} else {
		yyb4389 = r.CheckBreak()
	}
	if yyb4389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4389++
	if yyhl4389 {
		yyb4389 = yyj4389 > l
	} else {
		yyb4389 = r.CheckBreak()
	}
	if yyb4389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4392 := &x.ObjectMeta
		yyv4392.CodecDecodeSelf(d)
	}
	yyj4389++
	if yyhl4389 {
		yyb4389 = yyj4389 > l
	} else {
		yyb4389 = r.CheckBreak()
	}
	if yyb4389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4393 := &x.Conditions
		yym4394 := z.DecBinary()
		_ = yym4394
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4393), d)
		}
	}
	for {
		yyj4389++
		if yyhl4389 {
			yyb4389 = yyj4389 > l
		} else {
			yyb4389 = r.CheckBreak()
		}
		if yyb4389 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4389-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4395 := z.EncBinary()
		_ = yym4395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4396 := !z.EncBinary()
			yy2arr4396 := z.EncBasicHandle().StructToArray
			var yyq4396 [4]bool
			_, _, _ = yysep4396, yyq4396, yy2arr4396
			const yyr4396 bool = false
			yyq4396[0] = x.Kind != ""
			yyq4396[1] = x.APIVersion != ""
			yyq4396[2] = true
			var yynn4396 int
			if yyr4396 || yy2arr4396 {
				r.EncodeArrayStart(4)
			} else {
				yynn4396 = 1
				for _, b := range yyq4396 {
					if b {
						yynn4396++
					}
				}
				r.EncodeMapStart(yynn4396)
				yynn4396 = 0
			}
			if yyr4396 || yy2arr4396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4396[0] {
					yym4398 := z.EncBinary()
					_ = yym4398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4399 := z.EncBinary()
					_ = yym4399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4396 || yy2arr4396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4396[1] {
					yym4401 := z.EncBinary()
					_ = yym4401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4396[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4402 := z.EncBinary()
					_ = yym4402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4396 || yy2arr4396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4396[2] {
					yy4404 := &x.ListMeta
					yym4405 := z.EncBinary()
					_ = yym4405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4404) {
					} else {
						z.EncFallback(yy4404)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4396[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4406 := &x.ListMeta
					yym4407 := z.EncBinary()
					_ = yym4407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4406) {
					} else {
						z.EncFallback(yy4406)
					}
				}
			}
			if yyr4396 || yy2arr4396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4409 := z.EncBinary()
					_ = yym4409
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4410 := z.EncBinary()
					_ = yym4410
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4396 || yy2arr4396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4411 := z.DecBinary()
	_ = yym4411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4412 := r.ContainerType()
		if yyct4412 == codecSelferValueTypeMap1234 {
			yyl4412 := r.ReadMapStart()
			if yyl4412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4412, d)
			}
		} else if yyct4412 == codecSelferValueTypeArray1234 {
			yyl4412 := r.ReadArrayStart()
			if yyl4412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4413Slc
	var yyhl4413 bool = l >= 0
	for yyj4413 := 0; ; yyj4413++ {
		if yyhl4413 {
			if yyj4413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4413Slc = r.DecodeBytes(yys4413Slc, true, true)
		yys4413 := string(yys4413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4416 := &x.ListMeta
				yym4417 := z.DecBinary()
				_ = yym4417
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4416) {
				} else {
					z.DecFallback(yyv4416, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4418 := &x.Items
				yym4419 := z.DecBinary()
				_ = yym4419
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4418), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4413)
		} // end switch yys4413
	} // end for yyj4413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4420 int
	var yyb4420 bool
	var yyhl4420 bool = l >= 0
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4423 := &x.ListMeta
		yym4424 := z.DecBinary()
		_ = yym4424
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4423) {
		} else {
			z.DecFallback(yyv4423, false)
		}
	}
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4425 := &x.Items
		yym4426 := z.DecBinary()
		_ = yym4426
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4425), d)
		}
	}
	for {
		yyj4420++
		if yyhl4420 {
			yyb4420 = yyj4420 > l
		} else {
			yyb4420 = r.CheckBreak()
		}
		if yyb4420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4427 := z.EncBinary()
		_ = yym4427
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4428 := !z.EncBinary()
			yy2arr4428 := z.EncBasicHandle().StructToArray
			var yyq4428 [2]bool
			_, _, _ = yysep4428, yyq4428, yy2arr4428
			const yyr4428 bool = false
			yyq4428[0] = len(x.Items) != 0
			yyq4428[1] = x.DefaultMode != nil
			var yynn4428 int
			if yyr4428 || yy2arr4428 {
				r.EncodeArrayStart(2)
			} else {
				yynn4428 = 0
				for _, b := range yyq4428 {
					if b {
						yynn4428++
					}
				}
				r.EncodeMapStart(yynn4428)
				yynn4428 = 0
			}
			if yyr4428 || yy2arr4428 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4428[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4430 := z.EncBinary()
						_ = yym4430
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4428[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4431 := z.EncBinary()
						_ = yym4431
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4428 || yy2arr4428 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4428[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4433 := *x.DefaultMode
						yym4434 := z.EncBinary()
						_ = yym4434
						if false {
						} else {
							r.EncodeInt(int64(yy4433))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4428[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4435 := *x.DefaultMode
						yym4436 := z.EncBinary()
						_ = yym4436
						if false {
						} else {
							r.EncodeInt(int64(yy4435))
						}
					}
				}
			}
			if yyr4428 || yy2arr4428 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4437 := z.DecBinary()
	_ = yym4437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4438 := r.ContainerType()
		if yyct4438 == codecSelferValueTypeMap1234 {
			yyl4438 := r.ReadMapStart()
			if yyl4438 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4438, d)
			}
		} else if yyct4438 == codecSelferValueTypeArray1234 {
			yyl4438 := r.ReadArrayStart()
			if yyl4438 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4439Slc
	var yyhl4439 bool = l >= 0
	for yyj4439 := 0; ; yyj4439++ {
		if yyhl4439 {
			if yyj4439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4439Slc = r.DecodeBytes(yys4439Slc, true, true)
		yys4439 := string(yys4439Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4439 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4440 := &x.Items
				yym4441 := z.DecBinary()
				_ = yym4441
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4440), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4443 := z.DecBinary()
				_ = yym4443
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4439)
		} // end switch yys4439
	} // end for yyj4439
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4444 int
	var yyb4444 bool
	var yyhl4444 bool = l >= 0
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4445 := &x.Items
		yym4446 := z.DecBinary()
		_ = yym4446
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4445), d)
		}
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4448 := z.DecBinary()
		_ = yym4448
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4444++
		if yyhl4444 {
			yyb4444 = yyj4444 > l
		} else {
			yyb4444 = r.CheckBreak()
		}
		if yyb4444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4449 := z.EncBinary()
		_ = yym4449
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4450 := !z.EncBinary()
			yy2arr4450 := z.EncBasicHandle().StructToArray
			var yyq4450 [4]bool
			_, _, _ = yysep4450, yyq4450, yy2arr4450
			const yyr4450 bool = false
			yyq4450[1] = x.FieldRef != nil
			yyq4450[2] = x.ResourceFieldRef != nil
			yyq4450[3] = x.Mode != nil
			var yynn4450 int
			if yyr4450 || yy2arr4450 {
				r.EncodeArrayStart(4)
			} else {
				yynn4450 = 1
				for _, b := range yyq4450 {
					if b {
						yynn4450++
					}
				}
				r.EncodeMapStart(yynn4450)
				yynn4450 = 0
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4452 := z.EncBinary()
				_ = yym4452
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4453 := z.EncBinary()
				_ = yym4453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4457 := *x.Mode
						yym4458 := z.EncBinary()
						_ = yym4458
						if false {
						} else {
							r.EncodeInt(int64(yy4457))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4459 := *x.Mode
						yym4460 := z.EncBinary()
						_ = yym4460
						if false {
						} else {
							r.EncodeInt(int64(yy4459))
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4461 := z.DecBinary()
	_ = yym4461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4462 := r.ContainerType()
		if yyct4462 == codecSelferValueTypeMap1234 {
			yyl4462 := r.ReadMapStart()
			if yyl4462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4462, d)
			}
		} else if yyct4462 == codecSelferValueTypeArray1234 {
			yyl4462 := r.ReadArrayStart()
			if yyl4462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4463Slc
	var yyhl4463 bool = l >= 0
	for yyj4463 := 0; ; yyj4463++ {
		if yyhl4463 {
			if yyj4463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4463Slc = r.DecodeBytes(yys4463Slc, true, true)
		yys4463 := string(yys4463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4463 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4468 := z.DecBinary()
				_ = yym4468
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4463)
		} // end switch yys4463
	} // end for yyj4463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4469 int
	var yyb4469 bool
	var yyhl4469 bool = l >= 0
	yyj4469++
	if yyhl4469 {
		yyb4469 = yyj4469 > l
	} else {
		yyb4469 = r.CheckBreak()
	}
	if yyb4469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4469++
	if yyhl4469 {
		yyb4469 = yyj4469 > l
	} else {
		yyb4469 = r.CheckBreak()
	}
	if yyb4469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4469++
	if yyhl4469 {
		yyb4469 = yyj4469 > l
	} else {
		yyb4469 = r.CheckBreak()
	}
	if yyb4469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4469++
	if yyhl4469 {
		yyb4469 = yyj4469 > l
	} else {
		yyb4469 = r.CheckBreak()
	}
	if yyb4469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4474 := z.DecBinary()
		_ = yym4474
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4469++
		if yyhl4469 {
			yyb4469 = yyj4469 > l
		} else {
			yyb4469 = r.CheckBreak()
		}
		if yyb4469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4475 := z.EncBinary()
		_ = yym4475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4476 := !z.EncBinary()
			yy2arr4476 := z.EncBasicHandle().StructToArray
			var yyq4476 [6]bool
			_, _, _ = yysep4476, yyq4476, yy2arr4476
			const yyr4476 bool = false
			yyq4476[0] = x.Capabilities != nil
			yyq4476[1] = x.Privileged != nil
			yyq4476[2] = x.SELinuxOptions != nil
			yyq4476[3] = x.RunAsUser != nil
			yyq4476[4] = x.RunAsNonRoot != nil
			yyq4476[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4476 int
			if yyr4476 || yy2arr4476 {
				r.EncodeArrayStart(6)
			} else {
				yynn4476 = 0
				for _, b := range yyq4476 {
					if b {
						yynn4476++
					}
				}
				r.EncodeMapStart(yynn4476)
				yynn4476 = 0
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4479 := *x.Privileged
						yym4480 := z.EncBinary()
						_ = yym4480
						if false {
						} else {
							r.EncodeBool(bool(yy4479))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4481 := *x.Privileged
						yym4482 := z.EncBinary()
						_ = yym4482
						if false {
						} else {
							r.EncodeBool(bool(yy4481))
						}
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4485 := *x.RunAsUser
						yym4486 := z.EncBinary()
						_ = yym4486
						if false {
						} else {
							r.EncodeInt(int64(yy4485))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4487 := *x.RunAsUser
						yym4488 := z.EncBinary()
						_ = yym4488
						if false {
						} else {
							r.EncodeInt(int64(yy4487))
						}
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4490 := *x.RunAsNonRoot
						yym4491 := z.EncBinary()
						_ = yym4491
						if false {
						} else {
							r.EncodeBool(bool(yy4490))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4492 := *x.RunAsNonRoot
						yym4493 := z.EncBinary()
						_ = yym4493
						if false {
						} else {
							r.EncodeBool(bool(yy4492))
						}
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4495 := *x.ReadOnlyRootFilesystem
						yym4496 := z.EncBinary()
						_ = yym4496
						if false {
						} else {
							r.EncodeBool(bool(yy4495))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4497 := *x.ReadOnlyRootFilesystem
						yym4498 := z.EncBinary()
						_ = yym4498
						if false {
						} else {
							r.EncodeBool(bool(yy4497))
						}
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4499 := z.DecBinary()
	_ = yym4499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4500 := r.ContainerType()
		if yyct4500 == codecSelferValueTypeMap1234 {
			yyl4500 := r.ReadMapStart()
			if yyl4500 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4500, d)
			}
		} else if yyct4500 == codecSelferValueTypeArray1234 {
			yyl4500 := r.ReadArrayStart()
			if yyl4500 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4500, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4501Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4501Slc
	var yyhl4501 bool = l >= 0
	for yyj4501 := 0; ; yyj4501++ {
		if yyhl4501 {
			if yyj4501 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4501Slc = r.DecodeBytes(yys4501Slc, true, true)
		yys4501 := string(yys4501Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4501 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4504 := z.DecBinary()
				_ = yym4504
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4507 := z.DecBinary()
				_ = yym4507
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4509 := z.DecBinary()
				_ = yym4509
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4511 := z.DecBinary()
				_ = yym4511
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4501)
		} // end switch yys4501
	} // end for yyj4501
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4512 int
	var yyb4512 bool
	var yyhl4512 bool = l >= 0
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4515 := z.DecBinary()
		_ = yym4515
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4518 := z.DecBinary()
		_ = yym4518
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4520 := z.DecBinary()
		_ = yym4520
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4522 := z.DecBinary()
		_ = yym4522
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4512++
		if yyhl4512 {
			yyb4512 = yyj4512 > l
		} else {
			yyb4512 = r.CheckBreak()
		}
		if yyb4512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4523 := z.EncBinary()
		_ = yym4523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4524 := !z.EncBinary()
			yy2arr4524 := z.EncBasicHandle().StructToArray
			var yyq4524 [4]bool
			_, _, _ = yysep4524, yyq4524, yy2arr4524
			const yyr4524 bool = false
			yyq4524[0] = x.User != ""
			yyq4524[1] = x.Role != ""
			yyq4524[2] = x.Type != ""
			yyq4524[3] = x.Level != ""
			var yynn4524 int
			if yyr4524 || yy2arr4524 {
				r.EncodeArrayStart(4)
			} else {
				yynn4524 = 0
				for _, b := range yyq4524 {
					if b {
						yynn4524++
					}
				}
				r.EncodeMapStart(yynn4524)
				yynn4524 = 0
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[0] {
					yym4526 := z.EncBinary()
					_ = yym4526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4527 := z.EncBinary()
					_ = yym4527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[1] {
					yym4529 := z.EncBinary()
					_ = yym4529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4530 := z.EncBinary()
					_ = yym4530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[2] {
					yym4532 := z.EncBinary()
					_ = yym4532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4533 := z.EncBinary()
					_ = yym4533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[3] {
					yym4535 := z.EncBinary()
					_ = yym4535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4524[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4536 := z.EncBinary()
					_ = yym4536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4537 := z.DecBinary()
	_ = yym4537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4538 := r.ContainerType()
		if yyct4538 == codecSelferValueTypeMap1234 {
			yyl4538 := r.ReadMapStart()
			if yyl4538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4538, d)
			}
		} else if yyct4538 == codecSelferValueTypeArray1234 {
			yyl4538 := r.ReadArrayStart()
			if yyl4538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4539Slc
	var yyhl4539 bool = l >= 0
	for yyj4539 := 0; ; yyj4539++ {
		if yyhl4539 {
			if yyj4539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4539Slc = r.DecodeBytes(yys4539Slc, true, true)
		yys4539 := string(yys4539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4539 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4539)
		} // end switch yys4539
	} // end for yyj4539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4544 int
	var yyb4544 bool
	var yyhl4544 bool = l >= 0
	yyj4544++
	if yyhl4544 {
		yyb4544 = yyj4544 > l
	} else {
		yyb4544 = r.CheckBreak()
	}
	if yyb4544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4544++
	if yyhl4544 {
		yyb4544 = yyj4544 > l
	} else {
		yyb4544 = r.CheckBreak()
	}
	if yyb4544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4544++
	if yyhl4544 {
		yyb4544 = yyj4544 > l
	} else {
		yyb4544 = r.CheckBreak()
	}
	if yyb4544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4544++
	if yyhl4544 {
		yyb4544 = yyj4544 > l
	} else {
		yyb4544 = r.CheckBreak()
	}
	if yyb4544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4544++
		if yyhl4544 {
			yyb4544 = yyj4544 > l
		} else {
			yyb4544 = r.CheckBreak()
		}
		if yyb4544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4549 := z.EncBinary()
		_ = yym4549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4550 := !z.EncBinary()
			yy2arr4550 := z.EncBasicHandle().StructToArray
			var yyq4550 [5]bool
			_, _, _ = yysep4550, yyq4550, yy2arr4550
			const yyr4550 bool = false
			yyq4550[0] = x.Kind != ""
			yyq4550[1] = x.APIVersion != ""
			yyq4550[2] = true
			var yynn4550 int
			if yyr4550 || yy2arr4550 {
				r.EncodeArrayStart(5)
			} else {
				yynn4550 = 2
				for _, b := range yyq4550 {
					if b {
						yynn4550++
					}
				}
				r.EncodeMapStart(yynn4550)
				yynn4550 = 0
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[0] {
					yym4552 := z.EncBinary()
					_ = yym4552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4553 := z.EncBinary()
					_ = yym4553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[1] {
					yym4555 := z.EncBinary()
					_ = yym4555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4556 := z.EncBinary()
					_ = yym4556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4550[2] {
					yy4558 := &x.ObjectMeta
					yy4558.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4559 := &x.ObjectMeta
					yy4559.CodecEncodeSelf(e)
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4561 := z.EncBinary()
				_ = yym4561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4562 := z.EncBinary()
				_ = yym4562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4564 := z.EncBinary()
					_ = yym4564
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4565 := z.EncBinary()
					_ = yym4565
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4550 || yy2arr4550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4566 := z.DecBinary()
	_ = yym4566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4567 := r.ContainerType()
		if yyct4567 == codecSelferValueTypeMap1234 {
			yyl4567 := r.ReadMapStart()
			if yyl4567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4567, d)
			}
		} else if yyct4567 == codecSelferValueTypeArray1234 {
			yyl4567 := r.ReadArrayStart()
			if yyl4567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4568Slc
	var yyhl4568 bool = l >= 0
	for yyj4568 := 0; ; yyj4568++ {
		if yyhl4568 {
			if yyj4568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4568Slc = r.DecodeBytes(yys4568Slc, true, true)
		yys4568 := string(yys4568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4568 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4571 := &x.ObjectMeta
				yyv4571.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4573 := &x.Data
				yym4574 := z.DecBinary()
				_ = yym4574
				if false {
				} else {
					*yyv4573 = r.DecodeBytes(*(*[]byte)(yyv4573), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4568)
		} // end switch yys4568
	} // end for yyj4568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4575 int
	var yyb4575 bool
	var yyhl4575 bool = l >= 0
	yyj4575++
	if yyhl4575 {
		yyb4575 = yyj4575 > l
	} else {
		yyb4575 = r.CheckBreak()
	}
	if yyb4575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4575++
	if yyhl4575 {
		yyb4575 = yyj4575 > l
	} else {
		yyb4575 = r.CheckBreak()
	}
	if yyb4575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4575++
	if yyhl4575 {
		yyb4575 = yyj4575 > l
	} else {
		yyb4575 = r.CheckBreak()
	}
	if yyb4575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4578 := &x.ObjectMeta
		yyv4578.CodecDecodeSelf(d)
	}
	yyj4575++
	if yyhl4575 {
		yyb4575 = yyj4575 > l
	} else {
		yyb4575 = r.CheckBreak()
	}
	if yyb4575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4575++
	if yyhl4575 {
		yyb4575 = yyj4575 > l
	} else {
		yyb4575 = r.CheckBreak()
	}
	if yyb4575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4580 := &x.Data
		yym4581 := z.DecBinary()
		_ = yym4581
		if false {
		} else {
			*yyv4580 = r.DecodeBytes(*(*[]byte)(yyv4580), false, false)
		}
	}
	for {
		yyj4575++
		if yyhl4575 {
			yyb4575 = yyj4575 > l
		} else {
			yyb4575 = r.CheckBreak()
		}
		if yyb4575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicev1_OwnerReference(v []pkg2_v1.OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4582 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4583 := &yyv4582
		yym4584 := z.EncBinary()
		_ = yym4584
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4583) {
		} else {
			z.EncFallback(yy4583)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_OwnerReference(v *[]pkg2_v1.OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4585 := *v
	yyh4585, yyl4585 := z.DecSliceHelperStart()
	var yyc4585 bool
	if yyl4585 == 0 {
		if yyv4585 == nil {
			yyv4585 = []pkg2_v1.OwnerReference{}
			yyc4585 = true
		} else if len(yyv4585) != 0 {
			yyv4585 = yyv4585[:0]
			yyc4585 = true
		}
	} else if yyl4585 > 0 {
		var yyrr4585, yyrl4585 int
		var yyrt4585 bool
		if yyl4585 > cap(yyv4585) {

			yyrg4585 := len(yyv4585) > 0
			yyv24585 := yyv4585
			yyrl4585, yyrt4585 = z.DecInferLen(yyl4585, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4585 {
				if yyrl4585 <= cap(yyv4585) {
					yyv4585 = yyv4585[:yyrl4585]
				} else {
					yyv4585 = make([]pkg2_v1.OwnerReference, yyrl4585)
				}
			} else {
				yyv4585 = make([]pkg2_v1.OwnerReference, yyrl4585)
			}
			yyc4585 = true
			yyrr4585 = len(yyv4585)
			if yyrg4585 {
				copy(yyv4585, yyv24585)
			}
		} else if yyl4585 != len(yyv4585) {
			yyv4585 = yyv4585[:yyl4585]
			yyc4585 = true
		}
		yyj4585 := 0
		for ; yyj4585 < yyrr4585; yyj4585++ {
			yyh4585.ElemContainerState(yyj4585)
			if r.TryDecodeAsNil() {
				yyv4585[yyj4585] = pkg2_v1.OwnerReference{}
			} else {
				yyv4586 := &yyv4585[yyj4585]
				yym4587 := z.DecBinary()
				_ = yym4587
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4586) {
				} else {
					z.DecFallback(yyv4586, false)
				}
			}

		}
		if yyrt4585 {
			for ; yyj4585 < yyl4585; yyj4585++ {
				yyv4585 = append(yyv4585, pkg2_v1.OwnerReference{})
				yyh4585.ElemContainerState(yyj4585)
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = pkg2_v1.OwnerReference{}
				} else {
					yyv4588 := &yyv4585[yyj4585]
					yym4589 := z.DecBinary()
					_ = yym4589
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4588) {
					} else {
						z.DecFallback(yyv4588, false)
					}
				}

			}
		}

	} else {
		yyj4585 := 0
		for ; !r.CheckBreak(); yyj4585++ {

			if yyj4585 >= len(yyv4585) {
				yyv4585 = append(yyv4585, pkg2_v1.OwnerReference{}) // var yyz4585 pkg2_v1.OwnerReference
				yyc4585 = true
			}
			yyh4585.ElemContainerState(yyj4585)
			if yyj4585 < len(yyv4585) {
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = pkg2_v1.OwnerReference{}
				} else {
					yyv4590 := &yyv4585[yyj4585]
					yym4591 := z.DecBinary()
					_ = yym4591
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4590) {
					} else {
						z.DecFallback(yyv4590, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4585 < len(yyv4585) {
			yyv4585 = yyv4585[:yyj4585]
			yyc4585 = true
		} else if yyj4585 == 0 && yyv4585 == nil {
			yyv4585 = []pkg2_v1.OwnerReference{}
			yyc4585 = true
		}
	}
	yyh4585.End()
	if yyc4585 {
		*v = yyv4585
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4592 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4592.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4593 := *v
	yyh4593, yyl4593 := z.DecSliceHelperStart()
	var yyc4593 bool
	if yyl4593 == 0 {
		if yyv4593 == nil {
			yyv4593 = []PersistentVolumeAccessMode{}
			yyc4593 = true
		} else if len(yyv4593) != 0 {
			yyv4593 = yyv4593[:0]
			yyc4593 = true
		}
	} else if yyl4593 > 0 {
		var yyrr4593, yyrl4593 int
		var yyrt4593 bool
		if yyl4593 > cap(yyv4593) {

			yyrl4593, yyrt4593 = z.DecInferLen(yyl4593, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4593 {
				if yyrl4593 <= cap(yyv4593) {
					yyv4593 = yyv4593[:yyrl4593]
				} else {
					yyv4593 = make([]PersistentVolumeAccessMode, yyrl4593)
				}
			} else {
				yyv4593 = make([]PersistentVolumeAccessMode, yyrl4593)
			}
			yyc4593 = true
			yyrr4593 = len(yyv4593)
		} else if yyl4593 != len(yyv4593) {
			yyv4593 = yyv4593[:yyl4593]
			yyc4593 = true
		}
		yyj4593 := 0
		for ; yyj4593 < yyrr4593; yyj4593++ {
			yyh4593.ElemContainerState(yyj4593)
			if r.TryDecodeAsNil() {
				yyv4593[yyj4593] = ""
			} else {
				yyv4593[yyj4593] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4593 {
			for ; yyj4593 < yyl4593; yyj4593++ {
				yyv4593 = append(yyv4593, "")
				yyh4593.ElemContainerState(yyj4593)
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = ""
				} else {
					yyv4593[yyj4593] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4593 := 0
		for ; !r.CheckBreak(); yyj4593++ {

			if yyj4593 >= len(yyv4593) {
				yyv4593 = append(yyv4593, "") // var yyz4593 PersistentVolumeAccessMode
				yyc4593 = true
			}
			yyh4593.ElemContainerState(yyj4593)
			if yyj4593 < len(yyv4593) {
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = ""
				} else {
					yyv4593[yyj4593] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4593 < len(yyv4593) {
			yyv4593 = yyv4593[:yyj4593]
			yyc4593 = true
		} else if yyj4593 == 0 && yyv4593 == nil {
			yyv4593 = []PersistentVolumeAccessMode{}
			yyc4593 = true
		}
	}
	yyh4593.End()
	if yyc4593 {
		*v = yyv4593
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4598 := &yyv4597
		yy4598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4599 := *v
	yyh4599, yyl4599 := z.DecSliceHelperStart()
	var yyc4599 bool
	if yyl4599 == 0 {
		if yyv4599 == nil {
			yyv4599 = []PersistentVolume{}
			yyc4599 = true
		} else if len(yyv4599) != 0 {
			yyv4599 = yyv4599[:0]
			yyc4599 = true
		}
	} else if yyl4599 > 0 {
		var yyrr4599, yyrl4599 int
		var yyrt4599 bool
		if yyl4599 > cap(yyv4599) {

			yyrg4599 := len(yyv4599) > 0
			yyv24599 := yyv4599
			yyrl4599, yyrt4599 = z.DecInferLen(yyl4599, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4599 {
				if yyrl4599 <= cap(yyv4599) {
					yyv4599 = yyv4599[:yyrl4599]
				} else {
					yyv4599 = make([]PersistentVolume, yyrl4599)
				}
			} else {
				yyv4599 = make([]PersistentVolume, yyrl4599)
			}
			yyc4599 = true
			yyrr4599 = len(yyv4599)
			if yyrg4599 {
				copy(yyv4599, yyv24599)
			}
		} else if yyl4599 != len(yyv4599) {
			yyv4599 = yyv4599[:yyl4599]
			yyc4599 = true
		}
		yyj4599 := 0
		for ; yyj4599 < yyrr4599; yyj4599++ {
			yyh4599.ElemContainerState(yyj4599)
			if r.TryDecodeAsNil() {
				yyv4599[yyj4599] = PersistentVolume{}
			} else {
				yyv4600 := &yyv4599[yyj4599]
				yyv4600.CodecDecodeSelf(d)
			}

		}
		if yyrt4599 {
			for ; yyj4599 < yyl4599; yyj4599++ {
				yyv4599 = append(yyv4599, PersistentVolume{})
				yyh4599.ElemContainerState(yyj4599)
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = PersistentVolume{}
				} else {
					yyv4601 := &yyv4599[yyj4599]
					yyv4601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4599 := 0
		for ; !r.CheckBreak(); yyj4599++ {

			if yyj4599 >= len(yyv4599) {
				yyv4599 = append(yyv4599, PersistentVolume{}) // var yyz4599 PersistentVolume
				yyc4599 = true
			}
			yyh4599.ElemContainerState(yyj4599)
			if yyj4599 < len(yyv4599) {
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = PersistentVolume{}
				} else {
					yyv4602 := &yyv4599[yyj4599]
					yyv4602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4599 < len(yyv4599) {
			yyv4599 = yyv4599[:yyj4599]
			yyc4599 = true
		} else if yyj4599 == 0 && yyv4599 == nil {
			yyv4599 = []PersistentVolume{}
			yyc4599 = true
		}
	}
	yyh4599.End()
	if yyc4599 {
		*v = yyv4599
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4604 := &yyv4603
		yy4604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4605 := *v
	yyh4605, yyl4605 := z.DecSliceHelperStart()
	var yyc4605 bool
	if yyl4605 == 0 {
		if yyv4605 == nil {
			yyv4605 = []PersistentVolumeClaim{}
			yyc4605 = true
		} else if len(yyv4605) != 0 {
			yyv4605 = yyv4605[:0]
			yyc4605 = true
		}
	} else if yyl4605 > 0 {
		var yyrr4605, yyrl4605 int
		var yyrt4605 bool
		if yyl4605 > cap(yyv4605) {

			yyrg4605 := len(yyv4605) > 0
			yyv24605 := yyv4605
			yyrl4605, yyrt4605 = z.DecInferLen(yyl4605, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4605 {
				if yyrl4605 <= cap(yyv4605) {
					yyv4605 = yyv4605[:yyrl4605]
				} else {
					yyv4605 = make([]PersistentVolumeClaim, yyrl4605)
				}
			} else {
				yyv4605 = make([]PersistentVolumeClaim, yyrl4605)
			}
			yyc4605 = true
			yyrr4605 = len(yyv4605)
			if yyrg4605 {
				copy(yyv4605, yyv24605)
			}
		} else if yyl4605 != len(yyv4605) {
			yyv4605 = yyv4605[:yyl4605]
			yyc4605 = true
		}
		yyj4605 := 0
		for ; yyj4605 < yyrr4605; yyj4605++ {
			yyh4605.ElemContainerState(yyj4605)
			if r.TryDecodeAsNil() {
				yyv4605[yyj4605] = PersistentVolumeClaim{}
			} else {
				yyv4606 := &yyv4605[yyj4605]
				yyv4606.CodecDecodeSelf(d)
			}

		}
		if yyrt4605 {
			for ; yyj4605 < yyl4605; yyj4605++ {
				yyv4605 = append(yyv4605, PersistentVolumeClaim{})
				yyh4605.ElemContainerState(yyj4605)
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PersistentVolumeClaim{}
				} else {
					yyv4607 := &yyv4605[yyj4605]
					yyv4607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4605 := 0
		for ; !r.CheckBreak(); yyj4605++ {

			if yyj4605 >= len(yyv4605) {
				yyv4605 = append(yyv4605, PersistentVolumeClaim{}) // var yyz4605 PersistentVolumeClaim
				yyc4605 = true
			}
			yyh4605.ElemContainerState(yyj4605)
			if yyj4605 < len(yyv4605) {
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PersistentVolumeClaim{}
				} else {
					yyv4608 := &yyv4605[yyj4605]
					yyv4608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4605 < len(yyv4605) {
			yyv4605 = yyv4605[:yyj4605]
			yyc4605 = true
		} else if yyj4605 == 0 && yyv4605 == nil {
			yyv4605 = []PersistentVolumeClaim{}
			yyc4605 = true
		}
	}
	yyh4605.End()
	if yyc4605 {
		*v = yyv4605
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4609 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4610 := &yyv4609
		yy4610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4611 := *v
	yyh4611, yyl4611 := z.DecSliceHelperStart()
	var yyc4611 bool
	if yyl4611 == 0 {
		if yyv4611 == nil {
			yyv4611 = []KeyToPath{}
			yyc4611 = true
		} else if len(yyv4611) != 0 {
			yyv4611 = yyv4611[:0]
			yyc4611 = true
		}
	} else if yyl4611 > 0 {
		var yyrr4611, yyrl4611 int
		var yyrt4611 bool
		if yyl4611 > cap(yyv4611) {

			yyrg4611 := len(yyv4611) > 0
			yyv24611 := yyv4611
			yyrl4611, yyrt4611 = z.DecInferLen(yyl4611, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4611 {
				if yyrl4611 <= cap(yyv4611) {
					yyv4611 = yyv4611[:yyrl4611]
				} else {
					yyv4611 = make([]KeyToPath, yyrl4611)
				}
			} else {
				yyv4611 = make([]KeyToPath, yyrl4611)
			}
			yyc4611 = true
			yyrr4611 = len(yyv4611)
			if yyrg4611 {
				copy(yyv4611, yyv24611)
			}
		} else if yyl4611 != len(yyv4611) {
			yyv4611 = yyv4611[:yyl4611]
			yyc4611 = true
		}
		yyj4611 := 0
		for ; yyj4611 < yyrr4611; yyj4611++ {
			yyh4611.ElemContainerState(yyj4611)
			if r.TryDecodeAsNil() {
				yyv4611[yyj4611] = KeyToPath{}
			} else {
				yyv4612 := &yyv4611[yyj4611]
				yyv4612.CodecDecodeSelf(d)
			}

		}
		if yyrt4611 {
			for ; yyj4611 < yyl4611; yyj4611++ {
				yyv4611 = append(yyv4611, KeyToPath{})
				yyh4611.ElemContainerState(yyj4611)
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = KeyToPath{}
				} else {
					yyv4613 := &yyv4611[yyj4611]
					yyv4613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4611 := 0
		for ; !r.CheckBreak(); yyj4611++ {

			if yyj4611 >= len(yyv4611) {
				yyv4611 = append(yyv4611, KeyToPath{}) // var yyz4611 KeyToPath
				yyc4611 = true
			}
			yyh4611.ElemContainerState(yyj4611)
			if yyj4611 < len(yyv4611) {
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = KeyToPath{}
				} else {
					yyv4614 := &yyv4611[yyj4611]
					yyv4614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4611 < len(yyv4611) {
			yyv4611 = yyv4611[:yyj4611]
			yyc4611 = true
		} else if yyj4611 == 0 && yyv4611 == nil {
			yyv4611 = []KeyToPath{}
			yyc4611 = true
		}
	}
	yyh4611.End()
	if yyc4611 {
		*v = yyv4611
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4616 := &yyv4615
		yy4616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4617 := *v
	yyh4617, yyl4617 := z.DecSliceHelperStart()
	var yyc4617 bool
	if yyl4617 == 0 {
		if yyv4617 == nil {
			yyv4617 = []HTTPHeader{}
			yyc4617 = true
		} else if len(yyv4617) != 0 {
			yyv4617 = yyv4617[:0]
			yyc4617 = true
		}
	} else if yyl4617 > 0 {
		var yyrr4617, yyrl4617 int
		var yyrt4617 bool
		if yyl4617 > cap(yyv4617) {

			yyrg4617 := len(yyv4617) > 0
			yyv24617 := yyv4617
			yyrl4617, yyrt4617 = z.DecInferLen(yyl4617, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4617 {
				if yyrl4617 <= cap(yyv4617) {
					yyv4617 = yyv4617[:yyrl4617]
				} else {
					yyv4617 = make([]HTTPHeader, yyrl4617)
				}
			} else {
				yyv4617 = make([]HTTPHeader, yyrl4617)
			}
			yyc4617 = true
			yyrr4617 = len(yyv4617)
			if yyrg4617 {
				copy(yyv4617, yyv24617)
			}
		} else if yyl4617 != len(yyv4617) {
			yyv4617 = yyv4617[:yyl4617]
			yyc4617 = true
		}
		yyj4617 := 0
		for ; yyj4617 < yyrr4617; yyj4617++ {
			yyh4617.ElemContainerState(yyj4617)
			if r.TryDecodeAsNil() {
				yyv4617[yyj4617] = HTTPHeader{}
			} else {
				yyv4618 := &yyv4617[yyj4617]
				yyv4618.CodecDecodeSelf(d)
			}

		}
		if yyrt4617 {
			for ; yyj4617 < yyl4617; yyj4617++ {
				yyv4617 = append(yyv4617, HTTPHeader{})
				yyh4617.ElemContainerState(yyj4617)
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = HTTPHeader{}
				} else {
					yyv4619 := &yyv4617[yyj4617]
					yyv4619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4617 := 0
		for ; !r.CheckBreak(); yyj4617++ {

			if yyj4617 >= len(yyv4617) {
				yyv4617 = append(yyv4617, HTTPHeader{}) // var yyz4617 HTTPHeader
				yyc4617 = true
			}
			yyh4617.ElemContainerState(yyj4617)
			if yyj4617 < len(yyv4617) {
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = HTTPHeader{}
				} else {
					yyv4620 := &yyv4617[yyj4617]
					yyv4620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4617 < len(yyv4617) {
			yyv4617 = yyv4617[:yyj4617]
			yyc4617 = true
		} else if yyj4617 == 0 && yyv4617 == nil {
			yyv4617 = []HTTPHeader{}
			yyc4617 = true
		}
	}
	yyh4617.End()
	if yyc4617 {
		*v = yyv4617
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4621.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4622 := *v
	yyh4622, yyl4622 := z.DecSliceHelperStart()
	var yyc4622 bool
	if yyl4622 == 0 {
		if yyv4622 == nil {
			yyv4622 = []Capability{}
			yyc4622 = true
		} else if len(yyv4622) != 0 {
			yyv4622 = yyv4622[:0]
			yyc4622 = true
		}
	} else if yyl4622 > 0 {
		var yyrr4622, yyrl4622 int
		var yyrt4622 bool
		if yyl4622 > cap(yyv4622) {

			yyrl4622, yyrt4622 = z.DecInferLen(yyl4622, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4622 {
				if yyrl4622 <= cap(yyv4622) {
					yyv4622 = yyv4622[:yyrl4622]
				} else {
					yyv4622 = make([]Capability, yyrl4622)
				}
			} else {
				yyv4622 = make([]Capability, yyrl4622)
			}
			yyc4622 = true
			yyrr4622 = len(yyv4622)
		} else if yyl4622 != len(yyv4622) {
			yyv4622 = yyv4622[:yyl4622]
			yyc4622 = true
		}
		yyj4622 := 0
		for ; yyj4622 < yyrr4622; yyj4622++ {
			yyh4622.ElemContainerState(yyj4622)
			if r.TryDecodeAsNil() {
				yyv4622[yyj4622] = ""
			} else {
				yyv4622[yyj4622] = Capability(r.DecodeString())
			}

		}
		if yyrt4622 {
			for ; yyj4622 < yyl4622; yyj4622++ {
				yyv4622 = append(yyv4622, "")
				yyh4622.ElemContainerState(yyj4622)
				if r.TryDecodeAsNil() {
					yyv4622[yyj4622] = ""
				} else {
					yyv4622[yyj4622] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4622 := 0
		for ; !r.CheckBreak(); yyj4622++ {

			if yyj4622 >= len(yyv4622) {
				yyv4622 = append(yyv4622, "") // var yyz4622 Capability
				yyc4622 = true
			}
			yyh4622.ElemContainerState(yyj4622)
			if yyj4622 < len(yyv4622) {
				if r.TryDecodeAsNil() {
					yyv4622[yyj4622] = ""
				} else {
					yyv4622[yyj4622] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4622 < len(yyv4622) {
			yyv4622 = yyv4622[:yyj4622]
			yyc4622 = true
		} else if yyj4622 == 0 && yyv4622 == nil {
			yyv4622 = []Capability{}
			yyc4622 = true
		}
	}
	yyh4622.End()
	if yyc4622 {
		*v = yyv4622
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4626 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4627 := &yyv4626
		yy4627.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4628 := *v
	yyh4628, yyl4628 := z.DecSliceHelperStart()
	var yyc4628 bool
	if yyl4628 == 0 {
		if yyv4628 == nil {
			yyv4628 = []ContainerPort{}
			yyc4628 = true
		} else if len(yyv4628) != 0 {
			yyv4628 = yyv4628[:0]
			yyc4628 = true
		}
	} else if yyl4628 > 0 {
		var yyrr4628, yyrl4628 int
		var yyrt4628 bool
		if yyl4628 > cap(yyv4628) {

			yyrg4628 := len(yyv4628) > 0
			yyv24628 := yyv4628
			yyrl4628, yyrt4628 = z.DecInferLen(yyl4628, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4628 {
				if yyrl4628 <= cap(yyv4628) {
					yyv4628 = yyv4628[:yyrl4628]
				} else {
					yyv4628 = make([]ContainerPort, yyrl4628)
				}
			} else {
				yyv4628 = make([]ContainerPort, yyrl4628)
			}
			yyc4628 = true
			yyrr4628 = len(yyv4628)
			if yyrg4628 {
				copy(yyv4628, yyv24628)
			}
		} else if yyl4628 != len(yyv4628) {
			yyv4628 = yyv4628[:yyl4628]
			yyc4628 = true
		}
		yyj4628 := 0
		for ; yyj4628 < yyrr4628; yyj4628++ {
			yyh4628.ElemContainerState(yyj4628)
			if r.TryDecodeAsNil() {
				yyv4628[yyj4628] = ContainerPort{}
			} else {
				yyv4629 := &yyv4628[yyj4628]
				yyv4629.CodecDecodeSelf(d)
			}

		}
		if yyrt4628 {
			for ; yyj4628 < yyl4628; yyj4628++ {
				yyv4628 = append(yyv4628, ContainerPort{})
				yyh4628.ElemContainerState(yyj4628)
				if r.TryDecodeAsNil() {
					yyv4628[yyj4628] = ContainerPort{}
				} else {
					yyv4630 := &yyv4628[yyj4628]
					yyv4630.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4628 := 0
		for ; !r.CheckBreak(); yyj4628++ {

			if yyj4628 >= len(yyv4628) {
				yyv4628 = append(yyv4628, ContainerPort{}) // var yyz4628 ContainerPort
				yyc4628 = true
			}
			yyh4628.ElemContainerState(yyj4628)
			if yyj4628 < len(yyv4628) {
				if r.TryDecodeAsNil() {
					yyv4628[yyj4628] = ContainerPort{}
				} else {
					yyv4631 := &yyv4628[yyj4628]
					yyv4631.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4628 < len(yyv4628) {
			yyv4628 = yyv4628[:yyj4628]
			yyc4628 = true
		} else if yyj4628 == 0 && yyv4628 == nil {
			yyv4628 = []ContainerPort{}
			yyc4628 = true
		}
	}
	yyh4628.End()
	if yyc4628 {
		*v = yyv4628
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4632 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4633 := &yyv4632
		yy4633.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4634 := *v
	yyh4634, yyl4634 := z.DecSliceHelperStart()
	var yyc4634 bool
	if yyl4634 == 0 {
		if yyv4634 == nil {
			yyv4634 = []EnvVar{}
			yyc4634 = true
		} else if len(yyv4634) != 0 {
			yyv4634 = yyv4634[:0]
			yyc4634 = true
		}
	} else if yyl4634 > 0 {
		var yyrr4634, yyrl4634 int
		var yyrt4634 bool
		if yyl4634 > cap(yyv4634) {

			yyrg4634 := len(yyv4634) > 0
			yyv24634 := yyv4634
			yyrl4634, yyrt4634 = z.DecInferLen(yyl4634, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4634 {
				if yyrl4634 <= cap(yyv4634) {
					yyv4634 = yyv4634[:yyrl4634]
				} else {
					yyv4634 = make([]EnvVar, yyrl4634)
				}
			} else {
				yyv4634 = make([]EnvVar, yyrl4634)
			}
			yyc4634 = true
			yyrr4634 = len(yyv4634)
			if yyrg4634 {
				copy(yyv4634, yyv24634)
			}
		} else if yyl4634 != len(yyv4634) {
			yyv4634 = yyv4634[:yyl4634]
			yyc4634 = true
		}
		yyj4634 := 0
		for ; yyj4634 < yyrr4634; yyj4634++ {
			yyh4634.ElemContainerState(yyj4634)
			if r.TryDecodeAsNil() {
				yyv4634[yyj4634] = EnvVar{}
			} else {
				yyv4635 := &yyv4634[yyj4634]
				yyv4635.CodecDecodeSelf(d)
			}

		}
		if yyrt4634 {
			for ; yyj4634 < yyl4634; yyj4634++ {
				yyv4634 = append(yyv4634, EnvVar{})
				yyh4634.ElemContainerState(yyj4634)
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = EnvVar{}
				} else {
					yyv4636 := &yyv4634[yyj4634]
					yyv4636.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4634 := 0
		for ; !r.CheckBreak(); yyj4634++ {

			if yyj4634 >= len(yyv4634) {
				yyv4634 = append(yyv4634, EnvVar{}) // var yyz4634 EnvVar
				yyc4634 = true
			}
			yyh4634.ElemContainerState(yyj4634)
			if yyj4634 < len(yyv4634) {
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = EnvVar{}
				} else {
					yyv4637 := &yyv4634[yyj4634]
					yyv4637.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4634 < len(yyv4634) {
			yyv4634 = yyv4634[:yyj4634]
			yyc4634 = true
		} else if yyj4634 == 0 && yyv4634 == nil {
			yyv4634 = []EnvVar{}
			yyc4634 = true
		}
	}
	yyh4634.End()
	if yyc4634 {
		*v = yyv4634
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4638 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4639 := &yyv4638
		yy4639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4640 := *v
	yyh4640, yyl4640 := z.DecSliceHelperStart()
	var yyc4640 bool
	if yyl4640 == 0 {
		if yyv4640 == nil {
			yyv4640 = []VolumeMount{}
			yyc4640 = true
		} else if len(yyv4640) != 0 {
			yyv4640 = yyv4640[:0]
			yyc4640 = true
		}
	} else if yyl4640 > 0 {
		var yyrr4640, yyrl4640 int
		var yyrt4640 bool
		if yyl4640 > cap(yyv4640) {

			yyrg4640 := len(yyv4640) > 0
			yyv24640 := yyv4640
			yyrl4640, yyrt4640 = z.DecInferLen(yyl4640, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4640 {
				if yyrl4640 <= cap(yyv4640) {
					yyv4640 = yyv4640[:yyrl4640]
				} else {
					yyv4640 = make([]VolumeMount, yyrl4640)
				}
			} else {
				yyv4640 = make([]VolumeMount, yyrl4640)
			}
			yyc4640 = true
			yyrr4640 = len(yyv4640)
			if yyrg4640 {
				copy(yyv4640, yyv24640)
			}
		} else if yyl4640 != len(yyv4640) {
			yyv4640 = yyv4640[:yyl4640]
			yyc4640 = true
		}
		yyj4640 := 0
		for ; yyj4640 < yyrr4640; yyj4640++ {
			yyh4640.ElemContainerState(yyj4640)
			if r.TryDecodeAsNil() {
				yyv4640[yyj4640] = VolumeMount{}
			} else {
				yyv4641 := &yyv4640[yyj4640]
				yyv4641.CodecDecodeSelf(d)
			}

		}
		if yyrt4640 {
			for ; yyj4640 < yyl4640; yyj4640++ {
				yyv4640 = append(yyv4640, VolumeMount{})
				yyh4640.ElemContainerState(yyj4640)
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = VolumeMount{}
				} else {
					yyv4642 := &yyv4640[yyj4640]
					yyv4642.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4640 := 0
		for ; !r.CheckBreak(); yyj4640++ {

			if yyj4640 >= len(yyv4640) {
				yyv4640 = append(yyv4640, VolumeMount{}) // var yyz4640 VolumeMount
				yyc4640 = true
			}
			yyh4640.ElemContainerState(yyj4640)
			if yyj4640 < len(yyv4640) {
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = VolumeMount{}
				} else {
					yyv4643 := &yyv4640[yyj4640]
					yyv4643.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4640 < len(yyv4640) {
			yyv4640 = yyv4640[:yyj4640]
			yyc4640 = true
		} else if yyj4640 == 0 && yyv4640 == nil {
			yyv4640 = []VolumeMount{}
			yyc4640 = true
		}
	}
	yyh4640.End()
	if yyc4640 {
		*v = yyv4640
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yy4645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4646 := *v
	yyh4646, yyl4646 := z.DecSliceHelperStart()
	var yyc4646 bool
	if yyl4646 == 0 {
		if yyv4646 == nil {
			yyv4646 = []NodeSelectorTerm{}
			yyc4646 = true
		} else if len(yyv4646) != 0 {
			yyv4646 = yyv4646[:0]
			yyc4646 = true
		}
	} else if yyl4646 > 0 {
		var yyrr4646, yyrl4646 int
		var yyrt4646 bool
		if yyl4646 > cap(yyv4646) {

			yyrg4646 := len(yyv4646) > 0
			yyv24646 := yyv4646
			yyrl4646, yyrt4646 = z.DecInferLen(yyl4646, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4646 {
				if yyrl4646 <= cap(yyv4646) {
					yyv4646 = yyv4646[:yyrl4646]
				} else {
					yyv4646 = make([]NodeSelectorTerm, yyrl4646)
				}
			} else {
				yyv4646 = make([]NodeSelectorTerm, yyrl4646)
			}
			yyc4646 = true
			yyrr4646 = len(yyv4646)
			if yyrg4646 {
				copy(yyv4646, yyv24646)
			}
		} else if yyl4646 != len(yyv4646) {
			yyv4646 = yyv4646[:yyl4646]
			yyc4646 = true
		}
		yyj4646 := 0
		for ; yyj4646 < yyrr4646; yyj4646++ {
			yyh4646.ElemContainerState(yyj4646)
			if r.TryDecodeAsNil() {
				yyv4646[yyj4646] = NodeSelectorTerm{}
			} else {
				yyv4647 := &yyv4646[yyj4646]
				yyv4647.CodecDecodeSelf(d)
			}

		}
		if yyrt4646 {
			for ; yyj4646 < yyl4646; yyj4646++ {
				yyv4646 = append(yyv4646, NodeSelectorTerm{})
				yyh4646.ElemContainerState(yyj4646)
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = NodeSelectorTerm{}
				} else {
					yyv4648 := &yyv4646[yyj4646]
					yyv4648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4646 := 0
		for ; !r.CheckBreak(); yyj4646++ {

			if yyj4646 >= len(yyv4646) {
				yyv4646 = append(yyv4646, NodeSelectorTerm{}) // var yyz4646 NodeSelectorTerm
				yyc4646 = true
			}
			yyh4646.ElemContainerState(yyj4646)
			if yyj4646 < len(yyv4646) {
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = NodeSelectorTerm{}
				} else {
					yyv4649 := &yyv4646[yyj4646]
					yyv4649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4646 < len(yyv4646) {
			yyv4646 = yyv4646[:yyj4646]
			yyc4646 = true
		} else if yyj4646 == 0 && yyv4646 == nil {
			yyv4646 = []NodeSelectorTerm{}
			yyc4646 = true
		}
	}
	yyh4646.End()
	if yyc4646 {
		*v = yyv4646
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4651 := &yyv4650
		yy4651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4652 := *v
	yyh4652, yyl4652 := z.DecSliceHelperStart()
	var yyc4652 bool
	if yyl4652 == 0 {
		if yyv4652 == nil {
			yyv4652 = []NodeSelectorRequirement{}
			yyc4652 = true
		} else if len(yyv4652) != 0 {
			yyv4652 = yyv4652[:0]
			yyc4652 = true
		}
	} else if yyl4652 > 0 {
		var yyrr4652, yyrl4652 int
		var yyrt4652 bool
		if yyl4652 > cap(yyv4652) {

			yyrg4652 := len(yyv4652) > 0
			yyv24652 := yyv4652
			yyrl4652, yyrt4652 = z.DecInferLen(yyl4652, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4652 {
				if yyrl4652 <= cap(yyv4652) {
					yyv4652 = yyv4652[:yyrl4652]
				} else {
					yyv4652 = make([]NodeSelectorRequirement, yyrl4652)
				}
			} else {
				yyv4652 = make([]NodeSelectorRequirement, yyrl4652)
			}
			yyc4652 = true
			yyrr4652 = len(yyv4652)
			if yyrg4652 {
				copy(yyv4652, yyv24652)
			}
		} else if yyl4652 != len(yyv4652) {
			yyv4652 = yyv4652[:yyl4652]
			yyc4652 = true
		}
		yyj4652 := 0
		for ; yyj4652 < yyrr4652; yyj4652++ {
			yyh4652.ElemContainerState(yyj4652)
			if r.TryDecodeAsNil() {
				yyv4652[yyj4652] = NodeSelectorRequirement{}
			} else {
				yyv4653 := &yyv4652[yyj4652]
				yyv4653.CodecDecodeSelf(d)
			}

		}
		if yyrt4652 {
			for ; yyj4652 < yyl4652; yyj4652++ {
				yyv4652 = append(yyv4652, NodeSelectorRequirement{})
				yyh4652.ElemContainerState(yyj4652)
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = NodeSelectorRequirement{}
				} else {
					yyv4654 := &yyv4652[yyj4652]
					yyv4654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4652 := 0
		for ; !r.CheckBreak(); yyj4652++ {

			if yyj4652 >= len(yyv4652) {
				yyv4652 = append(yyv4652, NodeSelectorRequirement{}) // var yyz4652 NodeSelectorRequirement
				yyc4652 = true
			}
			yyh4652.ElemContainerState(yyj4652)
			if yyj4652 < len(yyv4652) {
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = NodeSelectorRequirement{}
				} else {
					yyv4655 := &yyv4652[yyj4652]
					yyv4655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4652 < len(yyv4652) {
			yyv4652 = yyv4652[:yyj4652]
			yyc4652 = true
		} else if yyj4652 == 0 && yyv4652 == nil {
			yyv4652 = []NodeSelectorRequirement{}
			yyc4652 = true
		}
	}
	yyh4652.End()
	if yyc4652 {
		*v = yyv4652
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4657 := &yyv4656
		yy4657.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4658 := *v
	yyh4658, yyl4658 := z.DecSliceHelperStart()
	var yyc4658 bool
	if yyl4658 == 0 {
		if yyv4658 == nil {
			yyv4658 = []PodAffinityTerm{}
			yyc4658 = true
		} else if len(yyv4658) != 0 {
			yyv4658 = yyv4658[:0]
			yyc4658 = true
		}
	} else if yyl4658 > 0 {
		var yyrr4658, yyrl4658 int
		var yyrt4658 bool
		if yyl4658 > cap(yyv4658) {

			yyrg4658 := len(yyv4658) > 0
			yyv24658 := yyv4658
			yyrl4658, yyrt4658 = z.DecInferLen(yyl4658, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4658 {
				if yyrl4658 <= cap(yyv4658) {
					yyv4658 = yyv4658[:yyrl4658]
				} else {
					yyv4658 = make([]PodAffinityTerm, yyrl4658)
				}
			} else {
				yyv4658 = make([]PodAffinityTerm, yyrl4658)
			}
			yyc4658 = true
			yyrr4658 = len(yyv4658)
			if yyrg4658 {
				copy(yyv4658, yyv24658)
			}
		} else if yyl4658 != len(yyv4658) {
			yyv4658 = yyv4658[:yyl4658]
			yyc4658 = true
		}
		yyj4658 := 0
		for ; yyj4658 < yyrr4658; yyj4658++ {
			yyh4658.ElemContainerState(yyj4658)
			if r.TryDecodeAsNil() {
				yyv4658[yyj4658] = PodAffinityTerm{}
			} else {
				yyv4659 := &yyv4658[yyj4658]
				yyv4659.CodecDecodeSelf(d)
			}

		}
		if yyrt4658 {
			for ; yyj4658 < yyl4658; yyj4658++ {
				yyv4658 = append(yyv4658, PodAffinityTerm{})
				yyh4658.ElemContainerState(yyj4658)
				if r.TryDecodeAsNil() {
					yyv4658[yyj4658] = PodAffinityTerm{}
				} else {
					yyv4660 := &yyv4658[yyj4658]
					yyv4660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4658 := 0
		for ; !r.CheckBreak(); yyj4658++ {

			if yyj4658 >= len(yyv4658) {
				yyv4658 = append(yyv4658, PodAffinityTerm{}) // var yyz4658 PodAffinityTerm
				yyc4658 = true
			}
			yyh4658.ElemContainerState(yyj4658)
			if yyj4658 < len(yyv4658) {
				if r.TryDecodeAsNil() {
					yyv4658[yyj4658] = PodAffinityTerm{}
				} else {
					yyv4661 := &yyv4658[yyj4658]
					yyv4661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4658 < len(yyv4658) {
			yyv4658 = yyv4658[:yyj4658]
			yyc4658 = true
		} else if yyj4658 == 0 && yyv4658 == nil {
			yyv4658 = []PodAffinityTerm{}
			yyc4658 = true
		}
	}
	yyh4658.End()
	if yyc4658 {
		*v = yyv4658
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4662 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4663 := &yyv4662
		yy4663.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4664 := *v
	yyh4664, yyl4664 := z.DecSliceHelperStart()
	var yyc4664 bool
	if yyl4664 == 0 {
		if yyv4664 == nil {
			yyv4664 = []WeightedPodAffinityTerm{}
			yyc4664 = true
		} else if len(yyv4664) != 0 {
			yyv4664 = yyv4664[:0]
			yyc4664 = true
		}
	} else if yyl4664 > 0 {
		var yyrr4664, yyrl4664 int
		var yyrt4664 bool
		if yyl4664 > cap(yyv4664) {

			yyrg4664 := len(yyv4664) > 0
			yyv24664 := yyv4664
			yyrl4664, yyrt4664 = z.DecInferLen(yyl4664, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4664 {
				if yyrl4664 <= cap(yyv4664) {
					yyv4664 = yyv4664[:yyrl4664]
				} else {
					yyv4664 = make([]WeightedPodAffinityTerm, yyrl4664)
				}
			} else {
				yyv4664 = make([]WeightedPodAffinityTerm, yyrl4664)
			}
			yyc4664 = true
			yyrr4664 = len(yyv4664)
			if yyrg4664 {
				copy(yyv4664, yyv24664)
			}
		} else if yyl4664 != len(yyv4664) {
			yyv4664 = yyv4664[:yyl4664]
			yyc4664 = true
		}
		yyj4664 := 0
		for ; yyj4664 < yyrr4664; yyj4664++ {
			yyh4664.ElemContainerState(yyj4664)
			if r.TryDecodeAsNil() {
				yyv4664[yyj4664] = WeightedPodAffinityTerm{}
			} else {
				yyv4665 := &yyv4664[yyj4664]
				yyv4665.CodecDecodeSelf(d)
			}

		}
		if yyrt4664 {
			for ; yyj4664 < yyl4664; yyj4664++ {
				yyv4664 = append(yyv4664, WeightedPodAffinityTerm{})
				yyh4664.ElemContainerState(yyj4664)
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = WeightedPodAffinityTerm{}
				} else {
					yyv4666 := &yyv4664[yyj4664]
					yyv4666.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4664 := 0
		for ; !r.CheckBreak(); yyj4664++ {

			if yyj4664 >= len(yyv4664) {
				yyv4664 = append(yyv4664, WeightedPodAffinityTerm{}) // var yyz4664 WeightedPodAffinityTerm
				yyc4664 = true
			}
			yyh4664.ElemContainerState(yyj4664)
			if yyj4664 < len(yyv4664) {
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = WeightedPodAffinityTerm{}
				} else {
					yyv4667 := &yyv4664[yyj4664]
					yyv4667.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4664 < len(yyv4664) {
			yyv4664 = yyv4664[:yyj4664]
			yyc4664 = true
		} else if yyj4664 == 0 && yyv4664 == nil {
			yyv4664 = []WeightedPodAffinityTerm{}
			yyc4664 = true
		}
	}
	yyh4664.End()
	if yyc4664 {
		*v = yyv4664
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4668 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4669 := &yyv4668
		yy4669.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4670 := *v
	yyh4670, yyl4670 := z.DecSliceHelperStart()
	var yyc4670 bool
	if yyl4670 == 0 {
		if yyv4670 == nil {
			yyv4670 = []PreferredSchedulingTerm{}
			yyc4670 = true
		} else if len(yyv4670) != 0 {
			yyv4670 = yyv4670[:0]
			yyc4670 = true
		}
	} else if yyl4670 > 0 {
		var yyrr4670, yyrl4670 int
		var yyrt4670 bool
		if yyl4670 > cap(yyv4670) {

			yyrg4670 := len(yyv4670) > 0
			yyv24670 := yyv4670
			yyrl4670, yyrt4670 = z.DecInferLen(yyl4670, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4670 {
				if yyrl4670 <= cap(yyv4670) {
					yyv4670 = yyv4670[:yyrl4670]
				} else {
					yyv4670 = make([]PreferredSchedulingTerm, yyrl4670)
				}
			} else {
				yyv4670 = make([]PreferredSchedulingTerm, yyrl4670)
			}
			yyc4670 = true
			yyrr4670 = len(yyv4670)
			if yyrg4670 {
				copy(yyv4670, yyv24670)
			}
		} else if yyl4670 != len(yyv4670) {
			yyv4670 = yyv4670[:yyl4670]
			yyc4670 = true
		}
		yyj4670 := 0
		for ; yyj4670 < yyrr4670; yyj4670++ {
			yyh4670.ElemContainerState(yyj4670)
			if r.TryDecodeAsNil() {
				yyv4670[yyj4670] = PreferredSchedulingTerm{}
			} else {
				yyv4671 := &yyv4670[yyj4670]
				yyv4671.CodecDecodeSelf(d)
			}

		}
		if yyrt4670 {
			for ; yyj4670 < yyl4670; yyj4670++ {
				yyv4670 = append(yyv4670, PreferredSchedulingTerm{})
				yyh4670.ElemContainerState(yyj4670)
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = PreferredSchedulingTerm{}
				} else {
					yyv4672 := &yyv4670[yyj4670]
					yyv4672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4670 := 0
		for ; !r.CheckBreak(); yyj4670++ {

			if yyj4670 >= len(yyv4670) {
				yyv4670 = append(yyv4670, PreferredSchedulingTerm{}) // var yyz4670 PreferredSchedulingTerm
				yyc4670 = true
			}
			yyh4670.ElemContainerState(yyj4670)
			if yyj4670 < len(yyv4670) {
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = PreferredSchedulingTerm{}
				} else {
					yyv4673 := &yyv4670[yyj4670]
					yyv4673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4670 < len(yyv4670) {
			yyv4670 = yyv4670[:yyj4670]
			yyc4670 = true
		} else if yyj4670 == 0 && yyv4670 == nil {
			yyv4670 = []PreferredSchedulingTerm{}
			yyc4670 = true
		}
	}
	yyh4670.End()
	if yyc4670 {
		*v = yyv4670
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4674 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4675 := &yyv4674
		yy4675.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4676 := *v
	yyh4676, yyl4676 := z.DecSliceHelperStart()
	var yyc4676 bool
	if yyl4676 == 0 {
		if yyv4676 == nil {
			yyv4676 = []Volume{}
			yyc4676 = true
		} else if len(yyv4676) != 0 {
			yyv4676 = yyv4676[:0]
			yyc4676 = true
		}
	} else if yyl4676 > 0 {
		var yyrr4676, yyrl4676 int
		var yyrt4676 bool
		if yyl4676 > cap(yyv4676) {

			yyrg4676 := len(yyv4676) > 0
			yyv24676 := yyv4676
			yyrl4676, yyrt4676 = z.DecInferLen(yyl4676, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt4676 {
				if yyrl4676 <= cap(yyv4676) {
					yyv4676 = yyv4676[:yyrl4676]
				} else {
					yyv4676 = make([]Volume, yyrl4676)
				}
			} else {
				yyv4676 = make([]Volume, yyrl4676)
			}
			yyc4676 = true
			yyrr4676 = len(yyv4676)
			if yyrg4676 {
				copy(yyv4676, yyv24676)
			}
		} else if yyl4676 != len(yyv4676) {
			yyv4676 = yyv4676[:yyl4676]
			yyc4676 = true
		}
		yyj4676 := 0
		for ; yyj4676 < yyrr4676; yyj4676++ {
			yyh4676.ElemContainerState(yyj4676)
			if r.TryDecodeAsNil() {
				yyv4676[yyj4676] = Volume{}
			} else {
				yyv4677 := &yyv4676[yyj4676]
				yyv4677.CodecDecodeSelf(d)
			}

		}
		if yyrt4676 {
			for ; yyj4676 < yyl4676; yyj4676++ {
				yyv4676 = append(yyv4676, Volume{})
				yyh4676.ElemContainerState(yyj4676)
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = Volume{}
				} else {
					yyv4678 := &yyv4676[yyj4676]
					yyv4678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4676 := 0
		for ; !r.CheckBreak(); yyj4676++ {

			if yyj4676 >= len(yyv4676) {
				yyv4676 = append(yyv4676, Volume{}) // var yyz4676 Volume
				yyc4676 = true
			}
			yyh4676.ElemContainerState(yyj4676)
			if yyj4676 < len(yyv4676) {
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = Volume{}
				} else {
					yyv4679 := &yyv4676[yyj4676]
					yyv4679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4676 < len(yyv4676) {
			yyv4676 = yyv4676[:yyj4676]
			yyc4676 = true
		} else if yyj4676 == 0 && yyv4676 == nil {
			yyv4676 = []Volume{}
			yyc4676 = true
		}
	}
	yyh4676.End()
	if yyc4676 {
		*v = yyv4676
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4680 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4681 := &yyv4680
		yy4681.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4682 := *v
	yyh4682, yyl4682 := z.DecSliceHelperStart()
	var yyc4682 bool
	if yyl4682 == 0 {
		if yyv4682 == nil {
			yyv4682 = []Container{}
			yyc4682 = true
		} else if len(yyv4682) != 0 {
			yyv4682 = yyv4682[:0]
			yyc4682 = true
		}
	} else if yyl4682 > 0 {
		var yyrr4682, yyrl4682 int
		var yyrt4682 bool
		if yyl4682 > cap(yyv4682) {

			yyrg4682 := len(yyv4682) > 0
			yyv24682 := yyv4682
			yyrl4682, yyrt4682 = z.DecInferLen(yyl4682, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4682 {
				if yyrl4682 <= cap(yyv4682) {
					yyv4682 = yyv4682[:yyrl4682]
				} else {
					yyv4682 = make([]Container, yyrl4682)
				}
			} else {
				yyv4682 = make([]Container, yyrl4682)
			}
			yyc4682 = true
			yyrr4682 = len(yyv4682)
			if yyrg4682 {
				copy(yyv4682, yyv24682)
			}
		} else if yyl4682 != len(yyv4682) {
			yyv4682 = yyv4682[:yyl4682]
			yyc4682 = true
		}
		yyj4682 := 0
		for ; yyj4682 < yyrr4682; yyj4682++ {
			yyh4682.ElemContainerState(yyj4682)
			if r.TryDecodeAsNil() {
				yyv4682[yyj4682] = Container{}
			} else {
				yyv4683 := &yyv4682[yyj4682]
				yyv4683.CodecDecodeSelf(d)
			}

		}
		if yyrt4682 {
			for ; yyj4682 < yyl4682; yyj4682++ {
				yyv4682 = append(yyv4682, Container{})
				yyh4682.ElemContainerState(yyj4682)
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = Container{}
				} else {
					yyv4684 := &yyv4682[yyj4682]
					yyv4684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4682 := 0
		for ; !r.CheckBreak(); yyj4682++ {

			if yyj4682 >= len(yyv4682) {
				yyv4682 = append(yyv4682, Container{}) // var yyz4682 Container
				yyc4682 = true
			}
			yyh4682.ElemContainerState(yyj4682)
			if yyj4682 < len(yyv4682) {
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = Container{}
				} else {
					yyv4685 := &yyv4682[yyj4682]
					yyv4685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4682 < len(yyv4682) {
			yyv4682 = yyv4682[:yyj4682]
			yyc4682 = true
		} else if yyj4682 == 0 && yyv4682 == nil {
			yyv4682 = []Container{}
			yyc4682 = true
		}
	}
	yyh4682.End()
	if yyc4682 {
		*v = yyv4682
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4686 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4687 := &yyv4686
		yy4687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4688 := *v
	yyh4688, yyl4688 := z.DecSliceHelperStart()
	var yyc4688 bool
	if yyl4688 == 0 {
		if yyv4688 == nil {
			yyv4688 = []LocalObjectReference{}
			yyc4688 = true
		} else if len(yyv4688) != 0 {
			yyv4688 = yyv4688[:0]
			yyc4688 = true
		}
	} else if yyl4688 > 0 {
		var yyrr4688, yyrl4688 int
		var yyrt4688 bool
		if yyl4688 > cap(yyv4688) {

			yyrg4688 := len(yyv4688) > 0
			yyv24688 := yyv4688
			yyrl4688, yyrt4688 = z.DecInferLen(yyl4688, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4688 {
				if yyrl4688 <= cap(yyv4688) {
					yyv4688 = yyv4688[:yyrl4688]
				} else {
					yyv4688 = make([]LocalObjectReference, yyrl4688)
				}
			} else {
				yyv4688 = make([]LocalObjectReference, yyrl4688)
			}
			yyc4688 = true
			yyrr4688 = len(yyv4688)
			if yyrg4688 {
				copy(yyv4688, yyv24688)
			}
		} else if yyl4688 != len(yyv4688) {
			yyv4688 = yyv4688[:yyl4688]
			yyc4688 = true
		}
		yyj4688 := 0
		for ; yyj4688 < yyrr4688; yyj4688++ {
			yyh4688.ElemContainerState(yyj4688)
			if r.TryDecodeAsNil() {
				yyv4688[yyj4688] = LocalObjectReference{}
			} else {
				yyv4689 := &yyv4688[yyj4688]
				yyv4689.CodecDecodeSelf(d)
			}

		}
		if yyrt4688 {
			for ; yyj4688 < yyl4688; yyj4688++ {
				yyv4688 = append(yyv4688, LocalObjectReference{})
				yyh4688.ElemContainerState(yyj4688)
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = LocalObjectReference{}
				} else {
					yyv4690 := &yyv4688[yyj4688]
					yyv4690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4688 := 0
		for ; !r.CheckBreak(); yyj4688++ {

			if yyj4688 >= len(yyv4688) {
				yyv4688 = append(yyv4688, LocalObjectReference{}) // var yyz4688 LocalObjectReference
				yyc4688 = true
			}
			yyh4688.ElemContainerState(yyj4688)
			if yyj4688 < len(yyv4688) {
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = LocalObjectReference{}
				} else {
					yyv4691 := &yyv4688[yyj4688]
					yyv4691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4688 < len(yyv4688) {
			yyv4688 = yyv4688[:yyj4688]
			yyc4688 = true
		} else if yyj4688 == 0 && yyv4688 == nil {
			yyv4688 = []LocalObjectReference{}
			yyc4688 = true
		}
	}
	yyh4688.End()
	if yyc4688 {
		*v = yyv4688
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4693 := &yyv4692
		yy4693.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4694 := *v
	yyh4694, yyl4694 := z.DecSliceHelperStart()
	var yyc4694 bool
	if yyl4694 == 0 {
		if yyv4694 == nil {
			yyv4694 = []PodCondition{}
			yyc4694 = true
		} else if len(yyv4694) != 0 {
			yyv4694 = yyv4694[:0]
			yyc4694 = true
		}
	} else if yyl4694 > 0 {
		var yyrr4694, yyrl4694 int
		var yyrt4694 bool
		if yyl4694 > cap(yyv4694) {

			yyrg4694 := len(yyv4694) > 0
			yyv24694 := yyv4694
			yyrl4694, yyrt4694 = z.DecInferLen(yyl4694, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4694 {
				if yyrl4694 <= cap(yyv4694) {
					yyv4694 = yyv4694[:yyrl4694]
				} else {
					yyv4694 = make([]PodCondition, yyrl4694)
				}
			} else {
				yyv4694 = make([]PodCondition, yyrl4694)
			}
			yyc4694 = true
			yyrr4694 = len(yyv4694)
			if yyrg4694 {
				copy(yyv4694, yyv24694)
			}
		} else if yyl4694 != len(yyv4694) {
			yyv4694 = yyv4694[:yyl4694]
			yyc4694 = true
		}
		yyj4694 := 0
		for ; yyj4694 < yyrr4694; yyj4694++ {
			yyh4694.ElemContainerState(yyj4694)
			if r.TryDecodeAsNil() {
				yyv4694[yyj4694] = PodCondition{}
			} else {
				yyv4695 := &yyv4694[yyj4694]
				yyv4695.CodecDecodeSelf(d)
			}

		}
		if yyrt4694 {
			for ; yyj4694 < yyl4694; yyj4694++ {
				yyv4694 = append(yyv4694, PodCondition{})
				yyh4694.ElemContainerState(yyj4694)
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = PodCondition{}
				} else {
					yyv4696 := &yyv4694[yyj4694]
					yyv4696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4694 := 0
		for ; !r.CheckBreak(); yyj4694++ {

			if yyj4694 >= len(yyv4694) {
				yyv4694 = append(yyv4694, PodCondition{}) // var yyz4694 PodCondition
				yyc4694 = true
			}
			yyh4694.ElemContainerState(yyj4694)
			if yyj4694 < len(yyv4694) {
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = PodCondition{}
				} else {
					yyv4697 := &yyv4694[yyj4694]
					yyv4697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4694 < len(yyv4694) {
			yyv4694 = yyv4694[:yyj4694]
			yyc4694 = true
		} else if yyj4694 == 0 && yyv4694 == nil {
			yyv4694 = []PodCondition{}
			yyc4694 = true
		}
	}
	yyh4694.End()
	if yyc4694 {
		*v = yyv4694
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4699 := &yyv4698
		yy4699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4700 := *v
	yyh4700, yyl4700 := z.DecSliceHelperStart()
	var yyc4700 bool
	if yyl4700 == 0 {
		if yyv4700 == nil {
			yyv4700 = []ContainerStatus{}
			yyc4700 = true
		} else if len(yyv4700) != 0 {
			yyv4700 = yyv4700[:0]
			yyc4700 = true
		}
	} else if yyl4700 > 0 {
		var yyrr4700, yyrl4700 int
		var yyrt4700 bool
		if yyl4700 > cap(yyv4700) {

			yyrg4700 := len(yyv4700) > 0
			yyv24700 := yyv4700
			yyrl4700, yyrt4700 = z.DecInferLen(yyl4700, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4700 {
				if yyrl4700 <= cap(yyv4700) {
					yyv4700 = yyv4700[:yyrl4700]
				} else {
					yyv4700 = make([]ContainerStatus, yyrl4700)
				}
			} else {
				yyv4700 = make([]ContainerStatus, yyrl4700)
			}
			yyc4700 = true
			yyrr4700 = len(yyv4700)
			if yyrg4700 {
				copy(yyv4700, yyv24700)
			}
		} else if yyl4700 != len(yyv4700) {
			yyv4700 = yyv4700[:yyl4700]
			yyc4700 = true
		}
		yyj4700 := 0
		for ; yyj4700 < yyrr4700; yyj4700++ {
			yyh4700.ElemContainerState(yyj4700)
			if r.TryDecodeAsNil() {
				yyv4700[yyj4700] = ContainerStatus{}
			} else {
				yyv4701 := &yyv4700[yyj4700]
				yyv4701.CodecDecodeSelf(d)
			}

		}
		if yyrt4700 {
			for ; yyj4700 < yyl4700; yyj4700++ {
				yyv4700 = append(yyv4700, ContainerStatus{})
				yyh4700.ElemContainerState(yyj4700)
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = ContainerStatus{}
				} else {
					yyv4702 := &yyv4700[yyj4700]
					yyv4702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4700 := 0
		for ; !r.CheckBreak(); yyj4700++ {

			if yyj4700 >= len(yyv4700) {
				yyv4700 = append(yyv4700, ContainerStatus{}) // var yyz4700 ContainerStatus
				yyc4700 = true
			}
			yyh4700.ElemContainerState(yyj4700)
			if yyj4700 < len(yyv4700) {
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = ContainerStatus{}
				} else {
					yyv4703 := &yyv4700[yyj4700]
					yyv4703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4700 < len(yyv4700) {
			yyv4700 = yyv4700[:yyj4700]
			yyc4700 = true
		} else if yyj4700 == 0 && yyv4700 == nil {
			yyv4700 = []ContainerStatus{}
			yyc4700 = true
		}
	}
	yyh4700.End()
	if yyc4700 {
		*v = yyv4700
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4704 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4705 := &yyv4704
		yy4705.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4706 := *v
	yyh4706, yyl4706 := z.DecSliceHelperStart()
	var yyc4706 bool
	if yyl4706 == 0 {
		if yyv4706 == nil {
			yyv4706 = []Pod{}
			yyc4706 = true
		} else if len(yyv4706) != 0 {
			yyv4706 = yyv4706[:0]
			yyc4706 = true
		}
	} else if yyl4706 > 0 {
		var yyrr4706, yyrl4706 int
		var yyrt4706 bool
		if yyl4706 > cap(yyv4706) {

			yyrg4706 := len(yyv4706) > 0
			yyv24706 := yyv4706
			yyrl4706, yyrt4706 = z.DecInferLen(yyl4706, z.DecBasicHandle().MaxInitLen, 680)
			if yyrt4706 {
				if yyrl4706 <= cap(yyv4706) {
					yyv4706 = yyv4706[:yyrl4706]
				} else {
					yyv4706 = make([]Pod, yyrl4706)
				}
			} else {
				yyv4706 = make([]Pod, yyrl4706)
			}
			yyc4706 = true
			yyrr4706 = len(yyv4706)
			if yyrg4706 {
				copy(yyv4706, yyv24706)
			}
		} else if yyl4706 != len(yyv4706) {
			yyv4706 = yyv4706[:yyl4706]
			yyc4706 = true
		}
		yyj4706 := 0
		for ; yyj4706 < yyrr4706; yyj4706++ {
			yyh4706.ElemContainerState(yyj4706)
			if r.TryDecodeAsNil() {
				yyv4706[yyj4706] = Pod{}
			} else {
				yyv4707 := &yyv4706[yyj4706]
				yyv4707.CodecDecodeSelf(d)
			}

		}
		if yyrt4706 {
			for ; yyj4706 < yyl4706; yyj4706++ {
				yyv4706 = append(yyv4706, Pod{})
				yyh4706.ElemContainerState(yyj4706)
				if r.TryDecodeAsNil() {
					yyv4706[yyj4706] = Pod{}
				} else {
					yyv4708 := &yyv4706[yyj4706]
					yyv4708.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4706 := 0
		for ; !r.CheckBreak(); yyj4706++ {

			if yyj4706 >= len(yyv4706) {
				yyv4706 = append(yyv4706, Pod{}) // var yyz4706 Pod
				yyc4706 = true
			}
			yyh4706.ElemContainerState(yyj4706)
			if yyj4706 < len(yyv4706) {
				if r.TryDecodeAsNil() {
					yyv4706[yyj4706] = Pod{}
				} else {
					yyv4709 := &yyv4706[yyj4706]
					yyv4709.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4706 < len(yyv4706) {
			yyv4706 = yyv4706[:yyj4706]
			yyc4706 = true
		} else if yyj4706 == 0 && yyv4706 == nil {
			yyv4706 = []Pod{}
			yyc4706 = true
		}
	}
	yyh4706.End()
	if yyc4706 {
		*v = yyv4706
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4710 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4711 := &yyv4710
		yy4711.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4712 := *v
	yyh4712, yyl4712 := z.DecSliceHelperStart()
	var yyc4712 bool
	if yyl4712 == 0 {
		if yyv4712 == nil {
			yyv4712 = []PodTemplate{}
			yyc4712 = true
		} else if len(yyv4712) != 0 {
			yyv4712 = yyv4712[:0]
			yyc4712 = true
		}
	} else if yyl4712 > 0 {
		var yyrr4712, yyrl4712 int
		var yyrt4712 bool
		if yyl4712 > cap(yyv4712) {

			yyrg4712 := len(yyv4712) > 0
			yyv24712 := yyv4712
			yyrl4712, yyrt4712 = z.DecInferLen(yyl4712, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4712 {
				if yyrl4712 <= cap(yyv4712) {
					yyv4712 = yyv4712[:yyrl4712]
				} else {
					yyv4712 = make([]PodTemplate, yyrl4712)
				}
			} else {
				yyv4712 = make([]PodTemplate, yyrl4712)
			}
			yyc4712 = true
			yyrr4712 = len(yyv4712)
			if yyrg4712 {
				copy(yyv4712, yyv24712)
			}
		} else if yyl4712 != len(yyv4712) {
			yyv4712 = yyv4712[:yyl4712]
			yyc4712 = true
		}
		yyj4712 := 0
		for ; yyj4712 < yyrr4712; yyj4712++ {
			yyh4712.ElemContainerState(yyj4712)
			if r.TryDecodeAsNil() {
				yyv4712[yyj4712] = PodTemplate{}
			} else {
				yyv4713 := &yyv4712[yyj4712]
				yyv4713.CodecDecodeSelf(d)
			}

		}
		if yyrt4712 {
			for ; yyj4712 < yyl4712; yyj4712++ {
				yyv4712 = append(yyv4712, PodTemplate{})
				yyh4712.ElemContainerState(yyj4712)
				if r.TryDecodeAsNil() {
					yyv4712[yyj4712] = PodTemplate{}
				} else {
					yyv4714 := &yyv4712[yyj4712]
					yyv4714.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4712 := 0
		for ; !r.CheckBreak(); yyj4712++ {

			if yyj4712 >= len(yyv4712) {
				yyv4712 = append(yyv4712, PodTemplate{}) // var yyz4712 PodTemplate
				yyc4712 = true
			}
			yyh4712.ElemContainerState(yyj4712)
			if yyj4712 < len(yyv4712) {
				if r.TryDecodeAsNil() {
					yyv4712[yyj4712] = PodTemplate{}
				} else {
					yyv4715 := &yyv4712[yyj4712]
					yyv4715.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4712 < len(yyv4712) {
			yyv4712 = yyv4712[:yyj4712]
			yyc4712 = true
		} else if yyj4712 == 0 && yyv4712 == nil {
			yyv4712 = []PodTemplate{}
			yyc4712 = true
		}
	}
	yyh4712.End()
	if yyc4712 {
		*v = yyv4712
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4716 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4717 := &yyv4716
		yy4717.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4718 := *v
	yyh4718, yyl4718 := z.DecSliceHelperStart()
	var yyc4718 bool
	if yyl4718 == 0 {
		if yyv4718 == nil {
			yyv4718 = []ReplicationControllerCondition{}
			yyc4718 = true
		} else if len(yyv4718) != 0 {
			yyv4718 = yyv4718[:0]
			yyc4718 = true
		}
	} else if yyl4718 > 0 {
		var yyrr4718, yyrl4718 int
		var yyrt4718 bool
		if yyl4718 > cap(yyv4718) {

			yyrg4718 := len(yyv4718) > 0
			yyv24718 := yyv4718
			yyrl4718, yyrt4718 = z.DecInferLen(yyl4718, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4718 {
				if yyrl4718 <= cap(yyv4718) {
					yyv4718 = yyv4718[:yyrl4718]
				} else {
					yyv4718 = make([]ReplicationControllerCondition, yyrl4718)
				}
			} else {
				yyv4718 = make([]ReplicationControllerCondition, yyrl4718)
			}
			yyc4718 = true
			yyrr4718 = len(yyv4718)
			if yyrg4718 {
				copy(yyv4718, yyv24718)
			}
		} else if yyl4718 != len(yyv4718) {
			yyv4718 = yyv4718[:yyl4718]
			yyc4718 = true
		}
		yyj4718 := 0
		for ; yyj4718 < yyrr4718; yyj4718++ {
			yyh4718.ElemContainerState(yyj4718)
			if r.TryDecodeAsNil() {
				yyv4718[yyj4718] = ReplicationControllerCondition{}
			} else {
				yyv4719 := &yyv4718[yyj4718]
				yyv4719.CodecDecodeSelf(d)
			}

		}
		if yyrt4718 {
			for ; yyj4718 < yyl4718; yyj4718++ {
				yyv4718 = append(yyv4718, ReplicationControllerCondition{})
				yyh4718.ElemContainerState(yyj4718)
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = ReplicationControllerCondition{}
				} else {
					yyv4720 := &yyv4718[yyj4718]
					yyv4720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4718 := 0
		for ; !r.CheckBreak(); yyj4718++ {

			if yyj4718 >= len(yyv4718) {
				yyv4718 = append(yyv4718, ReplicationControllerCondition{}) // var yyz4718 ReplicationControllerCondition
				yyc4718 = true
			}
			yyh4718.ElemContainerState(yyj4718)
			if yyj4718 < len(yyv4718) {
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = ReplicationControllerCondition{}
				} else {
					yyv4721 := &yyv4718[yyj4718]
					yyv4721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4718 < len(yyv4718) {
			yyv4718 = yyv4718[:yyj4718]
			yyc4718 = true
		} else if yyj4718 == 0 && yyv4718 == nil {
			yyv4718 = []ReplicationControllerCondition{}
			yyc4718 = true
		}
	}
	yyh4718.End()
	if yyc4718 {
		*v = yyv4718
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4722 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4723 := &yyv4722
		yy4723.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4724 := *v
	yyh4724, yyl4724 := z.DecSliceHelperStart()
	var yyc4724 bool
	if yyl4724 == 0 {
		if yyv4724 == nil {
			yyv4724 = []ReplicationController{}
			yyc4724 = true
		} else if len(yyv4724) != 0 {
			yyv4724 = yyv4724[:0]
			yyc4724 = true
		}
	} else if yyl4724 > 0 {
		var yyrr4724, yyrl4724 int
		var yyrt4724 bool
		if yyl4724 > cap(yyv4724) {

			yyrg4724 := len(yyv4724) > 0
			yyv24724 := yyv4724
			yyrl4724, yyrt4724 = z.DecInferLen(yyl4724, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt4724 {
				if yyrl4724 <= cap(yyv4724) {
					yyv4724 = yyv4724[:yyrl4724]
				} else {
					yyv4724 = make([]ReplicationController, yyrl4724)
				}
			} else {
				yyv4724 = make([]ReplicationController, yyrl4724)
			}
			yyc4724 = true
			yyrr4724 = len(yyv4724)
			if yyrg4724 {
				copy(yyv4724, yyv24724)
			}
		} else if yyl4724 != len(yyv4724) {
			yyv4724 = yyv4724[:yyl4724]
			yyc4724 = true
		}
		yyj4724 := 0
		for ; yyj4724 < yyrr4724; yyj4724++ {
			yyh4724.ElemContainerState(yyj4724)
			if r.TryDecodeAsNil() {
				yyv4724[yyj4724] = ReplicationController{}
			} else {
				yyv4725 := &yyv4724[yyj4724]
				yyv4725.CodecDecodeSelf(d)
			}

		}
		if yyrt4724 {
			for ; yyj4724 < yyl4724; yyj4724++ {
				yyv4724 = append(yyv4724, ReplicationController{})
				yyh4724.ElemContainerState(yyj4724)
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = ReplicationController{}
				} else {
					yyv4726 := &yyv4724[yyj4724]
					yyv4726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4724 := 0
		for ; !r.CheckBreak(); yyj4724++ {

			if yyj4724 >= len(yyv4724) {
				yyv4724 = append(yyv4724, ReplicationController{}) // var yyz4724 ReplicationController
				yyc4724 = true
			}
			yyh4724.ElemContainerState(yyj4724)
			if yyj4724 < len(yyv4724) {
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = ReplicationController{}
				} else {
					yyv4727 := &yyv4724[yyj4724]
					yyv4727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4724 < len(yyv4724) {
			yyv4724 = yyv4724[:yyj4724]
			yyc4724 = true
		} else if yyj4724 == 0 && yyv4724 == nil {
			yyv4724 = []ReplicationController{}
			yyc4724 = true
		}
	}
	yyh4724.End()
	if yyc4724 {
		*v = yyv4724
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4728 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4729 := &yyv4728
		yy4729.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4730 := *v
	yyh4730, yyl4730 := z.DecSliceHelperStart()
	var yyc4730 bool
	if yyl4730 == 0 {
		if yyv4730 == nil {
			yyv4730 = []LoadBalancerIngress{}
			yyc4730 = true
		} else if len(yyv4730) != 0 {
			yyv4730 = yyv4730[:0]
			yyc4730 = true
		}
	} else if yyl4730 > 0 {
		var yyrr4730, yyrl4730 int
		var yyrt4730 bool
		if yyl4730 > cap(yyv4730) {

			yyrg4730 := len(yyv4730) > 0
			yyv24730 := yyv4730
			yyrl4730, yyrt4730 = z.DecInferLen(yyl4730, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4730 {
				if yyrl4730 <= cap(yyv4730) {
					yyv4730 = yyv4730[:yyrl4730]
				} else {
					yyv4730 = make([]LoadBalancerIngress, yyrl4730)
				}
			} else {
				yyv4730 = make([]LoadBalancerIngress, yyrl4730)
			}
			yyc4730 = true
			yyrr4730 = len(yyv4730)
			if yyrg4730 {
				copy(yyv4730, yyv24730)
			}
		} else if yyl4730 != len(yyv4730) {
			yyv4730 = yyv4730[:yyl4730]
			yyc4730 = true
		}
		yyj4730 := 0
		for ; yyj4730 < yyrr4730; yyj4730++ {
			yyh4730.ElemContainerState(yyj4730)
			if r.TryDecodeAsNil() {
				yyv4730[yyj4730] = LoadBalancerIngress{}
			} else {
				yyv4731 := &yyv4730[yyj4730]
				yyv4731.CodecDecodeSelf(d)
			}

		}
		if yyrt4730 {
			for ; yyj4730 < yyl4730; yyj4730++ {
				yyv4730 = append(yyv4730, LoadBalancerIngress{})
				yyh4730.ElemContainerState(yyj4730)
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = LoadBalancerIngress{}
				} else {
					yyv4732 := &yyv4730[yyj4730]
					yyv4732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4730 := 0
		for ; !r.CheckBreak(); yyj4730++ {

			if yyj4730 >= len(yyv4730) {
				yyv4730 = append(yyv4730, LoadBalancerIngress{}) // var yyz4730 LoadBalancerIngress
				yyc4730 = true
			}
			yyh4730.ElemContainerState(yyj4730)
			if yyj4730 < len(yyv4730) {
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = LoadBalancerIngress{}
				} else {
					yyv4733 := &yyv4730[yyj4730]
					yyv4733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4730 < len(yyv4730) {
			yyv4730 = yyv4730[:yyj4730]
			yyc4730 = true
		} else if yyj4730 == 0 && yyv4730 == nil {
			yyv4730 = []LoadBalancerIngress{}
			yyc4730 = true
		}
	}
	yyh4730.End()
	if yyc4730 {
		*v = yyv4730
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4734 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4735 := &yyv4734
		yy4735.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4736 := *v
	yyh4736, yyl4736 := z.DecSliceHelperStart()
	var yyc4736 bool
	if yyl4736 == 0 {
		if yyv4736 == nil {
			yyv4736 = []ServicePort{}
			yyc4736 = true
		} else if len(yyv4736) != 0 {
			yyv4736 = yyv4736[:0]
			yyc4736 = true
		}
	} else if yyl4736 > 0 {
		var yyrr4736, yyrl4736 int
		var yyrt4736 bool
		if yyl4736 > cap(yyv4736) {

			yyrg4736 := len(yyv4736) > 0
			yyv24736 := yyv4736
			yyrl4736, yyrt4736 = z.DecInferLen(yyl4736, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4736 {
				if yyrl4736 <= cap(yyv4736) {
					yyv4736 = yyv4736[:yyrl4736]
				} else {
					yyv4736 = make([]ServicePort, yyrl4736)
				}
			} else {
				yyv4736 = make([]ServicePort, yyrl4736)
			}
			yyc4736 = true
			yyrr4736 = len(yyv4736)
			if yyrg4736 {
				copy(yyv4736, yyv24736)
			}
		} else if yyl4736 != len(yyv4736) {
			yyv4736 = yyv4736[:yyl4736]
			yyc4736 = true
		}
		yyj4736 := 0
		for ; yyj4736 < yyrr4736; yyj4736++ {
			yyh4736.ElemContainerState(yyj4736)
			if r.TryDecodeAsNil() {
				yyv4736[yyj4736] = ServicePort{}
			} else {
				yyv4737 := &yyv4736[yyj4736]
				yyv4737.CodecDecodeSelf(d)
			}

		}
		if yyrt4736 {
			for ; yyj4736 < yyl4736; yyj4736++ {
				yyv4736 = append(yyv4736, ServicePort{})
				yyh4736.ElemContainerState(yyj4736)
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = ServicePort{}
				} else {
					yyv4738 := &yyv4736[yyj4736]
					yyv4738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4736 := 0
		for ; !r.CheckBreak(); yyj4736++ {

			if yyj4736 >= len(yyv4736) {
				yyv4736 = append(yyv4736, ServicePort{}) // var yyz4736 ServicePort
				yyc4736 = true
			}
			yyh4736.ElemContainerState(yyj4736)
			if yyj4736 < len(yyv4736) {
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = ServicePort{}
				} else {
					yyv4739 := &yyv4736[yyj4736]
					yyv4739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4736 < len(yyv4736) {
			yyv4736 = yyv4736[:yyj4736]
			yyc4736 = true
		} else if yyj4736 == 0 && yyv4736 == nil {
			yyv4736 = []ServicePort{}
			yyc4736 = true
		}
	}
	yyh4736.End()
	if yyc4736 {
		*v = yyv4736
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4740 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4741 := &yyv4740
		yy4741.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4742 := *v
	yyh4742, yyl4742 := z.DecSliceHelperStart()
	var yyc4742 bool
	if yyl4742 == 0 {
		if yyv4742 == nil {
			yyv4742 = []Service{}
			yyc4742 = true
		} else if len(yyv4742) != 0 {
			yyv4742 = yyv4742[:0]
			yyc4742 = true
		}
	} else if yyl4742 > 0 {
		var yyrr4742, yyrl4742 int
		var yyrt4742 bool
		if yyl4742 > cap(yyv4742) {

			yyrg4742 := len(yyv4742) > 0
			yyv24742 := yyv4742
			yyrl4742, yyrt4742 = z.DecInferLen(yyl4742, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4742 {
				if yyrl4742 <= cap(yyv4742) {
					yyv4742 = yyv4742[:yyrl4742]
				} else {
					yyv4742 = make([]Service, yyrl4742)
				}
			} else {
				yyv4742 = make([]Service, yyrl4742)
			}
			yyc4742 = true
			yyrr4742 = len(yyv4742)
			if yyrg4742 {
				copy(yyv4742, yyv24742)
			}
		} else if yyl4742 != len(yyv4742) {
			yyv4742 = yyv4742[:yyl4742]
			yyc4742 = true
		}
		yyj4742 := 0
		for ; yyj4742 < yyrr4742; yyj4742++ {
			yyh4742.ElemContainerState(yyj4742)
			if r.TryDecodeAsNil() {
				yyv4742[yyj4742] = Service{}
			} else {
				yyv4743 := &yyv4742[yyj4742]
				yyv4743.CodecDecodeSelf(d)
			}

		}
		if yyrt4742 {
			for ; yyj4742 < yyl4742; yyj4742++ {
				yyv4742 = append(yyv4742, Service{})
				yyh4742.ElemContainerState(yyj4742)
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = Service{}
				} else {
					yyv4744 := &yyv4742[yyj4742]
					yyv4744.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4742 := 0
		for ; !r.CheckBreak(); yyj4742++ {

			if yyj4742 >= len(yyv4742) {
				yyv4742 = append(yyv4742, Service{}) // var yyz4742 Service
				yyc4742 = true
			}
			yyh4742.ElemContainerState(yyj4742)
			if yyj4742 < len(yyv4742) {
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = Service{}
				} else {
					yyv4745 := &yyv4742[yyj4742]
					yyv4745.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4742 < len(yyv4742) {
			yyv4742 = yyv4742[:yyj4742]
			yyc4742 = true
		} else if yyj4742 == 0 && yyv4742 == nil {
			yyv4742 = []Service{}
			yyc4742 = true
		}
	}
	yyh4742.End()
	if yyc4742 {
		*v = yyv4742
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4746 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4747 := &yyv4746
		yy4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []ObjectReference{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrg4748 := len(yyv4748) > 0
			yyv24748 := yyv4748
			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]ObjectReference, yyrl4748)
				}
			} else {
				yyv4748 = make([]ObjectReference, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
			if yyrg4748 {
				copy(yyv4748, yyv24748)
			}
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = ObjectReference{}
			} else {
				yyv4749 := &yyv4748[yyj4748]
				yyv4749.CodecDecodeSelf(d)
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, ObjectReference{})
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = ObjectReference{}
				} else {
					yyv4750 := &yyv4748[yyj4748]
					yyv4750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, ObjectReference{}) // var yyz4748 ObjectReference
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = ObjectReference{}
				} else {
					yyv4751 := &yyv4748[yyj4748]
					yyv4751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []ObjectReference{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4753 := &yyv4752
		yy4753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4754 := *v
	yyh4754, yyl4754 := z.DecSliceHelperStart()
	var yyc4754 bool
	if yyl4754 == 0 {
		if yyv4754 == nil {
			yyv4754 = []ServiceAccount{}
			yyc4754 = true
		} else if len(yyv4754) != 0 {
			yyv4754 = yyv4754[:0]
			yyc4754 = true
		}
	} else if yyl4754 > 0 {
		var yyrr4754, yyrl4754 int
		var yyrt4754 bool
		if yyl4754 > cap(yyv4754) {

			yyrg4754 := len(yyv4754) > 0
			yyv24754 := yyv4754
			yyrl4754, yyrt4754 = z.DecInferLen(yyl4754, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4754 {
				if yyrl4754 <= cap(yyv4754) {
					yyv4754 = yyv4754[:yyrl4754]
				} else {
					yyv4754 = make([]ServiceAccount, yyrl4754)
				}
			} else {
				yyv4754 = make([]ServiceAccount, yyrl4754)
			}
			yyc4754 = true
			yyrr4754 = len(yyv4754)
			if yyrg4754 {
				copy(yyv4754, yyv24754)
			}
		} else if yyl4754 != len(yyv4754) {
			yyv4754 = yyv4754[:yyl4754]
			yyc4754 = true
		}
		yyj4754 := 0
		for ; yyj4754 < yyrr4754; yyj4754++ {
			yyh4754.ElemContainerState(yyj4754)
			if r.TryDecodeAsNil() {
				yyv4754[yyj4754] = ServiceAccount{}
			} else {
				yyv4755 := &yyv4754[yyj4754]
				yyv4755.CodecDecodeSelf(d)
			}

		}
		if yyrt4754 {
			for ; yyj4754 < yyl4754; yyj4754++ {
				yyv4754 = append(yyv4754, ServiceAccount{})
				yyh4754.ElemContainerState(yyj4754)
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = ServiceAccount{}
				} else {
					yyv4756 := &yyv4754[yyj4754]
					yyv4756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4754 := 0
		for ; !r.CheckBreak(); yyj4754++ {

			if yyj4754 >= len(yyv4754) {
				yyv4754 = append(yyv4754, ServiceAccount{}) // var yyz4754 ServiceAccount
				yyc4754 = true
			}
			yyh4754.ElemContainerState(yyj4754)
			if yyj4754 < len(yyv4754) {
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = ServiceAccount{}
				} else {
					yyv4757 := &yyv4754[yyj4754]
					yyv4757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4754 < len(yyv4754) {
			yyv4754 = yyv4754[:yyj4754]
			yyc4754 = true
		} else if yyj4754 == 0 && yyv4754 == nil {
			yyv4754 = []ServiceAccount{}
			yyc4754 = true
		}
	}
	yyh4754.End()
	if yyc4754 {
		*v = yyv4754
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4758 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4759 := &yyv4758
		yy4759.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4760 := *v
	yyh4760, yyl4760 := z.DecSliceHelperStart()
	var yyc4760 bool
	if yyl4760 == 0 {
		if yyv4760 == nil {
			yyv4760 = []EndpointSubset{}
			yyc4760 = true
		} else if len(yyv4760) != 0 {
			yyv4760 = yyv4760[:0]
			yyc4760 = true
		}
	} else if yyl4760 > 0 {
		var yyrr4760, yyrl4760 int
		var yyrt4760 bool
		if yyl4760 > cap(yyv4760) {

			yyrg4760 := len(yyv4760) > 0
			yyv24760 := yyv4760
			yyrl4760, yyrt4760 = z.DecInferLen(yyl4760, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4760 {
				if yyrl4760 <= cap(yyv4760) {
					yyv4760 = yyv4760[:yyrl4760]
				} else {
					yyv4760 = make([]EndpointSubset, yyrl4760)
				}
			} else {
				yyv4760 = make([]EndpointSubset, yyrl4760)
			}
			yyc4760 = true
			yyrr4760 = len(yyv4760)
			if yyrg4760 {
				copy(yyv4760, yyv24760)
			}
		} else if yyl4760 != len(yyv4760) {
			yyv4760 = yyv4760[:yyl4760]
			yyc4760 = true
		}
		yyj4760 := 0
		for ; yyj4760 < yyrr4760; yyj4760++ {
			yyh4760.ElemContainerState(yyj4760)
			if r.TryDecodeAsNil() {
				yyv4760[yyj4760] = EndpointSubset{}
			} else {
				yyv4761 := &yyv4760[yyj4760]
				yyv4761.CodecDecodeSelf(d)
			}

		}
		if yyrt4760 {
			for ; yyj4760 < yyl4760; yyj4760++ {
				yyv4760 = append(yyv4760, EndpointSubset{})
				yyh4760.ElemContainerState(yyj4760)
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = EndpointSubset{}
				} else {
					yyv4762 := &yyv4760[yyj4760]
					yyv4762.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4760 := 0
		for ; !r.CheckBreak(); yyj4760++ {

			if yyj4760 >= len(yyv4760) {
				yyv4760 = append(yyv4760, EndpointSubset{}) // var yyz4760 EndpointSubset
				yyc4760 = true
			}
			yyh4760.ElemContainerState(yyj4760)
			if yyj4760 < len(yyv4760) {
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = EndpointSubset{}
				} else {
					yyv4763 := &yyv4760[yyj4760]
					yyv4763.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4760 < len(yyv4760) {
			yyv4760 = yyv4760[:yyj4760]
			yyc4760 = true
		} else if yyj4760 == 0 && yyv4760 == nil {
			yyv4760 = []EndpointSubset{}
			yyc4760 = true
		}
	}
	yyh4760.End()
	if yyc4760 {
		*v = yyv4760
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4764 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4765 := &yyv4764
		yy4765.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4766 := *v
	yyh4766, yyl4766 := z.DecSliceHelperStart()
	var yyc4766 bool
	if yyl4766 == 0 {
		if yyv4766 == nil {
			yyv4766 = []EndpointAddress{}
			yyc4766 = true
		} else if len(yyv4766) != 0 {
			yyv4766 = yyv4766[:0]
			yyc4766 = true
		}
	} else if yyl4766 > 0 {
		var yyrr4766, yyrl4766 int
		var yyrt4766 bool
		if yyl4766 > cap(yyv4766) {

			yyrg4766 := len(yyv4766) > 0
			yyv24766 := yyv4766
			yyrl4766, yyrt4766 = z.DecInferLen(yyl4766, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4766 {
				if yyrl4766 <= cap(yyv4766) {
					yyv4766 = yyv4766[:yyrl4766]
				} else {
					yyv4766 = make([]EndpointAddress, yyrl4766)
				}
			} else {
				yyv4766 = make([]EndpointAddress, yyrl4766)
			}
			yyc4766 = true
			yyrr4766 = len(yyv4766)
			if yyrg4766 {
				copy(yyv4766, yyv24766)
			}
		} else if yyl4766 != len(yyv4766) {
			yyv4766 = yyv4766[:yyl4766]
			yyc4766 = true
		}
		yyj4766 := 0
		for ; yyj4766 < yyrr4766; yyj4766++ {
			yyh4766.ElemContainerState(yyj4766)
			if r.TryDecodeAsNil() {
				yyv4766[yyj4766] = EndpointAddress{}
			} else {
				yyv4767 := &yyv4766[yyj4766]
				yyv4767.CodecDecodeSelf(d)
			}

		}
		if yyrt4766 {
			for ; yyj4766 < yyl4766; yyj4766++ {
				yyv4766 = append(yyv4766, EndpointAddress{})
				yyh4766.ElemContainerState(yyj4766)
				if r.TryDecodeAsNil() {
					yyv4766[yyj4766] = EndpointAddress{}
				} else {
					yyv4768 := &yyv4766[yyj4766]
					yyv4768.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4766 := 0
		for ; !r.CheckBreak(); yyj4766++ {

			if yyj4766 >= len(yyv4766) {
				yyv4766 = append(yyv4766, EndpointAddress{}) // var yyz4766 EndpointAddress
				yyc4766 = true
			}
			yyh4766.ElemContainerState(yyj4766)
			if yyj4766 < len(yyv4766) {
				if r.TryDecodeAsNil() {
					yyv4766[yyj4766] = EndpointAddress{}
				} else {
					yyv4769 := &yyv4766[yyj4766]
					yyv4769.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4766 < len(yyv4766) {
			yyv4766 = yyv4766[:yyj4766]
			yyc4766 = true
		} else if yyj4766 == 0 && yyv4766 == nil {
			yyv4766 = []EndpointAddress{}
			yyc4766 = true
		}
	}
	yyh4766.End()
	if yyc4766 {
		*v = yyv4766
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4770 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4771 := &yyv4770
		yy4771.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4772 := *v
	yyh4772, yyl4772 := z.DecSliceHelperStart()
	var yyc4772 bool
	if yyl4772 == 0 {
		if yyv4772 == nil {
			yyv4772 = []EndpointPort{}
			yyc4772 = true
		} else if len(yyv4772) != 0 {
			yyv4772 = yyv4772[:0]
			yyc4772 = true
		}
	} else if yyl4772 > 0 {
		var yyrr4772, yyrl4772 int
		var yyrt4772 bool
		if yyl4772 > cap(yyv4772) {

			yyrg4772 := len(yyv4772) > 0
			yyv24772 := yyv4772
			yyrl4772, yyrt4772 = z.DecInferLen(yyl4772, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4772 {
				if yyrl4772 <= cap(yyv4772) {
					yyv4772 = yyv4772[:yyrl4772]
				} else {
					yyv4772 = make([]EndpointPort, yyrl4772)
				}
			} else {
				yyv4772 = make([]EndpointPort, yyrl4772)
			}
			yyc4772 = true
			yyrr4772 = len(yyv4772)
			if yyrg4772 {
				copy(yyv4772, yyv24772)
			}
		} else if yyl4772 != len(yyv4772) {
			yyv4772 = yyv4772[:yyl4772]
			yyc4772 = true
		}
		yyj4772 := 0
		for ; yyj4772 < yyrr4772; yyj4772++ {
			yyh4772.ElemContainerState(yyj4772)
			if r.TryDecodeAsNil() {
				yyv4772[yyj4772] = EndpointPort{}
			} else {
				yyv4773 := &yyv4772[yyj4772]
				yyv4773.CodecDecodeSelf(d)
			}

		}
		if yyrt4772 {
			for ; yyj4772 < yyl4772; yyj4772++ {
				yyv4772 = append(yyv4772, EndpointPort{})
				yyh4772.ElemContainerState(yyj4772)
				if r.TryDecodeAsNil() {
					yyv4772[yyj4772] = EndpointPort{}
				} else {
					yyv4774 := &yyv4772[yyj4772]
					yyv4774.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4772 := 0
		for ; !r.CheckBreak(); yyj4772++ {

			if yyj4772 >= len(yyv4772) {
				yyv4772 = append(yyv4772, EndpointPort{}) // var yyz4772 EndpointPort
				yyc4772 = true
			}
			yyh4772.ElemContainerState(yyj4772)
			if yyj4772 < len(yyv4772) {
				if r.TryDecodeAsNil() {
					yyv4772[yyj4772] = EndpointPort{}
				} else {
					yyv4775 := &yyv4772[yyj4772]
					yyv4775.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4772 < len(yyv4772) {
			yyv4772 = yyv4772[:yyj4772]
			yyc4772 = true
		} else if yyj4772 == 0 && yyv4772 == nil {
			yyv4772 = []EndpointPort{}
			yyc4772 = true
		}
	}
	yyh4772.End()
	if yyc4772 {
		*v = yyv4772
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4776 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4777 := &yyv4776
		yy4777.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4778 := *v
	yyh4778, yyl4778 := z.DecSliceHelperStart()
	var yyc4778 bool
	if yyl4778 == 0 {
		if yyv4778 == nil {
			yyv4778 = []Endpoints{}
			yyc4778 = true
		} else if len(yyv4778) != 0 {
			yyv4778 = yyv4778[:0]
			yyc4778 = true
		}
	} else if yyl4778 > 0 {
		var yyrr4778, yyrl4778 int
		var yyrt4778 bool
		if yyl4778 > cap(yyv4778) {

			yyrg4778 := len(yyv4778) > 0
			yyv24778 := yyv4778
			yyrl4778, yyrt4778 = z.DecInferLen(yyl4778, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4778 {
				if yyrl4778 <= cap(yyv4778) {
					yyv4778 = yyv4778[:yyrl4778]
				} else {
					yyv4778 = make([]Endpoints, yyrl4778)
				}
			} else {
				yyv4778 = make([]Endpoints, yyrl4778)
			}
			yyc4778 = true
			yyrr4778 = len(yyv4778)
			if yyrg4778 {
				copy(yyv4778, yyv24778)
			}
		} else if yyl4778 != len(yyv4778) {
			yyv4778 = yyv4778[:yyl4778]
			yyc4778 = true
		}
		yyj4778 := 0
		for ; yyj4778 < yyrr4778; yyj4778++ {
			yyh4778.ElemContainerState(yyj4778)
			if r.TryDecodeAsNil() {
				yyv4778[yyj4778] = Endpoints{}
			} else {
				yyv4779 := &yyv4778[yyj4778]
				yyv4779.CodecDecodeSelf(d)
			}

		}
		if yyrt4778 {
			for ; yyj4778 < yyl4778; yyj4778++ {
				yyv4778 = append(yyv4778, Endpoints{})
				yyh4778.ElemContainerState(yyj4778)
				if r.TryDecodeAsNil() {
					yyv4778[yyj4778] = Endpoints{}
				} else {
					yyv4780 := &yyv4778[yyj4778]
					yyv4780.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4778 := 0
		for ; !r.CheckBreak(); yyj4778++ {

			if yyj4778 >= len(yyv4778) {
				yyv4778 = append(yyv4778, Endpoints{}) // var yyz4778 Endpoints
				yyc4778 = true
			}
			yyh4778.ElemContainerState(yyj4778)
			if yyj4778 < len(yyv4778) {
				if r.TryDecodeAsNil() {
					yyv4778[yyj4778] = Endpoints{}
				} else {
					yyv4781 := &yyv4778[yyj4778]
					yyv4781.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4778 < len(yyv4778) {
			yyv4778 = yyv4778[:yyj4778]
			yyc4778 = true
		} else if yyj4778 == 0 && yyv4778 == nil {
			yyv4778 = []Endpoints{}
			yyc4778 = true
		}
	}
	yyh4778.End()
	if yyc4778 {
		*v = yyv4778
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4782 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4783 := &yyv4782
		yy4783.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4784 := *v
	yyh4784, yyl4784 := z.DecSliceHelperStart()
	var yyc4784 bool
	if yyl4784 == 0 {
		if yyv4784 == nil {
			yyv4784 = []NodeCondition{}
			yyc4784 = true
		} else if len(yyv4784) != 0 {
			yyv4784 = yyv4784[:0]
			yyc4784 = true
		}
	} else if yyl4784 > 0 {
		var yyrr4784, yyrl4784 int
		var yyrt4784 bool
		if yyl4784 > cap(yyv4784) {

			yyrg4784 := len(yyv4784) > 0
			yyv24784 := yyv4784
			yyrl4784, yyrt4784 = z.DecInferLen(yyl4784, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4784 {
				if yyrl4784 <= cap(yyv4784) {
					yyv4784 = yyv4784[:yyrl4784]
				} else {
					yyv4784 = make([]NodeCondition, yyrl4784)
				}
			} else {
				yyv4784 = make([]NodeCondition, yyrl4784)
			}
			yyc4784 = true
			yyrr4784 = len(yyv4784)
			if yyrg4784 {
				copy(yyv4784, yyv24784)
			}
		} else if yyl4784 != len(yyv4784) {
			yyv4784 = yyv4784[:yyl4784]
			yyc4784 = true
		}
		yyj4784 := 0
		for ; yyj4784 < yyrr4784; yyj4784++ {
			yyh4784.ElemContainerState(yyj4784)
			if r.TryDecodeAsNil() {
				yyv4784[yyj4784] = NodeCondition{}
			} else {
				yyv4785 := &yyv4784[yyj4784]
				yyv4785.CodecDecodeSelf(d)
			}

		}
		if yyrt4784 {
			for ; yyj4784 < yyl4784; yyj4784++ {
				yyv4784 = append(yyv4784, NodeCondition{})
				yyh4784.ElemContainerState(yyj4784)
				if r.TryDecodeAsNil() {
					yyv4784[yyj4784] = NodeCondition{}
				} else {
					yyv4786 := &yyv4784[yyj4784]
					yyv4786.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4784 := 0
		for ; !r.CheckBreak(); yyj4784++ {

			if yyj4784 >= len(yyv4784) {
				yyv4784 = append(yyv4784, NodeCondition{}) // var yyz4784 NodeCondition
				yyc4784 = true
			}
			yyh4784.ElemContainerState(yyj4784)
			if yyj4784 < len(yyv4784) {
				if r.TryDecodeAsNil() {
					yyv4784[yyj4784] = NodeCondition{}
				} else {
					yyv4787 := &yyv4784[yyj4784]
					yyv4787.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4784 < len(yyv4784) {
			yyv4784 = yyv4784[:yyj4784]
			yyc4784 = true
		} else if yyj4784 == 0 && yyv4784 == nil {
			yyv4784 = []NodeCondition{}
			yyc4784 = true
		}
	}
	yyh4784.End()
	if yyc4784 {
		*v = yyv4784
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4788 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4789 := &yyv4788
		yy4789.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4790 := *v
	yyh4790, yyl4790 := z.DecSliceHelperStart()
	var yyc4790 bool
	if yyl4790 == 0 {
		if yyv4790 == nil {
			yyv4790 = []NodeAddress{}
			yyc4790 = true
		} else if len(yyv4790) != 0 {
			yyv4790 = yyv4790[:0]
			yyc4790 = true
		}
	} else if yyl4790 > 0 {
		var yyrr4790, yyrl4790 int
		var yyrt4790 bool
		if yyl4790 > cap(yyv4790) {

			yyrg4790 := len(yyv4790) > 0
			yyv24790 := yyv4790
			yyrl4790, yyrt4790 = z.DecInferLen(yyl4790, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4790 {
				if yyrl4790 <= cap(yyv4790) {
					yyv4790 = yyv4790[:yyrl4790]
				} else {
					yyv4790 = make([]NodeAddress, yyrl4790)
				}
			} else {
				yyv4790 = make([]NodeAddress, yyrl4790)
			}
			yyc4790 = true
			yyrr4790 = len(yyv4790)
			if yyrg4790 {
				copy(yyv4790, yyv24790)
			}
		} else if yyl4790 != len(yyv4790) {
			yyv4790 = yyv4790[:yyl4790]
			yyc4790 = true
		}
		yyj4790 := 0
		for ; yyj4790 < yyrr4790; yyj4790++ {
			yyh4790.ElemContainerState(yyj4790)
			if r.TryDecodeAsNil() {
				yyv4790[yyj4790] = NodeAddress{}
			} else {
				yyv4791 := &yyv4790[yyj4790]
				yyv4791.CodecDecodeSelf(d)
			}

		}
		if yyrt4790 {
			for ; yyj4790 < yyl4790; yyj4790++ {
				yyv4790 = append(yyv4790, NodeAddress{})
				yyh4790.ElemContainerState(yyj4790)
				if r.TryDecodeAsNil() {
					yyv4790[yyj4790] = NodeAddress{}
				} else {
					yyv4792 := &yyv4790[yyj4790]
					yyv4792.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4790 := 0
		for ; !r.CheckBreak(); yyj4790++ {

			if yyj4790 >= len(yyv4790) {
				yyv4790 = append(yyv4790, NodeAddress{}) // var yyz4790 NodeAddress
				yyc4790 = true
			}
			yyh4790.ElemContainerState(yyj4790)
			if yyj4790 < len(yyv4790) {
				if r.TryDecodeAsNil() {
					yyv4790[yyj4790] = NodeAddress{}
				} else {
					yyv4793 := &yyv4790[yyj4790]
					yyv4793.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4790 < len(yyv4790) {
			yyv4790 = yyv4790[:yyj4790]
			yyc4790 = true
		} else if yyj4790 == 0 && yyv4790 == nil {
			yyv4790 = []NodeAddress{}
			yyc4790 = true
		}
	}
	yyh4790.End()
	if yyc4790 {
		*v = yyv4790
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4794 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4795 := &yyv4794
		yy4795.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4796 := *v
	yyh4796, yyl4796 := z.DecSliceHelperStart()
	var yyc4796 bool
	if yyl4796 == 0 {
		if yyv4796 == nil {
			yyv4796 = []ContainerImage{}
			yyc4796 = true
		} else if len(yyv4796) != 0 {
			yyv4796 = yyv4796[:0]
			yyc4796 = true
		}
	} else if yyl4796 > 0 {
		var yyrr4796, yyrl4796 int
		var yyrt4796 bool
		if yyl4796 > cap(yyv4796) {

			yyrg4796 := len(yyv4796) > 0
			yyv24796 := yyv4796
			yyrl4796, yyrt4796 = z.DecInferLen(yyl4796, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4796 {
				if yyrl4796 <= cap(yyv4796) {
					yyv4796 = yyv4796[:yyrl4796]
				} else {
					yyv4796 = make([]ContainerImage, yyrl4796)
				}
			} else {
				yyv4796 = make([]ContainerImage, yyrl4796)
			}
			yyc4796 = true
			yyrr4796 = len(yyv4796)
			if yyrg4796 {
				copy(yyv4796, yyv24796)
			}
		} else if yyl4796 != len(yyv4796) {
			yyv4796 = yyv4796[:yyl4796]
			yyc4796 = true
		}
		yyj4796 := 0
		for ; yyj4796 < yyrr4796; yyj4796++ {
			yyh4796.ElemContainerState(yyj4796)
			if r.TryDecodeAsNil() {
				yyv4796[yyj4796] = ContainerImage{}
			} else {
				yyv4797 := &yyv4796[yyj4796]
				yyv4797.CodecDecodeSelf(d)
			}

		}
		if yyrt4796 {
			for ; yyj4796 < yyl4796; yyj4796++ {
				yyv4796 = append(yyv4796, ContainerImage{})
				yyh4796.ElemContainerState(yyj4796)
				if r.TryDecodeAsNil() {
					yyv4796[yyj4796] = ContainerImage{}
				} else {
					yyv4798 := &yyv4796[yyj4796]
					yyv4798.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4796 := 0
		for ; !r.CheckBreak(); yyj4796++ {

			if yyj4796 >= len(yyv4796) {
				yyv4796 = append(yyv4796, ContainerImage{}) // var yyz4796 ContainerImage
				yyc4796 = true
			}
			yyh4796.ElemContainerState(yyj4796)
			if yyj4796 < len(yyv4796) {
				if r.TryDecodeAsNil() {
					yyv4796[yyj4796] = ContainerImage{}
				} else {
					yyv4799 := &yyv4796[yyj4796]
					yyv4799.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4796 < len(yyv4796) {
			yyv4796 = yyv4796[:yyj4796]
			yyc4796 = true
		} else if yyj4796 == 0 && yyv4796 == nil {
			yyv4796 = []ContainerImage{}
			yyc4796 = true
		}
	}
	yyh4796.End()
	if yyc4796 {
		*v = yyv4796
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4800 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4800.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4801 := *v
	yyh4801, yyl4801 := z.DecSliceHelperStart()
	var yyc4801 bool
	if yyl4801 == 0 {
		if yyv4801 == nil {
			yyv4801 = []UniqueVolumeName{}
			yyc4801 = true
		} else if len(yyv4801) != 0 {
			yyv4801 = yyv4801[:0]
			yyc4801 = true
		}
	} else if yyl4801 > 0 {
		var yyrr4801, yyrl4801 int
		var yyrt4801 bool
		if yyl4801 > cap(yyv4801) {

			yyrl4801, yyrt4801 = z.DecInferLen(yyl4801, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4801 {
				if yyrl4801 <= cap(yyv4801) {
					yyv4801 = yyv4801[:yyrl4801]
				} else {
					yyv4801 = make([]UniqueVolumeName, yyrl4801)
				}
			} else {
				yyv4801 = make([]UniqueVolumeName, yyrl4801)
			}
			yyc4801 = true
			yyrr4801 = len(yyv4801)
		} else if yyl4801 != len(yyv4801) {
			yyv4801 = yyv4801[:yyl4801]
			yyc4801 = true
		}
		yyj4801 := 0
		for ; yyj4801 < yyrr4801; yyj4801++ {
			yyh4801.ElemContainerState(yyj4801)
			if r.TryDecodeAsNil() {
				yyv4801[yyj4801] = ""
			} else {
				yyv4801[yyj4801] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4801 {
			for ; yyj4801 < yyl4801; yyj4801++ {
				yyv4801 = append(yyv4801, "")
				yyh4801.ElemContainerState(yyj4801)
				if r.TryDecodeAsNil() {
					yyv4801[yyj4801] = ""
				} else {
					yyv4801[yyj4801] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4801 := 0
		for ; !r.CheckBreak(); yyj4801++ {

			if yyj4801 >= len(yyv4801) {
				yyv4801 = append(yyv4801, "") // var yyz4801 UniqueVolumeName
				yyc4801 = true
			}
			yyh4801.ElemContainerState(yyj4801)
			if yyj4801 < len(yyv4801) {
				if r.TryDecodeAsNil() {
					yyv4801[yyj4801] = ""
				} else {
					yyv4801[yyj4801] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4801 < len(yyv4801) {
			yyv4801 = yyv4801[:yyj4801]
			yyc4801 = true
		} else if yyj4801 == 0 && yyv4801 == nil {
			yyv4801 = []UniqueVolumeName{}
			yyc4801 = true
		}
	}
	yyh4801.End()
	if yyc4801 {
		*v = yyv4801
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4805 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4806 := &yyv4805
		yy4806.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4807 := *v
	yyh4807, yyl4807 := z.DecSliceHelperStart()
	var yyc4807 bool
	if yyl4807 == 0 {
		if yyv4807 == nil {
			yyv4807 = []AttachedVolume{}
			yyc4807 = true
		} else if len(yyv4807) != 0 {
			yyv4807 = yyv4807[:0]
			yyc4807 = true
		}
	} else if yyl4807 > 0 {
		var yyrr4807, yyrl4807 int
		var yyrt4807 bool
		if yyl4807 > cap(yyv4807) {

			yyrg4807 := len(yyv4807) > 0
			yyv24807 := yyv4807
			yyrl4807, yyrt4807 = z.DecInferLen(yyl4807, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4807 {
				if yyrl4807 <= cap(yyv4807) {
					yyv4807 = yyv4807[:yyrl4807]
				} else {
					yyv4807 = make([]AttachedVolume, yyrl4807)
				}
			} else {
				yyv4807 = make([]AttachedVolume, yyrl4807)
			}
			yyc4807 = true
			yyrr4807 = len(yyv4807)
			if yyrg4807 {
				copy(yyv4807, yyv24807)
			}
		} else if yyl4807 != len(yyv4807) {
			yyv4807 = yyv4807[:yyl4807]
			yyc4807 = true
		}
		yyj4807 := 0
		for ; yyj4807 < yyrr4807; yyj4807++ {
			yyh4807.ElemContainerState(yyj4807)
			if r.TryDecodeAsNil() {
				yyv4807[yyj4807] = AttachedVolume{}
			} else {
				yyv4808 := &yyv4807[yyj4807]
				yyv4808.CodecDecodeSelf(d)
			}

		}
		if yyrt4807 {
			for ; yyj4807 < yyl4807; yyj4807++ {
				yyv4807 = append(yyv4807, AttachedVolume{})
				yyh4807.ElemContainerState(yyj4807)
				if r.TryDecodeAsNil() {
					yyv4807[yyj4807] = AttachedVolume{}
				} else {
					yyv4809 := &yyv4807[yyj4807]
					yyv4809.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4807 := 0
		for ; !r.CheckBreak(); yyj4807++ {

			if yyj4807 >= len(yyv4807) {
				yyv4807 = append(yyv4807, AttachedVolume{}) // var yyz4807 AttachedVolume
				yyc4807 = true
			}
			yyh4807.ElemContainerState(yyj4807)
			if yyj4807 < len(yyv4807) {
				if r.TryDecodeAsNil() {
					yyv4807[yyj4807] = AttachedVolume{}
				} else {
					yyv4810 := &yyv4807[yyj4807]
					yyv4810.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4807 < len(yyv4807) {
			yyv4807 = yyv4807[:yyj4807]
			yyc4807 = true
		} else if yyj4807 == 0 && yyv4807 == nil {
			yyv4807 = []AttachedVolume{}
			yyc4807 = true
		}
	}
	yyh4807.End()
	if yyc4807 {
		*v = yyv4807
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4811 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4812 := &yyv4811
		yy4812.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4813 := *v
	yyh4813, yyl4813 := z.DecSliceHelperStart()
	var yyc4813 bool
	if yyl4813 == 0 {
		if yyv4813 == nil {
			yyv4813 = []PreferAvoidPodsEntry{}
			yyc4813 = true
		} else if len(yyv4813) != 0 {
			yyv4813 = yyv4813[:0]
			yyc4813 = true
		}
	} else if yyl4813 > 0 {
		var yyrr4813, yyrl4813 int
		var yyrt4813 bool
		if yyl4813 > cap(yyv4813) {

			yyrg4813 := len(yyv4813) > 0
			yyv24813 := yyv4813
			yyrl4813, yyrt4813 = z.DecInferLen(yyl4813, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4813 {
				if yyrl4813 <= cap(yyv4813) {
					yyv4813 = yyv4813[:yyrl4813]
				} else {
					yyv4813 = make([]PreferAvoidPodsEntry, yyrl4813)
				}
			} else {
				yyv4813 = make([]PreferAvoidPodsEntry, yyrl4813)
			}
			yyc4813 = true
			yyrr4813 = len(yyv4813)
			if yyrg4813 {
				copy(yyv4813, yyv24813)
			}
		} else if yyl4813 != len(yyv4813) {
			yyv4813 = yyv4813[:yyl4813]
			yyc4813 = true
		}
		yyj4813 := 0
		for ; yyj4813 < yyrr4813; yyj4813++ {
			yyh4813.ElemContainerState(yyj4813)
			if r.TryDecodeAsNil() {
				yyv4813[yyj4813] = PreferAvoidPodsEntry{}
			} else {
				yyv4814 := &yyv4813[yyj4813]
				yyv4814.CodecDecodeSelf(d)
			}

		}
		if yyrt4813 {
			for ; yyj4813 < yyl4813; yyj4813++ {
				yyv4813 = append(yyv4813, PreferAvoidPodsEntry{})
				yyh4813.ElemContainerState(yyj4813)
				if r.TryDecodeAsNil() {
					yyv4813[yyj4813] = PreferAvoidPodsEntry{}
				} else {
					yyv4815 := &yyv4813[yyj4813]
					yyv4815.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4813 := 0
		for ; !r.CheckBreak(); yyj4813++ {

			if yyj4813 >= len(yyv4813) {
				yyv4813 = append(yyv4813, PreferAvoidPodsEntry{}) // var yyz4813 PreferAvoidPodsEntry
				yyc4813 = true
			}
			yyh4813.ElemContainerState(yyj4813)
			if yyj4813 < len(yyv4813) {
				if r.TryDecodeAsNil() {
					yyv4813[yyj4813] = PreferAvoidPodsEntry{}
				} else {
					yyv4816 := &yyv4813[yyj4813]
					yyv4816.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4813 < len(yyv4813) {
			yyv4813 = yyv4813[:yyj4813]
			yyc4813 = true
		} else if yyj4813 == 0 && yyv4813 == nil {
			yyv4813 = []PreferAvoidPodsEntry{}
			yyc4813 = true
		}
	}
	yyh4813.End()
	if yyc4813 {
		*v = yyv4813
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4817, yyv4817 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4817.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4818 := &yyv4817
		yym4819 := z.EncBinary()
		_ = yym4819
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4818) {
		} else if !yym4819 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4818)
		} else {
			z.EncFallback(yy4818)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4820 := *v
	yyl4820 := r.ReadMapStart()
	yybh4820 := z.DecBasicHandle()
	if yyv4820 == nil {
		yyrl4820, _ := z.DecInferLen(yyl4820, yybh4820.MaxInitLen, 72)
		yyv4820 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4820)
		*v = yyv4820
	}
	var yymk4820 ResourceName
	var yymv4820 pkg3_resource.Quantity
	var yymg4820 bool
	if yybh4820.MapValueReset {
		yymg4820 = true
	}
	if yyl4820 > 0 {
		for yyj4820 := 0; yyj4820 < yyl4820; yyj4820++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4820 = ""
			} else {
				yymk4820 = ResourceName(r.DecodeString())
			}

			if yymg4820 {
				yymv4820 = yyv4820[yymk4820]
			} else {
				yymv4820 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4820 = pkg3_resource.Quantity{}
			} else {
				yyv4822 := &yymv4820
				yym4823 := z.DecBinary()
				_ = yym4823
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4822) {
				} else if !yym4823 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4822)
				} else {
					z.DecFallback(yyv4822, false)
				}
			}

			if yyv4820 != nil {
				yyv4820[yymk4820] = yymv4820
			}
		}
	} else if yyl4820 < 0 {
		for yyj4820 := 0; !r.CheckBreak(); yyj4820++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4820 = ""
			} else {
				yymk4820 = ResourceName(r.DecodeString())
			}

			if yymg4820 {
				yymv4820 = yyv4820[yymk4820]
			} else {
				yymv4820 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4820 = pkg3_resource.Quantity{}
			} else {
				yyv4825 := &yymv4820
				yym4826 := z.DecBinary()
				_ = yym4826
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4825) {
				} else if !yym4826 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4825)
				} else {
					z.DecFallback(yyv4825, false)
				}
			}

			if yyv4820 != nil {
				yyv4820[yymk4820] = yymv4820
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4827 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4828 := &yyv4827
		yy4828.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4829 := *v
	yyh4829, yyl4829 := z.DecSliceHelperStart()
	var yyc4829 bool
	if yyl4829 == 0 {
		if yyv4829 == nil {
			yyv4829 = []Node{}
			yyc4829 = true
		} else if len(yyv4829) != 0 {
			yyv4829 = yyv4829[:0]
			yyc4829 = true
		}
	} else if yyl4829 > 0 {
		var yyrr4829, yyrl4829 int
		var yyrt4829 bool
		if yyl4829 > cap(yyv4829) {

			yyrg4829 := len(yyv4829) > 0
			yyv24829 := yyv4829
			yyrl4829, yyrt4829 = z.DecInferLen(yyl4829, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4829 {
				if yyrl4829 <= cap(yyv4829) {
					yyv4829 = yyv4829[:yyrl4829]
				} else {
					yyv4829 = make([]Node, yyrl4829)
				}
			} else {
				yyv4829 = make([]Node, yyrl4829)
			}
			yyc4829 = true
			yyrr4829 = len(yyv4829)
			if yyrg4829 {
				copy(yyv4829, yyv24829)
			}
		} else if yyl4829 != len(yyv4829) {
			yyv4829 = yyv4829[:yyl4829]
			yyc4829 = true
		}
		yyj4829 := 0
		for ; yyj4829 < yyrr4829; yyj4829++ {
			yyh4829.ElemContainerState(yyj4829)
			if r.TryDecodeAsNil() {
				yyv4829[yyj4829] = Node{}
			} else {
				yyv4830 := &yyv4829[yyj4829]
				yyv4830.CodecDecodeSelf(d)
			}

		}
		if yyrt4829 {
			for ; yyj4829 < yyl4829; yyj4829++ {
				yyv4829 = append(yyv4829, Node{})
				yyh4829.ElemContainerState(yyj4829)
				if r.TryDecodeAsNil() {
					yyv4829[yyj4829] = Node{}
				} else {
					yyv4831 := &yyv4829[yyj4829]
					yyv4831.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4829 := 0
		for ; !r.CheckBreak(); yyj4829++ {

			if yyj4829 >= len(yyv4829) {
				yyv4829 = append(yyv4829, Node{}) // var yyz4829 Node
				yyc4829 = true
			}
			yyh4829.ElemContainerState(yyj4829)
			if yyj4829 < len(yyv4829) {
				if r.TryDecodeAsNil() {
					yyv4829[yyj4829] = Node{}
				} else {
					yyv4832 := &yyv4829[yyj4829]
					yyv4832.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4829 < len(yyv4829) {
			yyv4829 = yyv4829[:yyj4829]
			yyc4829 = true
		} else if yyj4829 == 0 && yyv4829 == nil {
			yyv4829 = []Node{}
			yyc4829 = true
		}
	}
	yyh4829.End()
	if yyc4829 {
		*v = yyv4829
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4833 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4833.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4834 := *v
	yyh4834, yyl4834 := z.DecSliceHelperStart()
	var yyc4834 bool
	if yyl4834 == 0 {
		if yyv4834 == nil {
			yyv4834 = []FinalizerName{}
			yyc4834 = true
		} else if len(yyv4834) != 0 {
			yyv4834 = yyv4834[:0]
			yyc4834 = true
		}
	} else if yyl4834 > 0 {
		var yyrr4834, yyrl4834 int
		var yyrt4834 bool
		if yyl4834 > cap(yyv4834) {

			yyrl4834, yyrt4834 = z.DecInferLen(yyl4834, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4834 {
				if yyrl4834 <= cap(yyv4834) {
					yyv4834 = yyv4834[:yyrl4834]
				} else {
					yyv4834 = make([]FinalizerName, yyrl4834)
				}
			} else {
				yyv4834 = make([]FinalizerName, yyrl4834)
			}
			yyc4834 = true
			yyrr4834 = len(yyv4834)
		} else if yyl4834 != len(yyv4834) {
			yyv4834 = yyv4834[:yyl4834]
			yyc4834 = true
		}
		yyj4834 := 0
		for ; yyj4834 < yyrr4834; yyj4834++ {
			yyh4834.ElemContainerState(yyj4834)
			if r.TryDecodeAsNil() {
				yyv4834[yyj4834] = ""
			} else {
				yyv4834[yyj4834] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4834 {
			for ; yyj4834 < yyl4834; yyj4834++ {
				yyv4834 = append(yyv4834, "")
				yyh4834.ElemContainerState(yyj4834)
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = ""
				} else {
					yyv4834[yyj4834] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4834 := 0
		for ; !r.CheckBreak(); yyj4834++ {

			if yyj4834 >= len(yyv4834) {
				yyv4834 = append(yyv4834, "") // var yyz4834 FinalizerName
				yyc4834 = true
			}
			yyh4834.ElemContainerState(yyj4834)
			if yyj4834 < len(yyv4834) {
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = ""
				} else {
					yyv4834[yyj4834] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4834 < len(yyv4834) {
			yyv4834 = yyv4834[:yyj4834]
			yyc4834 = true
		} else if yyj4834 == 0 && yyv4834 == nil {
			yyv4834 = []FinalizerName{}
			yyc4834 = true
		}
	}
	yyh4834.End()
	if yyc4834 {
		*v = yyv4834
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4838 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4839 := &yyv4838
		yy4839.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4840 := *v
	yyh4840, yyl4840 := z.DecSliceHelperStart()
	var yyc4840 bool
	if yyl4840 == 0 {
		if yyv4840 == nil {
			yyv4840 = []Namespace{}
			yyc4840 = true
		} else if len(yyv4840) != 0 {
			yyv4840 = yyv4840[:0]
			yyc4840 = true
		}
	} else if yyl4840 > 0 {
		var yyrr4840, yyrl4840 int
		var yyrt4840 bool
		if yyl4840 > cap(yyv4840) {

			yyrg4840 := len(yyv4840) > 0
			yyv24840 := yyv4840
			yyrl4840, yyrt4840 = z.DecInferLen(yyl4840, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4840 {
				if yyrl4840 <= cap(yyv4840) {
					yyv4840 = yyv4840[:yyrl4840]
				} else {
					yyv4840 = make([]Namespace, yyrl4840)
				}
			} else {
				yyv4840 = make([]Namespace, yyrl4840)
			}
			yyc4840 = true
			yyrr4840 = len(yyv4840)
			if yyrg4840 {
				copy(yyv4840, yyv24840)
			}
		} else if yyl4840 != len(yyv4840) {
			yyv4840 = yyv4840[:yyl4840]
			yyc4840 = true
		}
		yyj4840 := 0
		for ; yyj4840 < yyrr4840; yyj4840++ {
			yyh4840.ElemContainerState(yyj4840)
			if r.TryDecodeAsNil() {
				yyv4840[yyj4840] = Namespace{}
			} else {
				yyv4841 := &yyv4840[yyj4840]
				yyv4841.CodecDecodeSelf(d)
			}

		}
		if yyrt4840 {
			for ; yyj4840 < yyl4840; yyj4840++ {
				yyv4840 = append(yyv4840, Namespace{})
				yyh4840.ElemContainerState(yyj4840)
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = Namespace{}
				} else {
					yyv4842 := &yyv4840[yyj4840]
					yyv4842.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4840 := 0
		for ; !r.CheckBreak(); yyj4840++ {

			if yyj4840 >= len(yyv4840) {
				yyv4840 = append(yyv4840, Namespace{}) // var yyz4840 Namespace
				yyc4840 = true
			}
			yyh4840.ElemContainerState(yyj4840)
			if yyj4840 < len(yyv4840) {
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = Namespace{}
				} else {
					yyv4843 := &yyv4840[yyj4840]
					yyv4843.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4840 < len(yyv4840) {
			yyv4840 = yyv4840[:yyj4840]
			yyc4840 = true
		} else if yyj4840 == 0 && yyv4840 == nil {
			yyv4840 = []Namespace{}
			yyc4840 = true
		}
	}
	yyh4840.End()
	if yyc4840 {
		*v = yyv4840
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4844 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4845 := &yyv4844
		yy4845.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4846 := *v
	yyh4846, yyl4846 := z.DecSliceHelperStart()
	var yyc4846 bool
	if yyl4846 == 0 {
		if yyv4846 == nil {
			yyv4846 = []Event{}
			yyc4846 = true
		} else if len(yyv4846) != 0 {
			yyv4846 = yyv4846[:0]
			yyc4846 = true
		}
	} else if yyl4846 > 0 {
		var yyrr4846, yyrl4846 int
		var yyrt4846 bool
		if yyl4846 > cap(yyv4846) {

			yyrg4846 := len(yyv4846) > 0
			yyv24846 := yyv4846
			yyrl4846, yyrt4846 = z.DecInferLen(yyl4846, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4846 {
				if yyrl4846 <= cap(yyv4846) {
					yyv4846 = yyv4846[:yyrl4846]
				} else {
					yyv4846 = make([]Event, yyrl4846)
				}
			} else {
				yyv4846 = make([]Event, yyrl4846)
			}
			yyc4846 = true
			yyrr4846 = len(yyv4846)
			if yyrg4846 {
				copy(yyv4846, yyv24846)
			}
		} else if yyl4846 != len(yyv4846) {
			yyv4846 = yyv4846[:yyl4846]
			yyc4846 = true
		}
		yyj4846 := 0
		for ; yyj4846 < yyrr4846; yyj4846++ {
			yyh4846.ElemContainerState(yyj4846)
			if r.TryDecodeAsNil() {
				yyv4846[yyj4846] = Event{}
			} else {
				yyv4847 := &yyv4846[yyj4846]
				yyv4847.CodecDecodeSelf(d)
			}

		}
		if yyrt4846 {
			for ; yyj4846 < yyl4846; yyj4846++ {
				yyv4846 = append(yyv4846, Event{})
				yyh4846.ElemContainerState(yyj4846)
				if r.TryDecodeAsNil() {
					yyv4846[yyj4846] = Event{}
				} else {
					yyv4848 := &yyv4846[yyj4846]
					yyv4848.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4846 := 0
		for ; !r.CheckBreak(); yyj4846++ {

			if yyj4846 >= len(yyv4846) {
				yyv4846 = append(yyv4846, Event{}) // var yyz4846 Event
				yyc4846 = true
			}
			yyh4846.ElemContainerState(yyj4846)
			if yyj4846 < len(yyv4846) {
				if r.TryDecodeAsNil() {
					yyv4846[yyj4846] = Event{}
				} else {
					yyv4849 := &yyv4846[yyj4846]
					yyv4849.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4846 < len(yyv4846) {
			yyv4846 = yyv4846[:yyj4846]
			yyc4846 = true
		} else if yyj4846 == 0 && yyv4846 == nil {
			yyv4846 = []Event{}
			yyc4846 = true
		}
	}
	yyh4846.End()
	if yyc4846 {
		*v = yyv4846
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4850 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4851 := &yyv4850
		yym4852 := z.EncBinary()
		_ = yym4852
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4851) {
		} else if !yym4852 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4851)
		} else {
			z.EncFallback(yy4851)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4853 := *v
	yyh4853, yyl4853 := z.DecSliceHelperStart()
	var yyc4853 bool
	if yyl4853 == 0 {
		if yyv4853 == nil {
			yyv4853 = []pkg5_runtime.RawExtension{}
			yyc4853 = true
		} else if len(yyv4853) != 0 {
			yyv4853 = yyv4853[:0]
			yyc4853 = true
		}
	} else if yyl4853 > 0 {
		var yyrr4853, yyrl4853 int
		var yyrt4853 bool
		if yyl4853 > cap(yyv4853) {

			yyrg4853 := len(yyv4853) > 0
			yyv24853 := yyv4853
			yyrl4853, yyrt4853 = z.DecInferLen(yyl4853, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4853 {
				if yyrl4853 <= cap(yyv4853) {
					yyv4853 = yyv4853[:yyrl4853]
				} else {
					yyv4853 = make([]pkg5_runtime.RawExtension, yyrl4853)
				}
			} else {
				yyv4853 = make([]pkg5_runtime.RawExtension, yyrl4853)
			}
			yyc4853 = true
			yyrr4853 = len(yyv4853)
			if yyrg4853 {
				copy(yyv4853, yyv24853)
			}
		} else if yyl4853 != len(yyv4853) {
			yyv4853 = yyv4853[:yyl4853]
			yyc4853 = true
		}
		yyj4853 := 0
		for ; yyj4853 < yyrr4853; yyj4853++ {
			yyh4853.ElemContainerState(yyj4853)
			if r.TryDecodeAsNil() {
				yyv4853[yyj4853] = pkg5_runtime.RawExtension{}
			} else {
				yyv4854 := &yyv4853[yyj4853]
				yym4855 := z.DecBinary()
				_ = yym4855
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4854) {
				} else if !yym4855 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4854)
				} else {
					z.DecFallback(yyv4854, false)
				}
			}

		}
		if yyrt4853 {
			for ; yyj4853 < yyl4853; yyj4853++ {
				yyv4853 = append(yyv4853, pkg5_runtime.RawExtension{})
				yyh4853.ElemContainerState(yyj4853)
				if r.TryDecodeAsNil() {
					yyv4853[yyj4853] = pkg5_runtime.RawExtension{}
				} else {
					yyv4856 := &yyv4853[yyj4853]
					yym4857 := z.DecBinary()
					_ = yym4857
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4856) {
					} else if !yym4857 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4856)
					} else {
						z.DecFallback(yyv4856, false)
					}
				}

			}
		}

	} else {
		yyj4853 := 0
		for ; !r.CheckBreak(); yyj4853++ {

			if yyj4853 >= len(yyv4853) {
				yyv4853 = append(yyv4853, pkg5_runtime.RawExtension{}) // var yyz4853 pkg5_runtime.RawExtension
				yyc4853 = true
			}
			yyh4853.ElemContainerState(yyj4853)
			if yyj4853 < len(yyv4853) {
				if r.TryDecodeAsNil() {
					yyv4853[yyj4853] = pkg5_runtime.RawExtension{}
				} else {
					yyv4858 := &yyv4853[yyj4853]
					yym4859 := z.DecBinary()
					_ = yym4859
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4858) {
					} else if !yym4859 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4858)
					} else {
						z.DecFallback(yyv4858, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4853 < len(yyv4853) {
			yyv4853 = yyv4853[:yyj4853]
			yyc4853 = true
		} else if yyj4853 == 0 && yyv4853 == nil {
			yyv4853 = []pkg5_runtime.RawExtension{}
			yyc4853 = true
		}
	}
	yyh4853.End()
	if yyc4853 {
		*v = yyv4853
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4860 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4861 := &yyv4860
		yy4861.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4862 := *v
	yyh4862, yyl4862 := z.DecSliceHelperStart()
	var yyc4862 bool
	if yyl4862 == 0 {
		if yyv4862 == nil {
			yyv4862 = []LimitRangeItem{}
			yyc4862 = true
		} else if len(yyv4862) != 0 {
			yyv4862 = yyv4862[:0]
			yyc4862 = true
		}
	} else if yyl4862 > 0 {
		var yyrr4862, yyrl4862 int
		var yyrt4862 bool
		if yyl4862 > cap(yyv4862) {

			yyrg4862 := len(yyv4862) > 0
			yyv24862 := yyv4862
			yyrl4862, yyrt4862 = z.DecInferLen(yyl4862, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4862 {
				if yyrl4862 <= cap(yyv4862) {
					yyv4862 = yyv4862[:yyrl4862]
				} else {
					yyv4862 = make([]LimitRangeItem, yyrl4862)
				}
			} else {
				yyv4862 = make([]LimitRangeItem, yyrl4862)
			}
			yyc4862 = true
			yyrr4862 = len(yyv4862)
			if yyrg4862 {
				copy(yyv4862, yyv24862)
			}
		} else if yyl4862 != len(yyv4862) {
			yyv4862 = yyv4862[:yyl4862]
			yyc4862 = true
		}
		yyj4862 := 0
		for ; yyj4862 < yyrr4862; yyj4862++ {
			yyh4862.ElemContainerState(yyj4862)
			if r.TryDecodeAsNil() {
				yyv4862[yyj4862] = LimitRangeItem{}
			} else {
				yyv4863 := &yyv4862[yyj4862]
				yyv4863.CodecDecodeSelf(d)
			}

		}
		if yyrt4862 {
			for ; yyj4862 < yyl4862; yyj4862++ {
				yyv4862 = append(yyv4862, LimitRangeItem{})
				yyh4862.ElemContainerState(yyj4862)
				if r.TryDecodeAsNil() {
					yyv4862[yyj4862] = LimitRangeItem{}
				} else {
					yyv4864 := &yyv4862[yyj4862]
					yyv4864.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4862 := 0
		for ; !r.CheckBreak(); yyj4862++ {

			if yyj4862 >= len(yyv4862) {
				yyv4862 = append(yyv4862, LimitRangeItem{}) // var yyz4862 LimitRangeItem
				yyc4862 = true
			}
			yyh4862.ElemContainerState(yyj4862)
			if yyj4862 < len(yyv4862) {
				if r.TryDecodeAsNil() {
					yyv4862[yyj4862] = LimitRangeItem{}
				} else {
					yyv4865 := &yyv4862[yyj4862]
					yyv4865.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4862 < len(yyv4862) {
			yyv4862 = yyv4862[:yyj4862]
			yyc4862 = true
		} else if yyj4862 == 0 && yyv4862 == nil {
			yyv4862 = []LimitRangeItem{}
			yyc4862 = true
		}
	}
	yyh4862.End()
	if yyc4862 {
		*v = yyv4862
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4866 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4867 := &yyv4866
		yy4867.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4868 := *v
	yyh4868, yyl4868 := z.DecSliceHelperStart()
	var yyc4868 bool
	if yyl4868 == 0 {
		if yyv4868 == nil {
			yyv4868 = []LimitRange{}
			yyc4868 = true
		} else if len(yyv4868) != 0 {
			yyv4868 = yyv4868[:0]
			yyc4868 = true
		}
	} else if yyl4868 > 0 {
		var yyrr4868, yyrl4868 int
		var yyrt4868 bool
		if yyl4868 > cap(yyv4868) {

			yyrg4868 := len(yyv4868) > 0
			yyv24868 := yyv4868
			yyrl4868, yyrt4868 = z.DecInferLen(yyl4868, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4868 {
				if yyrl4868 <= cap(yyv4868) {
					yyv4868 = yyv4868[:yyrl4868]
				} else {
					yyv4868 = make([]LimitRange, yyrl4868)
				}
			} else {
				yyv4868 = make([]LimitRange, yyrl4868)
			}
			yyc4868 = true
			yyrr4868 = len(yyv4868)
			if yyrg4868 {
				copy(yyv4868, yyv24868)
			}
		} else if yyl4868 != len(yyv4868) {
			yyv4868 = yyv4868[:yyl4868]
			yyc4868 = true
		}
		yyj4868 := 0
		for ; yyj4868 < yyrr4868; yyj4868++ {
			yyh4868.ElemContainerState(yyj4868)
			if r.TryDecodeAsNil() {
				yyv4868[yyj4868] = LimitRange{}
			} else {
				yyv4869 := &yyv4868[yyj4868]
				yyv4869.CodecDecodeSelf(d)
			}

		}
		if yyrt4868 {
			for ; yyj4868 < yyl4868; yyj4868++ {
				yyv4868 = append(yyv4868, LimitRange{})
				yyh4868.ElemContainerState(yyj4868)
				if r.TryDecodeAsNil() {
					yyv4868[yyj4868] = LimitRange{}
				} else {
					yyv4870 := &yyv4868[yyj4868]
					yyv4870.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4868 := 0
		for ; !r.CheckBreak(); yyj4868++ {

			if yyj4868 >= len(yyv4868) {
				yyv4868 = append(yyv4868, LimitRange{}) // var yyz4868 LimitRange
				yyc4868 = true
			}
			yyh4868.ElemContainerState(yyj4868)
			if yyj4868 < len(yyv4868) {
				if r.TryDecodeAsNil() {
					yyv4868[yyj4868] = LimitRange{}
				} else {
					yyv4871 := &yyv4868[yyj4868]
					yyv4871.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4868 < len(yyv4868) {
			yyv4868 = yyv4868[:yyj4868]
			yyc4868 = true
		} else if yyj4868 == 0 && yyv4868 == nil {
			yyv4868 = []LimitRange{}
			yyc4868 = true
		}
	}
	yyh4868.End()
	if yyc4868 {
		*v = yyv4868
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4872 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4872.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4873 := *v
	yyh4873, yyl4873 := z.DecSliceHelperStart()
	var yyc4873 bool
	if yyl4873 == 0 {
		if yyv4873 == nil {
			yyv4873 = []ResourceQuotaScope{}
			yyc4873 = true
		} else if len(yyv4873) != 0 {
			yyv4873 = yyv4873[:0]
			yyc4873 = true
		}
	} else if yyl4873 > 0 {
		var yyrr4873, yyrl4873 int
		var yyrt4873 bool
		if yyl4873 > cap(yyv4873) {

			yyrl4873, yyrt4873 = z.DecInferLen(yyl4873, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4873 {
				if yyrl4873 <= cap(yyv4873) {
					yyv4873 = yyv4873[:yyrl4873]
				} else {
					yyv4873 = make([]ResourceQuotaScope, yyrl4873)
				}
			} else {
				yyv4873 = make([]ResourceQuotaScope, yyrl4873)
			}
			yyc4873 = true
			yyrr4873 = len(yyv4873)
		} else if yyl4873 != len(yyv4873) {
			yyv4873 = yyv4873[:yyl4873]
			yyc4873 = true
		}
		yyj4873 := 0
		for ; yyj4873 < yyrr4873; yyj4873++ {
			yyh4873.ElemContainerState(yyj4873)
			if r.TryDecodeAsNil() {
				yyv4873[yyj4873] = ""
			} else {
				yyv4873[yyj4873] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4873 {
			for ; yyj4873 < yyl4873; yyj4873++ {
				yyv4873 = append(yyv4873, "")
				yyh4873.ElemContainerState(yyj4873)
				if r.TryDecodeAsNil() {
					yyv4873[yyj4873] = ""
				} else {
					yyv4873[yyj4873] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4873 := 0
		for ; !r.CheckBreak(); yyj4873++ {

			if yyj4873 >= len(yyv4873) {
				yyv4873 = append(yyv4873, "") // var yyz4873 ResourceQuotaScope
				yyc4873 = true
			}
			yyh4873.ElemContainerState(yyj4873)
			if yyj4873 < len(yyv4873) {
				if r.TryDecodeAsNil() {
					yyv4873[yyj4873] = ""
				} else {
					yyv4873[yyj4873] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4873 < len(yyv4873) {
			yyv4873 = yyv4873[:yyj4873]
			yyc4873 = true
		} else if yyj4873 == 0 && yyv4873 == nil {
			yyv4873 = []ResourceQuotaScope{}
			yyc4873 = true
		}
	}
	yyh4873.End()
	if yyc4873 {
		*v = yyv4873
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4877 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4878 := &yyv4877
		yy4878.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4879 := *v
	yyh4879, yyl4879 := z.DecSliceHelperStart()
	var yyc4879 bool
	if yyl4879 == 0 {
		if yyv4879 == nil {
			yyv4879 = []ResourceQuota{}
			yyc4879 = true
		} else if len(yyv4879) != 0 {
			yyv4879 = yyv4879[:0]
			yyc4879 = true
		}
	} else if yyl4879 > 0 {
		var yyrr4879, yyrl4879 int
		var yyrt4879 bool
		if yyl4879 > cap(yyv4879) {

			yyrg4879 := len(yyv4879) > 0
			yyv24879 := yyv4879
			yyrl4879, yyrt4879 = z.DecInferLen(yyl4879, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4879 {
				if yyrl4879 <= cap(yyv4879) {
					yyv4879 = yyv4879[:yyrl4879]
				} else {
					yyv4879 = make([]ResourceQuota, yyrl4879)
				}
			} else {
				yyv4879 = make([]ResourceQuota, yyrl4879)
			}
			yyc4879 = true
			yyrr4879 = len(yyv4879)
			if yyrg4879 {
				copy(yyv4879, yyv24879)
			}
		} else if yyl4879 != len(yyv4879) {
			yyv4879 = yyv4879[:yyl4879]
			yyc4879 = true
		}
		yyj4879 := 0
		for ; yyj4879 < yyrr4879; yyj4879++ {
			yyh4879.ElemContainerState(yyj4879)
			if r.TryDecodeAsNil() {
				yyv4879[yyj4879] = ResourceQuota{}
			} else {
				yyv4880 := &yyv4879[yyj4879]
				yyv4880.CodecDecodeSelf(d)
			}

		}
		if yyrt4879 {
			for ; yyj4879 < yyl4879; yyj4879++ {
				yyv4879 = append(yyv4879, ResourceQuota{})
				yyh4879.ElemContainerState(yyj4879)
				if r.TryDecodeAsNil() {
					yyv4879[yyj4879] = ResourceQuota{}
				} else {
					yyv4881 := &yyv4879[yyj4879]
					yyv4881.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4879 := 0
		for ; !r.CheckBreak(); yyj4879++ {

			if yyj4879 >= len(yyv4879) {
				yyv4879 = append(yyv4879, ResourceQuota{}) // var yyz4879 ResourceQuota
				yyc4879 = true
			}
			yyh4879.ElemContainerState(yyj4879)
			if yyj4879 < len(yyv4879) {
				if r.TryDecodeAsNil() {
					yyv4879[yyj4879] = ResourceQuota{}
				} else {
					yyv4882 := &yyv4879[yyj4879]
					yyv4882.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4879 < len(yyv4879) {
			yyv4879 = yyv4879[:yyj4879]
			yyc4879 = true
		} else if yyj4879 == 0 && yyv4879 == nil {
			yyv4879 = []ResourceQuota{}
			yyc4879 = true
		}
	}
	yyh4879.End()
	if yyc4879 {
		*v = yyv4879
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4883, yyv4883 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4884 := z.EncBinary()
		_ = yym4884
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4883))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4883 == nil {
			r.EncodeNil()
		} else {
			yym4885 := z.EncBinary()
			_ = yym4885
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4883))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4886 := *v
	yyl4886 := r.ReadMapStart()
	yybh4886 := z.DecBasicHandle()
	if yyv4886 == nil {
		yyrl4886, _ := z.DecInferLen(yyl4886, yybh4886.MaxInitLen, 40)
		yyv4886 = make(map[string][]uint8, yyrl4886)
		*v = yyv4886
	}
	var yymk4886 string
	var yymv4886 []uint8
	var yymg4886 bool
	if yybh4886.MapValueReset {
		yymg4886 = true
	}
	if yyl4886 > 0 {
		for yyj4886 := 0; yyj4886 < yyl4886; yyj4886++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4886 = ""
			} else {
				yymk4886 = string(r.DecodeString())
			}

			if yymg4886 {
				yymv4886 = yyv4886[yymk4886]
			} else {
				yymv4886 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4886 = nil
			} else {
				yyv4888 := &yymv4886
				yym4889 := z.DecBinary()
				_ = yym4889
				if false {
				} else {
					*yyv4888 = r.DecodeBytes(*(*[]byte)(yyv4888), false, false)
				}
			}

			if yyv4886 != nil {
				yyv4886[yymk4886] = yymv4886
			}
		}
	} else if yyl4886 < 0 {
		for yyj4886 := 0; !r.CheckBreak(); yyj4886++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4886 = ""
			} else {
				yymk4886 = string(r.DecodeString())
			}

			if yymg4886 {
				yymv4886 = yyv4886[yymk4886]
			} else {
				yymv4886 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4886 = nil
			} else {
				yyv4891 := &yymv4886
				yym4892 := z.DecBinary()
				_ = yym4892
				if false {
				} else {
					*yyv4891 = r.DecodeBytes(*(*[]byte)(yyv4891), false, false)
				}
			}

			if yyv4886 != nil {
				yyv4886[yymk4886] = yymv4886
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4893 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4894 := &yyv4893
		yy4894.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4895 := *v
	yyh4895, yyl4895 := z.DecSliceHelperStart()
	var yyc4895 bool
	if yyl4895 == 0 {
		if yyv4895 == nil {
			yyv4895 = []Secret{}
			yyc4895 = true
		} else if len(yyv4895) != 0 {
			yyv4895 = yyv4895[:0]
			yyc4895 = true
		}
	} else if yyl4895 > 0 {
		var yyrr4895, yyrl4895 int
		var yyrt4895 bool
		if yyl4895 > cap(yyv4895) {

			yyrg4895 := len(yyv4895) > 0
			yyv24895 := yyv4895
			yyrl4895, yyrt4895 = z.DecInferLen(yyl4895, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4895 {
				if yyrl4895 <= cap(yyv4895) {
					yyv4895 = yyv4895[:yyrl4895]
				} else {
					yyv4895 = make([]Secret, yyrl4895)
				}
			} else {
				yyv4895 = make([]Secret, yyrl4895)
			}
			yyc4895 = true
			yyrr4895 = len(yyv4895)
			if yyrg4895 {
				copy(yyv4895, yyv24895)
			}
		} else if yyl4895 != len(yyv4895) {
			yyv4895 = yyv4895[:yyl4895]
			yyc4895 = true
		}
		yyj4895 := 0
		for ; yyj4895 < yyrr4895; yyj4895++ {
			yyh4895.ElemContainerState(yyj4895)
			if r.TryDecodeAsNil() {
				yyv4895[yyj4895] = Secret{}
			} else {
				yyv4896 := &yyv4895[yyj4895]
				yyv4896.CodecDecodeSelf(d)
			}

		}
		if yyrt4895 {
			for ; yyj4895 < yyl4895; yyj4895++ {
				yyv4895 = append(yyv4895, Secret{})
				yyh4895.ElemContainerState(yyj4895)
				if r.TryDecodeAsNil() {
					yyv4895[yyj4895] = Secret{}
				} else {
					yyv4897 := &yyv4895[yyj4895]
					yyv4897.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4895 := 0
		for ; !r.CheckBreak(); yyj4895++ {

			if yyj4895 >= len(yyv4895) {
				yyv4895 = append(yyv4895, Secret{}) // var yyz4895 Secret
				yyc4895 = true
			}
			yyh4895.ElemContainerState(yyj4895)
			if yyj4895 < len(yyv4895) {
				if r.TryDecodeAsNil() {
					yyv4895[yyj4895] = Secret{}
				} else {
					yyv4898 := &yyv4895[yyj4895]
					yyv4898.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4895 < len(yyv4895) {
			yyv4895 = yyv4895[:yyj4895]
			yyc4895 = true
		} else if yyj4895 == 0 && yyv4895 == nil {
			yyv4895 = []Secret{}
			yyc4895 = true
		}
	}
	yyh4895.End()
	if yyc4895 {
		*v = yyv4895
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4899 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4900 := &yyv4899
		yy4900.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4901 := *v
	yyh4901, yyl4901 := z.DecSliceHelperStart()
	var yyc4901 bool
	if yyl4901 == 0 {
		if yyv4901 == nil {
			yyv4901 = []ConfigMap{}
			yyc4901 = true
		} else if len(yyv4901) != 0 {
			yyv4901 = yyv4901[:0]
			yyc4901 = true
		}
	} else if yyl4901 > 0 {
		var yyrr4901, yyrl4901 int
		var yyrt4901 bool
		if yyl4901 > cap(yyv4901) {

			yyrg4901 := len(yyv4901) > 0
			yyv24901 := yyv4901
			yyrl4901, yyrt4901 = z.DecInferLen(yyl4901, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4901 {
				if yyrl4901 <= cap(yyv4901) {
					yyv4901 = yyv4901[:yyrl4901]
				} else {
					yyv4901 = make([]ConfigMap, yyrl4901)
				}
			} else {
				yyv4901 = make([]ConfigMap, yyrl4901)
			}
			yyc4901 = true
			yyrr4901 = len(yyv4901)
			if yyrg4901 {
				copy(yyv4901, yyv24901)
			}
		} else if yyl4901 != len(yyv4901) {
			yyv4901 = yyv4901[:yyl4901]
			yyc4901 = true
		}
		yyj4901 := 0
		for ; yyj4901 < yyrr4901; yyj4901++ {
			yyh4901.ElemContainerState(yyj4901)
			if r.TryDecodeAsNil() {
				yyv4901[yyj4901] = ConfigMap{}
			} else {
				yyv4902 := &yyv4901[yyj4901]
				yyv4902.CodecDecodeSelf(d)
			}

		}
		if yyrt4901 {
			for ; yyj4901 < yyl4901; yyj4901++ {
				yyv4901 = append(yyv4901, ConfigMap{})
				yyh4901.ElemContainerState(yyj4901)
				if r.TryDecodeAsNil() {
					yyv4901[yyj4901] = ConfigMap{}
				} else {
					yyv4903 := &yyv4901[yyj4901]
					yyv4903.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4901 := 0
		for ; !r.CheckBreak(); yyj4901++ {

			if yyj4901 >= len(yyv4901) {
				yyv4901 = append(yyv4901, ConfigMap{}) // var yyz4901 ConfigMap
				yyc4901 = true
			}
			yyh4901.ElemContainerState(yyj4901)
			if yyj4901 < len(yyv4901) {
				if r.TryDecodeAsNil() {
					yyv4901[yyj4901] = ConfigMap{}
				} else {
					yyv4904 := &yyv4901[yyj4901]
					yyv4904.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4901 < len(yyv4901) {
			yyv4901 = yyv4901[:yyj4901]
			yyc4901 = true
		} else if yyj4901 == 0 && yyv4901 == nil {
			yyv4901 = []ConfigMap{}
			yyc4901 = true
		}
	}
	yyh4901.End()
	if yyc4901 {
		*v = yyv4901
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4905 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4906 := &yyv4905
		yy4906.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4907 := *v
	yyh4907, yyl4907 := z.DecSliceHelperStart()
	var yyc4907 bool
	if yyl4907 == 0 {
		if yyv4907 == nil {
			yyv4907 = []ComponentCondition{}
			yyc4907 = true
		} else if len(yyv4907) != 0 {
			yyv4907 = yyv4907[:0]
			yyc4907 = true
		}
	} else if yyl4907 > 0 {
		var yyrr4907, yyrl4907 int
		var yyrt4907 bool
		if yyl4907 > cap(yyv4907) {

			yyrg4907 := len(yyv4907) > 0
			yyv24907 := yyv4907
			yyrl4907, yyrt4907 = z.DecInferLen(yyl4907, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4907 {
				if yyrl4907 <= cap(yyv4907) {
					yyv4907 = yyv4907[:yyrl4907]
				} else {
					yyv4907 = make([]ComponentCondition, yyrl4907)
				}
			} else {
				yyv4907 = make([]ComponentCondition, yyrl4907)
			}
			yyc4907 = true
			yyrr4907 = len(yyv4907)
			if yyrg4907 {
				copy(yyv4907, yyv24907)
			}
		} else if yyl4907 != len(yyv4907) {
			yyv4907 = yyv4907[:yyl4907]
			yyc4907 = true
		}
		yyj4907 := 0
		for ; yyj4907 < yyrr4907; yyj4907++ {
			yyh4907.ElemContainerState(yyj4907)
			if r.TryDecodeAsNil() {
				yyv4907[yyj4907] = ComponentCondition{}
			} else {
				yyv4908 := &yyv4907[yyj4907]
				yyv4908.CodecDecodeSelf(d)
			}

		}
		if yyrt4907 {
			for ; yyj4907 < yyl4907; yyj4907++ {
				yyv4907 = append(yyv4907, ComponentCondition{})
				yyh4907.ElemContainerState(yyj4907)
				if r.TryDecodeAsNil() {
					yyv4907[yyj4907] = ComponentCondition{}
				} else {
					yyv4909 := &yyv4907[yyj4907]
					yyv4909.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4907 := 0
		for ; !r.CheckBreak(); yyj4907++ {

			if yyj4907 >= len(yyv4907) {
				yyv4907 = append(yyv4907, ComponentCondition{}) // var yyz4907 ComponentCondition
				yyc4907 = true
			}
			yyh4907.ElemContainerState(yyj4907)
			if yyj4907 < len(yyv4907) {
				if r.TryDecodeAsNil() {
					yyv4907[yyj4907] = ComponentCondition{}
				} else {
					yyv4910 := &yyv4907[yyj4907]
					yyv4910.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4907 < len(yyv4907) {
			yyv4907 = yyv4907[:yyj4907]
			yyc4907 = true
		} else if yyj4907 == 0 && yyv4907 == nil {
			yyv4907 = []ComponentCondition{}
			yyc4907 = true
		}
	}
	yyh4907.End()
	if yyc4907 {
		*v = yyv4907
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4911 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4912 := &yyv4911
		yy4912.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4913 := *v
	yyh4913, yyl4913 := z.DecSliceHelperStart()
	var yyc4913 bool
	if yyl4913 == 0 {
		if yyv4913 == nil {
			yyv4913 = []ComponentStatus{}
			yyc4913 = true
		} else if len(yyv4913) != 0 {
			yyv4913 = yyv4913[:0]
			yyc4913 = true
		}
	} else if yyl4913 > 0 {
		var yyrr4913, yyrl4913 int
		var yyrt4913 bool
		if yyl4913 > cap(yyv4913) {

			yyrg4913 := len(yyv4913) > 0
			yyv24913 := yyv4913
			yyrl4913, yyrt4913 = z.DecInferLen(yyl4913, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4913 {
				if yyrl4913 <= cap(yyv4913) {
					yyv4913 = yyv4913[:yyrl4913]
				} else {
					yyv4913 = make([]ComponentStatus, yyrl4913)
				}
			} else {
				yyv4913 = make([]ComponentStatus, yyrl4913)
			}
			yyc4913 = true
			yyrr4913 = len(yyv4913)
			if yyrg4913 {
				copy(yyv4913, yyv24913)
			}
		} else if yyl4913 != len(yyv4913) {
			yyv4913 = yyv4913[:yyl4913]
			yyc4913 = true
		}
		yyj4913 := 0
		for ; yyj4913 < yyrr4913; yyj4913++ {
			yyh4913.ElemContainerState(yyj4913)
			if r.TryDecodeAsNil() {
				yyv4913[yyj4913] = ComponentStatus{}
			} else {
				yyv4914 := &yyv4913[yyj4913]
				yyv4914.CodecDecodeSelf(d)
			}

		}
		if yyrt4913 {
			for ; yyj4913 < yyl4913; yyj4913++ {
				yyv4913 = append(yyv4913, ComponentStatus{})
				yyh4913.ElemContainerState(yyj4913)
				if r.TryDecodeAsNil() {
					yyv4913[yyj4913] = ComponentStatus{}
				} else {
					yyv4915 := &yyv4913[yyj4913]
					yyv4915.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4913 := 0
		for ; !r.CheckBreak(); yyj4913++ {

			if yyj4913 >= len(yyv4913) {
				yyv4913 = append(yyv4913, ComponentStatus{}) // var yyz4913 ComponentStatus
				yyc4913 = true
			}
			yyh4913.ElemContainerState(yyj4913)
			if yyj4913 < len(yyv4913) {
				if r.TryDecodeAsNil() {
					yyv4913[yyj4913] = ComponentStatus{}
				} else {
					yyv4916 := &yyv4913[yyj4913]
					yyv4916.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4913 < len(yyv4913) {
			yyv4913 = yyv4913[:yyj4913]
			yyc4913 = true
		} else if yyj4913 == 0 && yyv4913 == nil {
			yyv4913 = []ComponentStatus{}
			yyc4913 = true
		}
	}
	yyh4913.End()
	if yyc4913 {
		*v = yyv4913
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4917 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4918 := &yyv4917
		yy4918.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4919 := *v
	yyh4919, yyl4919 := z.DecSliceHelperStart()
	var yyc4919 bool
	if yyl4919 == 0 {
		if yyv4919 == nil {
			yyv4919 = []DownwardAPIVolumeFile{}
			yyc4919 = true
		} else if len(yyv4919) != 0 {
			yyv4919 = yyv4919[:0]
			yyc4919 = true
		}
	} else if yyl4919 > 0 {
		var yyrr4919, yyrl4919 int
		var yyrt4919 bool
		if yyl4919 > cap(yyv4919) {

			yyrg4919 := len(yyv4919) > 0
			yyv24919 := yyv4919
			yyrl4919, yyrt4919 = z.DecInferLen(yyl4919, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4919 {
				if yyrl4919 <= cap(yyv4919) {
					yyv4919 = yyv4919[:yyrl4919]
				} else {
					yyv4919 = make([]DownwardAPIVolumeFile, yyrl4919)
				}
			} else {
				yyv4919 = make([]DownwardAPIVolumeFile, yyrl4919)
			}
			yyc4919 = true
			yyrr4919 = len(yyv4919)
			if yyrg4919 {
				copy(yyv4919, yyv24919)
			}
		} else if yyl4919 != len(yyv4919) {
			yyv4919 = yyv4919[:yyl4919]
			yyc4919 = true
		}
		yyj4919 := 0
		for ; yyj4919 < yyrr4919; yyj4919++ {
			yyh4919.ElemContainerState(yyj4919)
			if r.TryDecodeAsNil() {
				yyv4919[yyj4919] = DownwardAPIVolumeFile{}
			} else {
				yyv4920 := &yyv4919[yyj4919]
				yyv4920.CodecDecodeSelf(d)
			}

		}
		if yyrt4919 {
			for ; yyj4919 < yyl4919; yyj4919++ {
				yyv4919 = append(yyv4919, DownwardAPIVolumeFile{})
				yyh4919.ElemContainerState(yyj4919)
				if r.TryDecodeAsNil() {
					yyv4919[yyj4919] = DownwardAPIVolumeFile{}
				} else {
					yyv4921 := &yyv4919[yyj4919]
					yyv4921.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4919 := 0
		for ; !r.CheckBreak(); yyj4919++ {

			if yyj4919 >= len(yyv4919) {
				yyv4919 = append(yyv4919, DownwardAPIVolumeFile{}) // var yyz4919 DownwardAPIVolumeFile
				yyc4919 = true
			}
			yyh4919.ElemContainerState(yyj4919)
			if yyj4919 < len(yyv4919) {
				if r.TryDecodeAsNil() {
					yyv4919[yyj4919] = DownwardAPIVolumeFile{}
				} else {
					yyv4922 := &yyv4919[yyj4919]
					yyv4922.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4919 < len(yyv4919) {
			yyv4919 = yyv4919[:yyj4919]
			yyc4919 = true
		} else if yyj4919 == 0 && yyv4919 == nil {
			yyv4919 = []DownwardAPIVolumeFile{}
			yyc4919 = true
		}
	}
	yyh4919.End()
	if yyc4919 {
		*v = yyv4919
	}
}
